[0] INFO NoPol - Source files: [/apiarty/data/VUL4J-9/apache/commons-configuration/src/main/java, /apiarty/data/VUL4J-9/apache/commons-configuration/src/test/java]
[1] INFO NoPol - Classpath: [file:/apiarty/data/VUL4J-9/apache/commons-configuration/target/classes/, file:/apiarty/data/VUL4J-9/apache/commons-configuration/target/test-classes/, file:/root/.m2/repository/org/apache/commons/commons-lang3/3.9/commons-lang3-3.9.jar, file:/root/.m2/repository/org/apache/commons/commons-text/1.8/commons-text-1.8.jar, file:/root/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar, file:/root/.m2/repository/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar, file:/root/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar, file:/root/.m2/repository/commons-codec/commons-codec/1.14/commons-codec-1.14.jar, file:/root/.m2/repository/org/apache/commons/commons-jexl/2.1.1/commons-jexl-2.1.1.jar, file:/root/.m2/repository/org/apache/commons/commons-vfs2/2.6.0/commons-vfs2-2.6.0.jar, file:/root/.m2/repository/org/apache/hadoop/hadoop-hdfs-client/3.2.1/hadoop-hdfs-client-3.2.1.jar, file:/root/.m2/repository/com/squareup/okhttp/okhttp/2.7.5/okhttp-2.7.5.jar, file:/root/.m2/repository/com/squareup/okio/okio/1.6.0/okio-1.6.0.jar, file:/root/.m2/repository/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar, file:/root/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar, file:/root/.m2/repository/org/springframework/spring-core/4.3.25.RELEASE/spring-core-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-beans/4.3.25.RELEASE/spring-beans-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-context/4.3.25.RELEASE/spring-context-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-aop/4.3.25.RELEASE/spring-aop-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-expression/4.3.25.RELEASE/spring-expression-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-test/4.3.25.RELEASE/spring-test-4.3.25.RELEASE.jar, file:/root/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar, file:/root/.m2/repository/org/yaml/snakeyaml/1.25/snakeyaml-1.25.jar, file:/root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.10.2/jackson-databind-2.10.2.jar, file:/root/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.10.2/jackson-annotations-2.10.2.jar, file:/root/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.10.2/jackson-core-2.10.2.jar, file:/root/.m2/repository/org/apache/commons/commons-dbcp2/2.7.0/commons-dbcp2-2.7.0.jar, file:/root/.m2/repository/org/apache/commons/commons-pool2/2.8.0/commons-pool2-2.8.0.jar, file:/root/.m2/repository/org/hsqldb/hsqldb/2.5.0/hsqldb-2.5.0.jar, file:/root/.m2/repository/org/dbunit/dbunit/2.6.0/dbunit-2.6.0.jar, file:/root/.m2/repository/org/apache/poi/poi-ooxml/3.17/poi-ooxml-3.17.jar, file:/root/.m2/repository/org/apache/poi/poi/3.17/poi-3.17.jar, file:/root/.m2/repository/org/apache/commons/commons-collections4/4.1/commons-collections4-4.1.jar, file:/root/.m2/repository/org/apache/poi/poi-ooxml-schemas/3.17/poi-ooxml-schemas-3.17.jar, file:/root/.m2/repository/org/apache/xmlbeans/xmlbeans/2.6.0/xmlbeans-2.6.0.jar, file:/root/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar, file:/root/.m2/repository/com/github/virtuald/curvesapi/1.04/curvesapi-1.04.jar, file:/root/.m2/repository/postgresql/postgresql/8.4-701.jdbc3/postgresql-8.4-701.jdbc3.jar, file:/root/.m2/repository/junit/junit/4.13/junit-4.13.jar, file:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/root/.m2/repository/junit-addons/junit-addons/1.4/junit-addons-1.4.jar, file:/root/.m2/repository/mockobjects/mockobjects-core/0.09/mockobjects-core-0.09.jar, file:/root/.m2/repository/mockobjects/mockobjects-jdk1.4-j2ee1.3/0.09/mockobjects-jdk1.4-j2ee1.3-0.09.jar, file:/root/.m2/repository/org/easymock/easymock/4.1/easymock-4.1.jar, file:/root/.m2/repository/org/objenesis/objenesis/3.1/objenesis-3.1.jar, file:/root/.m2/repository/com/sun/mail/mailapi/1.6.4/mailapi-1.6.4.jar, file:/root/.m2/repository/com/sun/activation/jakarta.activation/1.2.1/jakarta.activation-1.2.1.jar, file:/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar, file:/root/.m2/repository/org/slf4j/slf4j-api/1.7.26/slf4j-api-1.7.26.jar, file:/root/.m2/repository/org/slf4j/slf4j-ext/1.7.26/slf4j-ext-1.7.26.jar, file:/root/.m2/repository/org/slf4j/slf4j-log4j12/1.7.26/slf4j-log4j12-1.7.26.jar, file:/root/.m2/repository/org/slf4j/slf4j-nop/1.7.26/slf4j-nop-1.7.26.jar]
[3] INFO NoPol - Statement type: PRE_THEN_COND
[3] INFO NoPol - Args: [org.apache.commons.configuration2.TestYAMLConfiguration]
[5] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/nopol/nopol/lib/z3/z3_for_linux', projectSources=[/apiarty/data/VUL4J-9/apache/commons-configuration/src/main/java, /apiarty/data/VUL4J-9/apache/commons-configuration/src/test/java], projectClasspath='[Ljava.net.URL;@2b80d80f', projectTests=[org.apache.commons.configuration2.TestYAMLConfiguration], complianceLevel=8, outputFolder=., json=false}
[6] INFO NoPol - Available processors (cores): 8
[11] INFO NoPol - Free memory: 69 MB
[12] INFO NoPol - Maximum memory: 3 GB
[13] INFO NoPol - Total memory available to JVM: 80 MB
[15] INFO NoPol - Java version: null
[16] INFO NoPol - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
[17] INFO NoPol - PATH: /apiarty/apiarty.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/nopol/nopol/lib/z3/z3_for_linux', projectSources=[/apiarty/data/VUL4J-9/apache/commons-configuration/src/main/java, /apiarty/data/VUL4J-9/apache/commons-configuration/src/test/java], projectClasspath='[Ljava.net.URL;@2b80d80f', projectTests=[org.apache.commons.configuration2.TestYAMLConfiguration], complianceLevel=8, outputFolder=., json=false}
Parsing --path-options-file /tmp/test_runner15448239076522405993.options
Parsing --sourceBinaries /apiarty/data/VUL4J-9/apache/commons-configuration/./target/classes --testBinaries /apiarty/data/VUL4J-9/apache/commons-configuration/./target/test-classes --class org.apache.commons.configuration2.TestYAMLConfiguration --tests org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_dictionary:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_very_nested_properties:org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromStream:org.apache.commons.configuration2.TestYAMLConfiguration#testSave:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_nested_with_list:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_subset:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_nested:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_integer:org.apache.commons.configuration2.TestYAMLConfiguration#testCopyConstructor:org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromReader:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_simple  --coverage-detail DETAIL_COMPRESSED --nb-failing-load-class 0
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
File saved to the following path: /apiarty/data/VUL4J-9/apache/commons-configuration/target/CoveredTestResultPerTest.dat
[17462] INFO CoverageRunner - Tests found: 11
[17465] INFO CoverageRunner - Tests executed: 11
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[19767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:212.
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[20827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:210.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[21660] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:210.
2064407578
2064407578
146864528
146864528
146864528
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[23785] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:1697.
1261542978
1261542978
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[25090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.InMemoryNodeModel:1112.
1261542978
1261542978
1261542978
1261542978
1261542978
1261542978
1261542978
1261542978
1261542978
-1077189172
1261542978
1261542978
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[27422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.InMemoryNodeModel:784.
-1323904515
-1323904515
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[29059] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:656.
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[30350] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:641.
-1323904515
-801001282
-801001282
[31184] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[31208] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(8).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("parentInterpolator.parentInterpolator",parentInterpolator.parentInterpolator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("parentInterpolator",parentInterpolator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("parentInterpolator.substitutor",parentInterpolator.substitutor);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("parentInterpolator.defaultLookups",parentInterpolator.defaultLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("parentInterpolator.prefixLookups",parentInterpolator.prefixLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor);} catch (Exception ex1) {ex1.printStackTrace();};
            if (org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator!=null) {
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator());} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups());} catch (Exception ex1) {ex1.printStackTrace();};
            }
            fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionEnds();
        }
        if (runtimeAngelicValue)
            this.parentInterpolator = parentInterpolator;

    }
}
[31212] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1938082773
1938082773
1938082773
-801001282
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[33179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:454.
-801001282
[33705] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[33726] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(10).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("lookups",lookups);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator);} catch (Exception ex1) {ex1.printStackTrace();};
                if (org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionEnds();
            }
            if (runtimeAngelicValue)
                prefixLookups.putAll(lookups);

        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[33730] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-801001282
[34346] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[34358] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(11).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("lookups",lookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("lookups != null",lookups != null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor);} catch (Exception ex1) {ex1.printStackTrace();};
            if (org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator!=null) {
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator());} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups());} catch (Exception ex1) {ex1.printStackTrace();};
            }
            fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionEnds();
        }
        if (runtimeAngelicValue) if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[34361] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
[34826] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[34838] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = lookups != null;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("lookups",lookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("lookups != null",lookups != null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor);} catch (Exception ex1) {ex1.printStackTrace();};
            if (org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator!=null) {
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator());} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups());} catch (Exception ex1) {ex1.printStackTrace();};
            }
            fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
        }
        if (runtimeAngelicValue) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[34841] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1261542978
1261542978
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[35896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.InMemoryNodeModel:395.
-801001282
1460963237
1460963237
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[36849] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.event.BaseEventSource:332.
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[38115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:292.
1938082773
1938082773
1938082773
1938082773
1938082773
1404175031
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[39834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTracker:276.
1404175031
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[40611] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTracker:273.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[41287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTracker:273.
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[42576] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:270.
-801001282
-801001282
[43195] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[43205] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(20).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("lookups",lookups);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator);} catch (Exception ex1) {ex1.printStackTrace();};
                if (org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(20).collectionEnds();
            }
            if (runtimeAngelicValue)
                defaultLookups.addAll(lookups);

        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[43208] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-801001282
[43841] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[43853] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(21).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("lookups",lookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("lookups != null",lookups != null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor);} catch (Exception ex1) {ex1.printStackTrace();};
            if (org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator!=null) {
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator());} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups());} catch (Exception ex1) {ex1.printStackTrace();};
            }
            fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectionEnds();
        }
        if (runtimeAngelicValue) if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[43856] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
[44231] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[44243] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = lookups != null;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(22).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("lookups",lookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.prefixLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.defaultLookups);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("lookups != null",lookups != null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.substitutor);} catch (Exception ex1) {ex1.printStackTrace();};
            if (org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator!=null) {
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getParentInterpolator());} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups()",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.this.parentInterpolator.getDefaultPrefixLookups());} catch (Exception ex1) {ex1.printStackTrace();};
            }
            fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(22).collectionEnds();
        }
        if (runtimeAngelicValue) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[44246] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
-1077189172
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[45198] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractHierarchicalConfiguration:241.
-71692793
1450327177
-1077189172
1450327177
[45867] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:42: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:47: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[45878] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(24).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("inverseMapping",inverseMapping);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("org.apache.commons.configuration2.tree.TreeData.this.parentMapping",org.apache.commons.configuration2.tree.TreeData.this.parentMapping);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("org.apache.commons.configuration2.tree.TreeData.this.root",org.apache.commons.configuration2.tree.TreeData.this.root);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("org.apache.commons.configuration2.tree.TreeData.this.replacementMapping",org.apache.commons.configuration2.tree.TreeData.this.replacementMapping);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("org.apache.commons.configuration2.tree.TreeData.this.nodeTracker",org.apache.commons.configuration2.tree.TreeData.this.nodeTracker);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("replacements",replacements);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("org.apache.commons.configuration2.tree.TreeData.this.referenceTracker",org.apache.commons.configuration2.tree.TreeData.this.referenceTracker);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("org.apache.commons.configuration2.tree.TreeData.this.inverseReplacementMapping",org.apache.commons.configuration2.tree.TreeData.this.inverseReplacementMapping);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectionEnds();
        }
        if (runtimeAngelicValue)
            for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
                inverseMapping.put(e.getValue(), e.getKey());
            }

        return inverseMapping;
    }
}
[45880] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-71692793
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[46539] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.io.ConfigurationLogger:236.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[47107] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.io.ConfigurationLogger:236.
1450327177
-1077189172
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[48001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractHierarchicalConfiguration:234.
-801001282
-1269566003
-1269566003
-801001282
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[49132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:197.
-801001282
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[49940] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:195.
-1269566003
-1077189172
-1077189172
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[50977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractHierarchicalConfiguration:192.
-801001282
[51516] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[51529] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(31).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("spec",spec);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("spec == null",spec == null);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionEnds();
        }
        if (runtimeAngelicValue) if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[51532] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
[51921] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[51937] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = spec == null;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(32).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("spec",spec);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectInput("spec == null",spec == null);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectionEnds();
        }
        if (runtimeAngelicValue) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[51939] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1077189172
-1623179977
-1269566003
-1269566003
-1269566003
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[53142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:178.
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[53760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:178.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[54348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:178.
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[55037] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:176.
-1269566003
-1269566003
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[55883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:174.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[56519] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:174.
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[57279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:172.
-1269566003
-801001282
-801001282
[58002] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[58015] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(40).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("ci",ci);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("spec",spec);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionEnds();
        }
        if (runtimeAngelicValue)
            ci.setParentInterpolator(spec.getParentInterpolator());

        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[58018] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1269566003
-801001282
[58656] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[58666] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(41).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("ci",ci);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("spec",spec);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectionEnds();
        }
        if (runtimeAngelicValue)
            ci.registerLookups(spec.getPrefixLookups());

        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[58668] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1269566003
[59149] ERROR DynamicClassCompiler - [Compilation errors]
AbstractYAMLBasedConfiguration.java:65: error: missing return statement
    }
    ^
Note: AbstractYAMLBasedConfiguration.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
[59181] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class AbstractYAMLBasedConfiguration extends org.apache.commons.configuration2.BaseHierarchicalConfiguration {
    protected AbstractYAMLBasedConfiguration() {
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected AbstractYAMLBasedConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        super(c);
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected void load(final java.util.Map<java.lang.String, java.lang.Object> map) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> roots = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy("", map);
        getNodeModel().setRootNode(roots.get(0));
    }

    protected java.util.Map<java.lang.String, java.lang.Object> constructMap(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(node.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode cNode : node.getChildren()) {
            final java.lang.Object value = (cNode.getChildren().isEmpty()) ? cNode.getValue() : constructMap(cNode);
            org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.addEntry(map, cNode.getNodeName(), value);
        }
        return map;
    }

    private static void addEntry(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key, final java.lang.Object value) {
        final java.lang.Object oldValue = map.get(key);
        if (oldValue == null) {
            map.put(key, value);
        } else if (oldValue instanceof java.util.Collection) {
            @java.lang.SuppressWarnings("unchecked")
            final java.util.Collection<java.lang.Object> values = ((java.util.Collection<java.lang.Object>) (oldValue));
            values.add(value);
        } else {
            final java.util.Collection<java.lang.Object> values = new java.util.ArrayList<>();
            values.add(oldValue);
            values.add(value);
            map.put(key, values);
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> constructHierarchy(final java.lang.String key, final java.lang.Object elem) {
        if (elem instanceof java.util.Map) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseMap(((java.util.Map<java.lang.String, java.lang.Object>) (elem)), key);
        } else if (elem instanceof java.util.Collection) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseCollection(((java.util.Collection<java.lang.Object>) (elem)), key);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(42).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectInput("elem",elem);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectInput("key",key);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.util.Collections.singletonList(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key).value(elem).create());

        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseMap(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder subtree = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key);
        for (final java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(entry.getKey(), entry.getValue());
            for (final org.apache.commons.configuration2.tree.ImmutableNode child : children) {
                subtree.addChild(child);
            }
        }
        return java.util.Collections.singletonList(subtree.create());
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseCollection(final java.util.Collection<java.lang.Object> col, final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.ArrayList<>(col.size());
        for (final java.lang.Object elem : col) {
            nodes.addAll(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(key, elem));
        }
        return nodes;
    }

    static void rethrowException(final java.lang.Exception e) throws org.apache.commons.configuration2.ex.ConfigurationException {
        if (e instanceof java.lang.ClassCastException) {
            throw new org.apache.commons.configuration2.ex.ConfigurationException("Error parsing", e);
        }
        throw new org.apache.commons.configuration2.ex.ConfigurationException("Unable to load the configuration", e);
    }
}
[59183] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-801001282
[59707] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[59721] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(43).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("ci",ci);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("spec",spec);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectionEnds();
        }
        if (runtimeAngelicValue)
            ci.addDefaultLookups(spec.getDefaultLookups());

        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[59723] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1623179977
-801001282
-1623179977
-1623179977
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[60709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:153.
-1269566003
[61178] ERROR DynamicClassCompiler - [Compilation errors]
AbstractYAMLBasedConfiguration.java:65: error: missing return statement
    }
    ^
Note: AbstractYAMLBasedConfiguration.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
[61216] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class AbstractYAMLBasedConfiguration extends org.apache.commons.configuration2.BaseHierarchicalConfiguration {
    protected AbstractYAMLBasedConfiguration() {
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected AbstractYAMLBasedConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        super(c);
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected void load(final java.util.Map<java.lang.String, java.lang.Object> map) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> roots = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy("", map);
        getNodeModel().setRootNode(roots.get(0));
    }

    protected java.util.Map<java.lang.String, java.lang.Object> constructMap(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(node.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode cNode : node.getChildren()) {
            final java.lang.Object value = (cNode.getChildren().isEmpty()) ? cNode.getValue() : constructMap(cNode);
            org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.addEntry(map, cNode.getNodeName(), value);
        }
        return map;
    }

    private static void addEntry(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key, final java.lang.Object value) {
        final java.lang.Object oldValue = map.get(key);
        if (oldValue == null) {
            map.put(key, value);
        } else if (oldValue instanceof java.util.Collection) {
            @java.lang.SuppressWarnings("unchecked")
            final java.util.Collection<java.lang.Object> values = ((java.util.Collection<java.lang.Object>) (oldValue));
            values.add(value);
        } else {
            final java.util.Collection<java.lang.Object> values = new java.util.ArrayList<>();
            values.add(oldValue);
            values.add(value);
            map.put(key, values);
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> constructHierarchy(final java.lang.String key, final java.lang.Object elem) {
        if (elem instanceof java.util.Map) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseMap(((java.util.Map<java.lang.String, java.lang.Object>) (elem)), key);
        } else if (elem instanceof java.util.Collection) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(45).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("elem",elem);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("key",key);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectionEnds();
            }
            if (runtimeAngelicValue)
                return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseCollection(((java.util.Collection<java.lang.Object>) (elem)), key);

        } else {
            return java.util.Collections.singletonList(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key).value(elem).create());
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseMap(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder subtree = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key);
        for (final java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(entry.getKey(), entry.getValue());
            for (final org.apache.commons.configuration2.tree.ImmutableNode child : children) {
                subtree.addChild(child);
            }
        }
        return java.util.Collections.singletonList(subtree.create());
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseCollection(final java.util.Collection<java.lang.Object> col, final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.ArrayList<>(col.size());
        for (final java.lang.Object elem : col) {
            nodes.addAll(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(key, elem));
        }
        return nodes;
    }

    static void rethrowException(final java.lang.Exception e) throws org.apache.commons.configuration2.ex.ConfigurationException {
        if (e instanceof java.lang.ClassCastException) {
            throw new org.apache.commons.configuration2.ex.ConfigurationException("Error parsing", e);
        }
        throw new org.apache.commons.configuration2.ex.ConfigurationException("Unable to load the configuration", e);
    }
}
[61218] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[61873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:151.
-1269566003
[62363] ERROR DynamicClassCompiler - [Compilation errors]
AbstractYAMLBasedConfiguration.java:66: error: missing return statement
    }
    ^
Note: AbstractYAMLBasedConfiguration.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
[62393] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class AbstractYAMLBasedConfiguration extends org.apache.commons.configuration2.BaseHierarchicalConfiguration {
    protected AbstractYAMLBasedConfiguration() {
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected AbstractYAMLBasedConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        super(c);
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected void load(final java.util.Map<java.lang.String, java.lang.Object> map) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> roots = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy("", map);
        getNodeModel().setRootNode(roots.get(0));
    }

    protected java.util.Map<java.lang.String, java.lang.Object> constructMap(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(node.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode cNode : node.getChildren()) {
            final java.lang.Object value = (cNode.getChildren().isEmpty()) ? cNode.getValue() : constructMap(cNode);
            org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.addEntry(map, cNode.getNodeName(), value);
        }
        return map;
    }

    private static void addEntry(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key, final java.lang.Object value) {
        final java.lang.Object oldValue = map.get(key);
        if (oldValue == null) {
            map.put(key, value);
        } else if (oldValue instanceof java.util.Collection) {
            @java.lang.SuppressWarnings("unchecked")
            final java.util.Collection<java.lang.Object> values = ((java.util.Collection<java.lang.Object>) (oldValue));
            values.add(value);
        } else {
            final java.util.Collection<java.lang.Object> values = new java.util.ArrayList<>();
            values.add(oldValue);
            values.add(value);
            map.put(key, values);
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> constructHierarchy(final java.lang.String key, final java.lang.Object elem) {
        if (elem instanceof java.util.Map) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseMap(((java.util.Map<java.lang.String, java.lang.Object>) (elem)), key);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(47).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(47).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(47).collectInput("elem",elem);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(47).collectInput("key",key);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(47).collectInput("elem instanceof java.util.Collection",elem instanceof java.util.Collection);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(47).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(47).collectionEnds();
            }
            if (runtimeAngelicValue) if (elem instanceof java.util.Collection) {
                return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseCollection(((java.util.Collection<java.lang.Object>) (elem)), key);
            } else {
                return java.util.Collections.singletonList(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key).value(elem).create());
            }
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseMap(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder subtree = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key);
        for (final java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(entry.getKey(), entry.getValue());
            for (final org.apache.commons.configuration2.tree.ImmutableNode child : children) {
                subtree.addChild(child);
            }
        }
        return java.util.Collections.singletonList(subtree.create());
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseCollection(final java.util.Collection<java.lang.Object> col, final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.ArrayList<>(col.size());
        for (final java.lang.Object elem : col) {
            nodes.addAll(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(key, elem));
        }
        return nodes;
    }

    static void rethrowException(final java.lang.Exception e) throws org.apache.commons.configuration2.ex.ConfigurationException {
        if (e instanceof java.lang.ClassCastException) {
            throw new org.apache.commons.configuration2.ex.ConfigurationException("Error parsing", e);
        }
        throw new org.apache.commons.configuration2.ex.ConfigurationException("Unable to load the configuration", e);
    }
}
[62395] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[63061] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:150.
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[63709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:150.
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[64342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:149.
-1269566003
[64805] ERROR DynamicClassCompiler - [Compilation errors]
AbstractYAMLBasedConfiguration.java:65: error: missing return statement
    }
    ^
Note: AbstractYAMLBasedConfiguration.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
[64841] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class AbstractYAMLBasedConfiguration extends org.apache.commons.configuration2.BaseHierarchicalConfiguration {
    protected AbstractYAMLBasedConfiguration() {
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected AbstractYAMLBasedConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        super(c);
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected void load(final java.util.Map<java.lang.String, java.lang.Object> map) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> roots = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy("", map);
        getNodeModel().setRootNode(roots.get(0));
    }

    protected java.util.Map<java.lang.String, java.lang.Object> constructMap(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(node.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode cNode : node.getChildren()) {
            final java.lang.Object value = (cNode.getChildren().isEmpty()) ? cNode.getValue() : constructMap(cNode);
            org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.addEntry(map, cNode.getNodeName(), value);
        }
        return map;
    }

    private static void addEntry(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key, final java.lang.Object value) {
        final java.lang.Object oldValue = map.get(key);
        if (oldValue == null) {
            map.put(key, value);
        } else if (oldValue instanceof java.util.Collection) {
            @java.lang.SuppressWarnings("unchecked")
            final java.util.Collection<java.lang.Object> values = ((java.util.Collection<java.lang.Object>) (oldValue));
            values.add(value);
        } else {
            final java.util.Collection<java.lang.Object> values = new java.util.ArrayList<>();
            values.add(oldValue);
            values.add(value);
            map.put(key, values);
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> constructHierarchy(final java.lang.String key, final java.lang.Object elem) {
        if (elem instanceof java.util.Map) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(51).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("elem",elem);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("key",key);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectionEnds();
            }
            if (runtimeAngelicValue)
                return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseMap(((java.util.Map<java.lang.String, java.lang.Object>) (elem)), key);

        } else if (elem instanceof java.util.Collection) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseCollection(((java.util.Collection<java.lang.Object>) (elem)), key);
        } else {
            return java.util.Collections.singletonList(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key).value(elem).create());
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseMap(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder subtree = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key);
        for (final java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(entry.getKey(), entry.getValue());
            for (final org.apache.commons.configuration2.tree.ImmutableNode child : children) {
                subtree.addChild(child);
            }
        }
        return java.util.Collections.singletonList(subtree.create());
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseCollection(final java.util.Collection<java.lang.Object> col, final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.ArrayList<>(col.size());
        for (final java.lang.Object elem : col) {
            nodes.addAll(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(key, elem));
        }
        return nodes;
    }

    static void rethrowException(final java.lang.Exception e) throws org.apache.commons.configuration2.ex.ConfigurationException {
        if (e instanceof java.lang.ClassCastException) {
            throw new org.apache.commons.configuration2.ex.ConfigurationException("Error parsing", e);
        }
        throw new org.apache.commons.configuration2.ex.ConfigurationException("Unable to load the configuration", e);
    }
}
[64845] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1623179977
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[65646] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:146.
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[66261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:146.
-1623179977
-801001282
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[67055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:143.
-801001282
[67546] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[67555] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(55).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectionEnds();
        }
        if (runtimeAngelicValue)
            substitutor = initSubstitutor();

    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[67558] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1623179977
-801001282
[68101] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[68109] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(56).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(56).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(56).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(56).collectionEnds();
        }
        if (runtimeAngelicValue)
            defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();

        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[68112] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-801001282
[68599] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[68607] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(57).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(57).collectionEnds();
        }
        if (runtimeAngelicValue)
            prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();

        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        ci.setParentInterpolator(spec.getParentInterpolator());
        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[68611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-801001282
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[69891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:134.
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[70848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:133.
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[71794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:132.
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[72746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:131.
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[73750] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:130.
-2014690467
1938082773
-2014690467
-71692793
-2014690467
-71692793
-71692793
[74685] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationLogger.java:32: error: variable log might not have been initialized
    }
    ^
[74689] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationLogger {
    private final org.apache.commons.logging.Log log;

    public ConfigurationLogger(final java.lang.String loggerName) {
        this(org.apache.commons.configuration2.io.ConfigurationLogger.createLoggerForName(loggerName));
    }

    public ConfigurationLogger(final java.lang.Class<?> logCls) {
        this(org.apache.commons.configuration2.io.ConfigurationLogger.createLoggerForClass(logCls));
    }

    protected ConfigurationLogger() {
        this(((org.apache.commons.logging.Log) (null)));
    }

    ConfigurationLogger(final org.apache.commons.logging.Log wrapped) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(63).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionEnds();
        }
        if (runtimeAngelicValue)
            log = wrapped;

    }

    public static org.apache.commons.configuration2.io.ConfigurationLogger newDummyLogger() {
        return new org.apache.commons.configuration2.io.ConfigurationLogger(new org.apache.commons.logging.impl.NoOpLog());
    }

    public boolean isDebugEnabled() {
        return getLog().isDebugEnabled();
    }

    public void debug(final java.lang.String msg) {
        getLog().debug(msg);
    }

    public boolean isInfoEnabled() {
        return getLog().isInfoEnabled();
    }

    public void info(final java.lang.String msg) {
        getLog().info(msg);
    }

    public void warn(final java.lang.String msg) {
        getLog().warn(msg);
    }

    public void warn(final java.lang.String msg, final java.lang.Throwable ex) {
        getLog().warn(msg, ex);
    }

    public void error(final java.lang.String msg) {
        getLog().error(msg);
    }

    public void error(final java.lang.String msg, final java.lang.Throwable ex) {
        getLog().error(msg, ex);
    }

    org.apache.commons.logging.Log getLog() {
        return log;
    }

    private static org.apache.commons.logging.Log createLoggerForName(final java.lang.String name) {
        if (name == null) {
            throw new java.lang.IllegalArgumentException("Logger name must not be null!");
        }
        return org.apache.commons.logging.LogFactory.getLog(name);
    }

    private static org.apache.commons.logging.Log createLoggerForClass(final java.lang.Class<?> cls) {
        if (cls == null) {
            throw new java.lang.IllegalArgumentException("Logger class must not be null!");
        }
        return org.apache.commons.logging.LogFactory.getLog(cls);
    }
}
[74691] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-71692793
-1323904515
-563619195
-1623179977
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[75616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:98.
-2014690467
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[76335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:96.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[76968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:96.
-1323904515
1450327177
-1323904515
[77707] ERROR DynamicClassCompiler - [Compilation errors]
BaseHierarchicalConfiguration.java:29: error: variable changeListener might not have been initialized
    }
    ^
[77765] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class BaseHierarchicalConfiguration extends org.apache.commons.configuration2.AbstractHierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> implements org.apache.commons.configuration2.tree.InMemoryNodeModelSupport {
    private final org.apache.commons.configuration2.event.EventListener<org.apache.commons.configuration2.event.ConfigurationEvent> changeListener;

    public BaseHierarchicalConfiguration() {
        this(((org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>) (null)));
    }

    public BaseHierarchicalConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        this(org.apache.commons.configuration2.BaseHierarchicalConfiguration.createNodeModel(c));
    }

    protected BaseHierarchicalConfiguration(final org.apache.commons.configuration2.tree.NodeModel<org.apache.commons.configuration2.tree.ImmutableNode> model) {
        super(model);
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(67).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionEnds();
        }
        if (runtimeAngelicValue)
            changeListener = createChangeListener();

    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.InMemoryNodeModel getNodeModel() {
        return ((org.apache.commons.configuration2.tree.InMemoryNodeModel) (super.getNodeModel()));
    }

    @java.lang.Override
    public org.apache.commons.configuration2.Configuration subset(final java.lang.String prefix) {
        beginRead(false);
        try {
            final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results = fetchNodeList(prefix);
            if (results.isEmpty()) {
                return new org.apache.commons.configuration2.BaseHierarchicalConfiguration();
            }
            final org.apache.commons.configuration2.BaseHierarchicalConfiguration parent = this;
            final org.apache.commons.configuration2.BaseHierarchicalConfiguration result = new org.apache.commons.configuration2.BaseHierarchicalConfiguration() {
                @java.lang.Override
                protected java.lang.Object interpolate(final java.lang.Object value) {
                    return parent.interpolate(value);
                }

                @java.lang.Override
                public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getInterpolator() {
                    return parent.getInterpolator();
                }
            };
            result.getModel().setRootNode(createSubsetRootNode(results));
            if (result.isEmpty()) {
                return new org.apache.commons.configuration2.BaseHierarchicalConfiguration();
            }
            result.setSynchronizer(getSynchronizer());
            return result;
        } finally {
            endRead();
        }
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createSubsetRootNode(final java.util.Collection<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder();
        java.lang.Object value = null;
        int valueCount = 0;
        for (final org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode> result : results) {
            if (result.isAttributeResult()) {
                builder.addAttribute(result.getAttributeName(), result.getAttributeValue(getModel().getNodeHandler()));
            } else {
                if (result.getNode().getValue() != null) {
                    value = result.getNode().getValue();
                    valueCount++;
                }
                builder.addChildren(result.getNode().getChildren());
                builder.addAttributes(result.getNode().getAttributes());
            }
        }
        if (valueCount == 1) {
            builder.value(value);
        }
        return builder.create();
    }

    @java.lang.Override
    public org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> configurationAt(final java.lang.String key, final boolean supportUpdates) {
        beginRead(false);
        try {
            return supportUpdates ? createConnectedSubConfiguration(key) : createIndependentSubConfiguration(key);
        } finally {
            endRead();
        }
    }

    protected org.apache.commons.configuration2.tree.InMemoryNodeModel getSubConfigurationParentModel() {
        return ((org.apache.commons.configuration2.tree.InMemoryNodeModel) (getModel()));
    }

    protected org.apache.commons.configuration2.tree.NodeSelector getSubConfigurationNodeSelector(final java.lang.String key) {
        return new org.apache.commons.configuration2.tree.NodeSelector(key);
    }

    protected org.apache.commons.configuration2.SubnodeConfiguration createSubConfigurationForTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.InMemoryNodeModelSupport parentModelSupport) {
        final org.apache.commons.configuration2.SubnodeConfiguration subConfig = new org.apache.commons.configuration2.SubnodeConfiguration(this, new org.apache.commons.configuration2.tree.TrackedNodeModel(parentModelSupport, selector, true));
        initSubConfigurationForThisParent(subConfig);
        return subConfig;
    }

    protected void initSubConfigurationForThisParent(final org.apache.commons.configuration2.SubnodeConfiguration subConfig) {
        initSubConfiguration(subConfig);
        subConfig.addEventListener(org.apache.commons.configuration2.event.ConfigurationEvent.ANY, changeListener);
    }

    private org.apache.commons.configuration2.BaseHierarchicalConfiguration createConnectedSubConfiguration(final java.lang.String key) {
        final org.apache.commons.configuration2.tree.NodeSelector selector = getSubConfigurationNodeSelector(key);
        getSubConfigurationParentModel().trackNode(selector, this);
        return createSubConfigurationForTrackedNode(selector, this);
    }

    private java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> createConnectedSubConfigurations(final org.apache.commons.configuration2.tree.InMemoryNodeModelSupport parentModelSupport, final java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> selectors) {
        final java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> configs = new java.util.ArrayList<>(selectors.size());
        for (final org.apache.commons.configuration2.tree.NodeSelector selector : selectors) {
            configs.add(createSubConfigurationForTrackedNode(selector, parentModelSupport));
        }
        return configs;
    }

    private org.apache.commons.configuration2.BaseHierarchicalConfiguration createIndependentSubConfiguration(final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> targetNodes = fetchFilteredNodeResults(key);
        final int size = targetNodes.size();
        if (size != 1) {
            throw new org.apache.commons.configuration2.ex.ConfigurationRuntimeException("Passed in key must select exactly one node (found %,d): %s", size, key);
        }
        final org.apache.commons.configuration2.BaseHierarchicalConfiguration sub = new org.apache.commons.configuration2.BaseHierarchicalConfiguration(new org.apache.commons.configuration2.tree.InMemoryNodeModel(targetNodes.get(0)));
        initSubConfiguration(sub);
        return sub;
    }

    private org.apache.commons.configuration2.BaseHierarchicalConfiguration createIndependentSubConfigurationForNode(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final org.apache.commons.configuration2.BaseHierarchicalConfiguration sub = new org.apache.commons.configuration2.BaseHierarchicalConfiguration(new org.apache.commons.configuration2.tree.InMemoryNodeModel(node));
        initSubConfiguration(sub);
        return sub;
    }

    private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> fetchFilteredNodeResults(final java.lang.String key) {
        final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler = getModel().getNodeHandler();
        return resolveNodeKey(handler.getRootNode(), key, handler);
    }

    @java.lang.Override
    public org.apache.commons.configuration2.ImmutableHierarchicalConfiguration immutableConfigurationAt(final java.lang.String key, final boolean supportUpdates) {
        return org.apache.commons.configuration2.ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }

    @java.lang.Override
    public org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> configurationAt(final java.lang.String key) {
        return configurationAt(key, false);
    }

    @java.lang.Override
    public org.apache.commons.configuration2.ImmutableHierarchicalConfiguration immutableConfigurationAt(final java.lang.String key) {
        return org.apache.commons.configuration2.ConfigurationUtils.unmodifiableConfiguration(configurationAt(key));
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> configurationsAt(final java.lang.String key) {
        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }
        final java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> results = new java.util.ArrayList<>(nodes.size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : nodes) {
            final org.apache.commons.configuration2.BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }
        return results;
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> configurationsAt(final java.lang.String key, final boolean supportUpdates) {
        if (!supportUpdates) {
            return configurationsAt(key);
        }
        org.apache.commons.configuration2.tree.InMemoryNodeModel parentModel;
        beginRead(false);
        try {
            parentModel = getSubConfigurationParentModel();
        } finally {
            endRead();
        }
        final java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> selectors = parentModel.selectAndTrackNodes(key, this);
        return createConnectedSubConfigurations(this, selectors);
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.ImmutableHierarchicalConfiguration> immutableConfigurationsAt(final java.lang.String key) {
        return org.apache.commons.configuration2.BaseHierarchicalConfiguration.toImmutable(configurationsAt(key));
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> childConfigurationsAt(final java.lang.String key) {
        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }
        if (nodes.size() != 1) {
            return java.util.Collections.emptyList();
        }
        final org.apache.commons.configuration2.tree.ImmutableNode parent = nodes.get(0);
        final java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> subs = new java.util.ArrayList<>(parent.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : parent.getChildren()) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }
        return subs;
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> childConfigurationsAt(final java.lang.String key, final boolean supportUpdates) {
        if (!supportUpdates) {
            return childConfigurationsAt(key);
        }
        final org.apache.commons.configuration2.tree.InMemoryNodeModel parentModel = getSubConfigurationParentModel();
        return createConnectedSubConfigurations(this, parentModel.trackChildNodes(key, this));
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.ImmutableHierarchicalConfiguration> immutableChildConfigurationsAt(final java.lang.String key) {
        return org.apache.commons.configuration2.BaseHierarchicalConfiguration.toImmutable(childConfigurationsAt(key));
    }

    protected void subnodeConfigurationChanged(final org.apache.commons.configuration2.event.ConfigurationEvent event) {
        fireEvent(org.apache.commons.configuration2.event.ConfigurationEvent.SUBNODE_CHANGED, null, event, event.isBeforeUpdate());
    }

    private void initSubConfiguration(final org.apache.commons.configuration2.BaseHierarchicalConfiguration sub) {
        sub.setSynchronizer(getSynchronizer());
        sub.setExpressionEngine(getExpressionEngine());
        sub.setListDelimiterHandler(getListDelimiterHandler());
        sub.setThrowExceptionOnMissing(isThrowExceptionOnMissing());
        sub.getInterpolator().setParentInterpolator(getInterpolator());
    }

    private org.apache.commons.configuration2.event.EventListener<org.apache.commons.configuration2.event.ConfigurationEvent> createChangeListener() {
        return ( event) -> subnodeConfigurationChanged(event);
    }

    @java.lang.Override
    public org.apache.commons.configuration2.Configuration interpolatedConfiguration() {
        final org.apache.commons.configuration2.BaseHierarchicalConfiguration.InterpolatedVisitor visitor = new org.apache.commons.configuration2.BaseHierarchicalConfiguration.InterpolatedVisitor();
        final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler = getModel().getNodeHandler();
        org.apache.commons.configuration2.tree.NodeTreeWalker.INSTANCE.walkDFS(handler.getRootNode(), visitor, handler);
        final org.apache.commons.configuration2.BaseHierarchicalConfiguration c = ((org.apache.commons.configuration2.BaseHierarchicalConfiguration) (clone()));
        c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
        return c;
    }

    @java.lang.Override
    protected org.apache.commons.configuration2.tree.NodeModel<org.apache.commons.configuration2.tree.ImmutableNode> cloneNodeModel() {
        return new org.apache.commons.configuration2.tree.InMemoryNodeModel(getModel().getNodeHandler().getRootNode());
    }

    private static java.util.List<org.apache.commons.configuration2.ImmutableHierarchicalConfiguration> toImmutable(final java.util.List<? extends org.apache.commons.configuration2.HierarchicalConfiguration<?>> subs) {
        final java.util.List<org.apache.commons.configuration2.ImmutableHierarchicalConfiguration> res = new java.util.ArrayList<>(subs.size());
        for (final org.apache.commons.configuration2.HierarchicalConfiguration<?> sub : subs) {
            res.add(org.apache.commons.configuration2.ConfigurationUtils.unmodifiableConfiguration(sub));
        }
        return res;
    }

    private static org.apache.commons.configuration2.tree.NodeModel<org.apache.commons.configuration2.tree.ImmutableNode> createNodeModel(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        final org.apache.commons.configuration2.tree.ImmutableNode root = (c != null) ? org.apache.commons.configuration2.BaseHierarchicalConfiguration.obtainRootNode(c) : null;
        return new org.apache.commons.configuration2.tree.InMemoryNodeModel(root);
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode obtainRootNode(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        return c.getNodeModel().getNodeHandler().getRootNode();
    }

    protected abstract static class BuilderVisitor extends org.apache.commons.configuration2.tree.ConfigurationNodeVisitorAdapter<org.apache.commons.configuration2.tree.ImmutableNode> {
        @java.lang.Override
        public void visitBeforeChildren(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            final org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler = ((org.apache.commons.configuration2.tree.ReferenceNodeHandler) (handler));
            updateNode(node, refHandler);
            insertNewChildNodes(node, refHandler);
        }

        protected abstract void insert(org.apache.commons.configuration2.tree.ImmutableNode newNode, org.apache.commons.configuration2.tree.ImmutableNode parent, org.apache.commons.configuration2.tree.ImmutableNode sibling1, org.apache.commons.configuration2.tree.ImmutableNode sibling2, org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler);

        protected abstract void update(org.apache.commons.configuration2.tree.ImmutableNode node, java.lang.Object reference, org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler);

        private void updateNode(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler) {
            final java.lang.Object reference = refHandler.getReference(node);
            if (reference != null) {
                update(node, reference, refHandler);
            }
        }

        private void insertNewChildNodes(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler) {
            final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> subNodes = new java.util.LinkedList<>(refHandler.getChildren(node));
            final java.util.Iterator<org.apache.commons.configuration2.tree.ImmutableNode> children = subNodes.iterator();
            org.apache.commons.configuration2.tree.ImmutableNode sibling1;
            org.apache.commons.configuration2.tree.ImmutableNode nd = null;
            while (children.hasNext()) {
                do {
                    sibling1 = nd;
                    nd = children.next();
                } while ((refHandler.getReference(nd) != null) && children.hasNext() );
                if (refHandler.getReference(nd) == null) {
                    final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> newNodes = new java.util.LinkedList<>();
                    newNodes.add(nd);
                    while (children.hasNext()) {
                        nd = children.next();
                        if (refHandler.getReference(nd) == null) {
                            newNodes.add(nd);
                        } else {
                            break;
                        }
                    } 
                    final org.apache.commons.configuration2.tree.ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;
                    for (final org.apache.commons.configuration2.tree.ImmutableNode insertNode : newNodes) {
                        if (refHandler.getReference(insertNode) == null) {
                            insert(insertNode, node, sibling1, sibling2, refHandler);
                            sibling1 = insertNode;
                        }
                    }
                }
            } 
        }
    }

    private class InterpolatedVisitor extends org.apache.commons.configuration2.tree.ConfigurationNodeVisitorAdapter<org.apache.commons.configuration2.tree.ImmutableNode> {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode.Builder> builderStack;

        private org.apache.commons.configuration2.tree.ImmutableNode interpolatedRoot;

        public InterpolatedVisitor() {
            builderStack = new java.util.LinkedList<>();
        }

        public org.apache.commons.configuration2.tree.ImmutableNode getInterpolatedRoot() {
            return interpolatedRoot;
        }

        @java.lang.Override
        public void visitBeforeChildren(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            if (isLeafNode(node, handler)) {
                handleLeafNode(node, handler);
            } else {
                final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(handler.getChildrenCount(node, null)).name(handler.nodeName(node)).value(interpolate(handler.getValue(node))).addAttributes(interpolateAttributes(node, handler));
                push(builder);
            }
        }

        @java.lang.Override
        public void visitAfterChildren(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            if (!isLeafNode(node, handler)) {
                final org.apache.commons.configuration2.tree.ImmutableNode newNode = pop().create();
                storeInterpolatedNode(newNode);
            }
        }

        private void push(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
            builderStack.add(0, builder);
        }

        private org.apache.commons.configuration2.tree.ImmutableNode.Builder pop() {
            return builderStack.remove(0);
        }

        private org.apache.commons.configuration2.tree.ImmutableNode.Builder peek() {
            return builderStack.get(0);
        }

        private boolean isLeafNode(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            return handler.getChildren(node).isEmpty();
        }

        private void handleLeafNode(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            final java.lang.Object value = interpolate(node.getValue());
            final java.util.Map<java.lang.String, java.lang.Object> interpolatedAttributes = new java.util.HashMap<>();
            final boolean attributeChanged = interpolateAttributes(node, handler, interpolatedAttributes);
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = (valueChanged(value, handler.getValue(node)) || attributeChanged) ? new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(handler.nodeName(node)).value(value).addAttributes(interpolatedAttributes).create() : node;
            storeInterpolatedNode(newNode);
        }

        private void storeInterpolatedNode(final org.apache.commons.configuration2.tree.ImmutableNode node) {
            if (builderStack.isEmpty()) {
                interpolatedRoot = node;
            } else {
                peek().addChild(node);
            }
        }

        private boolean interpolateAttributes(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler, final java.util.Map<java.lang.String, java.lang.Object> interpolatedAttributes) {
            boolean attributeChanged = false;
            for (final java.lang.String attr : handler.getAttributes(node)) {
                final java.lang.Object attrValue = interpolate(handler.getAttributeValue(node, attr));
                if (valueChanged(attrValue, handler.getAttributeValue(node, attr))) {
                    attributeChanged = true;
                }
                interpolatedAttributes.put(attr, attrValue);
            }
            return attributeChanged;
        }

        private java.util.Map<java.lang.String, java.lang.Object> interpolateAttributes(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            final java.util.Map<java.lang.String, java.lang.Object> attributes = new java.util.HashMap<>();
            interpolateAttributes(node, handler, attributes);
            return attributes;
        }

        private boolean valueChanged(final java.lang.Object interpolatedValue, final java.lang.Object value) {
            return org.apache.commons.lang3.ObjectUtils.notEqual(interpolatedValue, value);
        }
    }
}
[77771] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1323904515
-2014690467
1261542978
1404175031
-382563395
-2014690467
1261542978
1404175031
[78951] ERROR DynamicClassCompiler - [Compilation errors]
NodeTracker.java:24: error: variable trackedNodes might not have been initialized
    }
    ^
[79013] ERROR ConstraintModelBuilder - Unable to compile the change: 
class NodeTracker {
    private final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> trackedNodes;

    public NodeTracker() {
        this(java.util.Collections.<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData>emptyMap());
    }

    private NodeTracker(final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> map) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(68).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectionEnds();
        }
        if (runtimeAngelicValue)
            trackedNodes = map;

    }

    public org.apache.commons.configuration2.tree.NodeTracker trackNode(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>(trackedNodes);
        final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData = newState.get(selector);
        newState.put(selector, org.apache.commons.configuration2.tree.NodeTracker.trackDataForAddedObserver(root, selector, resolver, handler, trackData));
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.NodeTracker trackNodes(final java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> selectors, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> nodes) {
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>(trackedNodes);
        final java.util.Iterator<org.apache.commons.configuration2.tree.ImmutableNode> itNodes = nodes.iterator();
        for (final org.apache.commons.configuration2.tree.NodeSelector selector : selectors) {
            final org.apache.commons.configuration2.tree.ImmutableNode node = itNodes.next();
            org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData = newState.get(selector);
            if (trackData == null) {
                trackData = new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(node);
            } else {
                trackData = trackData.observerAdded();
            }
            newState.put(selector, trackData);
        }
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.NodeTracker untrackNode(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData = getTrackedNodeData(selector);
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>(trackedNodes);
        final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData newTrackData = trackData.observerRemoved();
        if (newTrackData == null) {
            newState.remove(selector);
        } else {
            newState.put(selector, newTrackData);
        }
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode getTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return getTrackedNodeData(selector).getNode();
    }

    public boolean isTrackedNodeDetached(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return getTrackedNodeData(selector).isDetached();
    }

    public org.apache.commons.configuration2.tree.InMemoryNodeModel getDetachedNodeModel(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return getTrackedNodeData(selector).getDetachedModel();
    }

    public org.apache.commons.configuration2.tree.NodeTracker update(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeSelector txTarget, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
        if (trackedNodes.isEmpty()) {
            return this;
        }
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> e : trackedNodes.entrySet()) {
            newState.put(e.getKey(), org.apache.commons.configuration2.tree.NodeTracker.determineUpdatedTrackedNodeData(root, txTarget, resolver, handler, e));
        }
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.NodeTracker detachAllTrackedNodes() {
        if (trackedNodes.isEmpty()) {
            return this;
        }
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> e : trackedNodes.entrySet()) {
            final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData newData = (e.getValue().isDetached()) ? e.getValue() : e.getValue().detach(null);
            newState.put(e.getKey(), newData);
        }
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.NodeTracker replaceAndDetachTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>(trackedNodes);
        newState.put(selector, getTrackedNodeData(selector).detach(newNode));
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    private org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData getTrackedNodeData(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData = trackedNodes.get(selector);
        if (trackData == null) {
            throw new org.apache.commons.configuration2.ex.ConfigurationRuntimeException("No tracked node found: " + selector);
        }
        return trackData;
    }

    private static org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData determineUpdatedTrackedNodeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeSelector txTarget, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler, final java.util.Map.Entry<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> e) {
        if (e.getValue().isDetached()) {
            return e.getValue();
        }
        org.apache.commons.configuration2.tree.ImmutableNode newTarget;
        try {
            newTarget = e.getKey().select(root, resolver, handler);
        } catch (final java.lang.Exception ex) {
            newTarget = null;
        }
        if (newTarget == null) {
            return org.apache.commons.configuration2.tree.NodeTracker.detachedTrackedNodeData(txTarget, e);
        }
        return e.getValue().updateNode(newTarget);
    }

    private static org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData detachedTrackedNodeData(final org.apache.commons.configuration2.tree.NodeSelector txTarget, final java.util.Map.Entry<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> e) {
        final org.apache.commons.configuration2.tree.ImmutableNode newNode = (e.getKey().equals(txTarget)) ? org.apache.commons.configuration2.tree.NodeTracker.createEmptyTrackedNode(e.getValue()) : null;
        return e.getValue().detach(newNode);
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode createEmptyTrackedNode(final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData data) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(data.getNode().getNodeName()).create();
    }

    private static org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackDataForAddedObserver(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler, final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData) {
        if (trackData != null) {
            return trackData.observerAdded();
        }
        final org.apache.commons.configuration2.tree.ImmutableNode target = selector.select(root, resolver, handler);
        if (target == null) {
            throw new org.apache.commons.configuration2.ex.ConfigurationRuntimeException("Selector does not select unique node: " + selector);
        }
        return new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(target);
    }

    private static class TrackedNodeData {
        private final org.apache.commons.configuration2.tree.ImmutableNode node;

        private final int observerCount;

        private final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedModel;

        public TrackedNodeData(final org.apache.commons.configuration2.tree.ImmutableNode nd) {
            this(nd, 1, null);
        }

        private TrackedNodeData(final org.apache.commons.configuration2.tree.ImmutableNode nd, final int obsCount, final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedNodeModel) {
            node = nd;
            observerCount = obsCount;
            detachedModel = detachedNodeModel;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode getNode() {
            return getDetachedModel() != null ? getDetachedModel().getRootNode() : node;
        }

        public org.apache.commons.configuration2.tree.InMemoryNodeModel getDetachedModel() {
            return detachedModel;
        }

        public boolean isDetached() {
            return getDetachedModel() != null;
        }

        public org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData observerAdded() {
            return new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(node, observerCount + 1, getDetachedModel());
        }

        public org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData observerRemoved() {
            return observerCount <= 1 ? null : new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(node, observerCount - 1, getDetachedModel());
        }

        public org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData updateNode(final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
            return new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(newNode, observerCount, getDetachedModel());
        }

        public org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData detach(final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
            final org.apache.commons.configuration2.tree.ImmutableNode newTrackedNode = (newNode != null) ? newNode : getNode();
            return new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(newTrackedNode, observerCount, new org.apache.commons.configuration2.tree.InMemoryNodeModel(newTrackedNode));
        }
    }
}
[79015] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1696971150
-2014690467
1404175031
1696971150
-2014690467
[79776] ERROR DynamicClassCompiler - [Compilation errors]
InterpolatorSpecification.java:29: error: variable defaultLookups might not have been initialized
    }
    ^
[79791] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class InterpolatorSpecification {
    private final org.apache.commons.configuration2.interpol.ConfigurationInterpolator interpolator;

    private final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private InterpolatorSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        prefixLookups = java.util.Collections.unmodifiableMap(new java.util.HashMap<>(builder.prefixLookups));
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(69).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectionEnds();
        }
        if (runtimeAngelicValue)
            defaultLookups = java.util.Collections.unmodifiableCollection(new java.util.ArrayList<>(builder.defLookups));

    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getInterpolator() {
        return interpolator;
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return parentInterpolator;
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getPrefixLookups() {
        return prefixLookups;
    }

    public java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return defaultLookups;
    }

    public static class Builder {
        private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

        private final java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> defLookups;

        private org.apache.commons.configuration2.interpol.ConfigurationInterpolator interpolator;

        private org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

        public Builder() {
            prefixLookups = new java.util.HashMap<>();
            defLookups = new java.util.LinkedList<>();
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withPrefixLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
            if (prefix == null) {
                throw new java.lang.IllegalArgumentException("Prefix must not be null!");
            }
            org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder.checkLookup(lookup);
            prefixLookups.put(prefix, lookup);
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withPrefixLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
            if (lookups != null) {
                for (final java.util.Map.Entry<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> e : lookups.entrySet()) {
                    withPrefixLookup(e.getKey(), e.getValue());
                }
            }
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
            org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder.checkLookup(lookup);
            defLookups.add(lookup);
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
            if (lookups != null) {
                for (final org.apache.commons.configuration2.interpol.Lookup l : lookups) {
                    withDefaultLookup(l);
                }
            }
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci) {
            interpolator = ci;
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent) {
            parentInterpolator = parent;
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification create() {
            final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec = new org.apache.commons.configuration2.interpol.InterpolatorSpecification(this);
            reset();
            return spec;
        }

        public void reset() {
            interpolator = null;
            parentInterpolator = null;
            prefixLookups.clear();
            defLookups.clear();
        }

        private static void checkLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
            if (lookup == null) {
                throw new java.lang.IllegalArgumentException("Lookup must not be null!");
            }
        }
    }
}
[79793] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1261542978
[80323] ERROR DynamicClassCompiler - [Compilation errors]
InMemoryNodeModel.java:26: error: variable structure might not have been initialized
    }
    ^
[80390] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class InMemoryNodeModel implements org.apache.commons.configuration2.tree.NodeModel<org.apache.commons.configuration2.tree.ImmutableNode> {
    private static final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> DUMMY_HANDLER = new org.apache.commons.configuration2.tree.TreeData(null, java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode>emptyMap(), java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode>emptyMap(), null, new org.apache.commons.configuration2.tree.ReferenceTracker());

    private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.configuration2.tree.TreeData> structure;

    public InMemoryNodeModel() {
        this(null);
    }

    public InMemoryNodeModel(final org.apache.commons.configuration2.tree.ImmutableNode root) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(70).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectionEnds();
        }
        if (runtimeAngelicValue)
            structure = new java.util.concurrent.atomic.AtomicReference<>(createTreeData(org.apache.commons.configuration2.tree.InMemoryNodeModel.initialRootNode(root), null));

    }

    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return getTreeData().getRootNode();
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> getNodeHandler() {
        return getReferenceNodeHandler();
    }

    @java.lang.Override
    public void addProperty(final java.lang.String key, final java.lang.Iterable<?> values, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        addProperty(key, null, values, resolver);
    }

    public void addProperty(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final java.lang.Iterable<?> values, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        if (org.apache.commons.configuration2.tree.InMemoryNodeModel.valuesNotEmpty(values)) {
            updateModel(( tx) -> {
                initializeAddTransaction(tx, key, values, resolver);
                return true;
            }, selector, resolver);
        }
    }

    @java.lang.Override
    public void addNodes(final java.lang.String key, final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> nodes, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        addNodes(key, null, nodes, resolver);
    }

    public void addNodes(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> nodes, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        if ((nodes != null) && (!nodes.isEmpty())) {
            updateModel(( tx) -> {
                final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results = resolver.resolveKey(tx.getQueryRoot(), key, tx.getCurrentData());
                if (results.size() == 1) {
                    if (results.get(0).isAttributeResult()) {
                        throw org.apache.commons.configuration2.tree.InMemoryNodeModel.attributeKeyException(key);
                    }
                    tx.addAddNodesOperation(results.get(0).getNode(), nodes);
                } else {
                    final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData = resolver.resolveAddKey(tx.getQueryRoot(), key, tx.getCurrentData());
                    if (addData.isAttribute()) {
                        throw org.apache.commons.configuration2.tree.InMemoryNodeModel.attributeKeyException(key);
                    }
                    final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(nodes.size()).name(addData.getNewNodeName()).addChildren(nodes).create();
                    org.apache.commons.configuration2.tree.InMemoryNodeModel.addNodesByAddData(tx, addData, java.util.Collections.singleton(newNode));
                }
                return true;
            }, selector, resolver);
        }
    }

    @java.lang.Override
    public void setProperty(final java.lang.String key, final java.lang.Object value, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        setProperty(key, null, value, resolver);
    }

    public void setProperty(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final java.lang.Object value, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        updateModel(( tx) -> {
            boolean added = false;
            final org.apache.commons.configuration2.tree.NodeUpdateData<org.apache.commons.configuration2.tree.ImmutableNode> updateData = resolver.resolveUpdateKey(tx.getQueryRoot(), key, value, tx.getCurrentData());
            if (!updateData.getNewValues().isEmpty()) {
                initializeAddTransaction(tx, key, updateData.getNewValues(), resolver);
                added = true;
            }
            final boolean cleared = org.apache.commons.configuration2.tree.InMemoryNodeModel.initializeClearTransaction(tx, updateData.getRemovedNodes());
            final boolean updated = org.apache.commons.configuration2.tree.InMemoryNodeModel.initializeUpdateTransaction(tx, updateData.getChangedValues());
            return (added || cleared) || updated;
        }, selector, resolver);
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> clearTree(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        return clearTree(key, null, resolver);
    }

    public java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> clearTree(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> removedElements = new java.util.LinkedList<>();
        updateModel(( tx) -> {
            boolean changes = false;
            final org.apache.commons.configuration2.tree.TreeData currentStructure = tx.getCurrentData();
            final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results = resolver.resolveKey(tx.getQueryRoot(), key, currentStructure);
            removedElements.clear();
            removedElements.addAll(results);
            for (final org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode> result : results) {
                if (result.isAttributeResult()) {
                    tx.addRemoveAttributeOperation(result.getNode(), result.getAttributeName());
                } else {
                    if (result.getNode() == currentStructure.getRootNode()) {
                        clear(resolver);
                        return false;
                    }
                    tx.addRemoveNodeOperation(currentStructure.getParent(result.getNode()), result.getNode());
                }
                changes = true;
            }
            return changes;
        }, selector, resolver);
        return removedElements;
    }

    @java.lang.Override
    public void clearProperty(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        clearProperty(key, null, resolver);
    }

    public void clearProperty(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        updateModel(( tx) -> {
            final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results = resolver.resolveKey(tx.getQueryRoot(), key, tx.getCurrentData());
            return org.apache.commons.configuration2.tree.InMemoryNodeModel.initializeClearTransaction(tx, results);
        }, selector, resolver);
    }

    @java.lang.Override
    public void clear(final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.configuration2.tree.ImmutableNode newRoot = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(getRootNode().getNodeName()).create();
        setRootNode(newRoot);
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getInMemoryRepresentation() {
        return getTreeData().getRootNode();
    }

    @java.lang.Override
    public void setRootNode(final org.apache.commons.configuration2.tree.ImmutableNode newRoot) {
        structure.set(createTreeData(org.apache.commons.configuration2.tree.InMemoryNodeModel.initialRootNode(newRoot), structure.get()));
    }

    public void replaceRoot(final org.apache.commons.configuration2.tree.ImmutableNode newRoot, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        if (newRoot == null) {
            throw new java.lang.IllegalArgumentException("Replaced root node must not be null!");
        }
        final org.apache.commons.configuration2.tree.TreeData current = structure.get();
        final org.apache.commons.configuration2.tree.TreeData temp = createTreeDataForRootAndTracker(newRoot, current.getNodeTracker());
        structure.set(temp.updateNodeTracker(temp.getNodeTracker().update(newRoot, null, resolver, temp)));
    }

    public void mergeRoot(final org.apache.commons.configuration2.tree.ImmutableNode node, final java.lang.String rootName, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, ?> references, final java.lang.Object rootRef, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        updateModel(( tx) -> {
            final org.apache.commons.configuration2.tree.TreeData current = tx.getCurrentData();
            final java.lang.String newRootName = org.apache.commons.configuration2.tree.InMemoryNodeModel.determineRootName(current.getRootNode(), node, rootName);
            if (newRootName != null) {
                tx.addChangeNodeNameOperation(current.getRootNode(), newRootName);
            }
            tx.addAddNodesOperation(current.getRootNode(), node.getChildren());
            tx.addAttributesOperation(current.getRootNode(), node.getAttributes());
            if (node.getValue() != null) {
                tx.addChangeNodeValueOperation(current.getRootNode(), node.getValue());
            }
            if (references != null) {
                tx.addNewReferences(references);
            }
            if (rootRef != null) {
                tx.addNewReference(current.getRootNode(), rootRef);
            }
            return true;
        }, null, resolver);
    }

    public void trackNode(final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final org.apache.commons.configuration2.tree.NodeTracker newTracker = current.getNodeTracker().trackNode(current.getRootNode(), selector, resolver, current);
            done = structure.compareAndSet(current, current.updateNodeTracker(newTracker));
        } while (!done );
    }

    public java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> selectAndTrackNodes(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.lang3.mutable.Mutable<java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector>> refSelectors = new org.apache.commons.lang3.mutable.MutableObject<>();
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = resolver.resolveNodeKey(current.getRootNode(), key, current);
            if (nodes.isEmpty()) {
                return java.util.Collections.emptyList();
            }
            done = structure.compareAndSet(current, org.apache.commons.configuration2.tree.InMemoryNodeModel.createSelectorsForTrackedNodes(refSelectors, nodes, current, resolver));
        } while (!done );
        return refSelectors.getValue();
    }

    public java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> trackChildNodes(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.lang3.mutable.Mutable<java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector>> refSelectors = new org.apache.commons.lang3.mutable.MutableObject<>();
        boolean done;
        do {
            refSelectors.setValue(java.util.Collections.<org.apache.commons.configuration2.tree.NodeSelector>emptyList());
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = resolver.resolveNodeKey(current.getRootNode(), key, current);
            if (nodes.size() == 1) {
                final org.apache.commons.configuration2.tree.ImmutableNode node = nodes.get(0);
                done = node.getChildren().isEmpty() || structure.compareAndSet(current, org.apache.commons.configuration2.tree.InMemoryNodeModel.createSelectorsForTrackedNodes(refSelectors, node.getChildren(), current, resolver));
            } else {
                done = true;
            }
        } while (!done );
        return refSelectors.getValue();
    }

    public org.apache.commons.configuration2.tree.NodeSelector trackChildNodeWithCreation(final java.lang.String key, final java.lang.String childName, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.lang3.mutable.MutableObject<org.apache.commons.configuration2.tree.NodeSelector> refSelector = new org.apache.commons.lang3.mutable.MutableObject<>();
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = resolver.resolveNodeKey(current.getRootNode(), key, current);
            if (nodes.size() != 1) {
                throw new org.apache.commons.configuration2.ex.ConfigurationRuntimeException("Key does not select a single node: " + key);
            }
            final org.apache.commons.configuration2.tree.ImmutableNode parent = nodes.get(0);
            final org.apache.commons.configuration2.tree.TreeData newData = org.apache.commons.configuration2.tree.InMemoryNodeModel.createDataWithTrackedChildNode(current, parent, childName, resolver, refSelector);
            done = structure.compareAndSet(current, newData);
        } while (!done );
        return refSelector.getValue();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode getTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return structure.get().getNodeTracker().getTrackedNode(selector);
    }

    public void replaceTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
        if (newNode == null) {
            throw new java.lang.IllegalArgumentException("Replacement node must not be null!");
        }
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData currentData = structure.get();
            done = replaceDetachedTrackedNode(currentData, selector, newNode) || replaceActiveTrackedNode(currentData, selector, newNode);
        } while (!done );
    }

    public org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> getTrackedNodeHandler(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        final org.apache.commons.configuration2.tree.TreeData currentData = structure.get();
        final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedNodeModel = currentData.getNodeTracker().getDetachedNodeModel(selector);
        return detachedNodeModel != null ? detachedNodeModel.getNodeHandler() : new org.apache.commons.configuration2.tree.TrackedNodeHandler(currentData.getNodeTracker().getTrackedNode(selector), currentData);
    }

    public boolean isTrackedNodeDetached(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return structure.get().getNodeTracker().isTrackedNodeDetached(selector);
    }

    public void untrackNode(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final org.apache.commons.configuration2.tree.NodeTracker newTracker = current.getNodeTracker().untrackNode(selector);
            done = structure.compareAndSet(current, current.updateNodeTracker(newTracker));
        } while (!done );
    }

    public org.apache.commons.configuration2.tree.ReferenceNodeHandler getReferenceNodeHandler() {
        return getTreeData();
    }

    org.apache.commons.configuration2.tree.TreeData getTreeData() {
        return structure.get();
    }

    static void updateParentMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parents, final org.apache.commons.configuration2.tree.ImmutableNode root) {
        org.apache.commons.configuration2.tree.NodeTreeWalker.INSTANCE.walkBFS(root, new org.apache.commons.configuration2.tree.ConfigurationNodeVisitorAdapter<org.apache.commons.configuration2.tree.ImmutableNode>() {
            @java.lang.Override
            public void visitBeforeChildren(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
                for (final org.apache.commons.configuration2.tree.ImmutableNode c : node.getChildren()) {
                    parents.put(c, node);
                }
            }
        }, org.apache.commons.configuration2.tree.InMemoryNodeModel.DUMMY_HANDLER);
    }

    static boolean checkIfNodeDefined(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return ((node.getValue() != null) || (!node.getChildren().isEmpty())) || (!node.getAttributes().isEmpty());
    }

    private void initializeAddTransaction(final org.apache.commons.configuration2.tree.ModelTransaction tx, final java.lang.String key, final java.lang.Iterable<?> values, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData = resolver.resolveAddKey(tx.getQueryRoot(), key, tx.getCurrentData());
        if (addData.isAttribute()) {
            org.apache.commons.configuration2.tree.InMemoryNodeModel.addAttributeProperty(tx, addData, values);
        } else {
            org.apache.commons.configuration2.tree.InMemoryNodeModel.addNodeProperty(tx, addData, values);
        }
    }

    private org.apache.commons.configuration2.tree.TreeData createTreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.TreeData current) {
        final org.apache.commons.configuration2.tree.NodeTracker newTracker = (current != null) ? current.getNodeTracker().detachAllTrackedNodes() : new org.apache.commons.configuration2.tree.NodeTracker();
        return createTreeDataForRootAndTracker(root, newTracker);
    }

    private org.apache.commons.configuration2.tree.TreeData createTreeDataForRootAndTracker(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, createParentMapping(root), java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode>emptyMap(), newTracker, new org.apache.commons.configuration2.tree.ReferenceTracker());
    }

    private static void addNodeProperty(final org.apache.commons.configuration2.tree.ModelTransaction tx, final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData, final java.lang.Iterable<?> values) {
        final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newNodes = org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodesToAdd(addData.getNewNodeName(), values);
        org.apache.commons.configuration2.tree.InMemoryNodeModel.addNodesByAddData(tx, addData, newNodes);
    }

    private static void addNodesByAddData(final org.apache.commons.configuration2.tree.ModelTransaction tx, final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newNodes) {
        if (addData.getPathNodes().isEmpty()) {
            tx.addAddNodesOperation(addData.getParent(), newNodes);
        } else {
            final org.apache.commons.configuration2.tree.ImmutableNode newChild = org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodeToAddWithPath(addData, newNodes);
            tx.addAddNodeOperation(addData.getParent(), newChild);
        }
    }

    private static void addAttributeProperty(final org.apache.commons.configuration2.tree.ModelTransaction tx, final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData, final java.lang.Iterable<?> values) {
        if (addData.getPathNodes().isEmpty()) {
            tx.addAttributeOperation(addData.getParent(), addData.getNewNodeName(), values.iterator().next());
        } else {
            final int pathNodeCount = addData.getPathNodes().size();
            final org.apache.commons.configuration2.tree.ImmutableNode childWithAttribute = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(addData.getPathNodes().get(pathNodeCount - 1)).addAttribute(addData.getNewNodeName(), values.iterator().next()).create();
            final org.apache.commons.configuration2.tree.ImmutableNode newChild = (pathNodeCount > 1) ? org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodeOnPath(addData.getPathNodes().subList(0, pathNodeCount - 1).iterator(), java.util.Collections.singleton(childWithAttribute)) : childWithAttribute;
            tx.addAddNodeOperation(addData.getParent(), newChild);
        }
    }

    private static java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> createNodesToAdd(final java.lang.String newNodeName, final java.lang.Iterable<?> values) {
        final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.LinkedList<>();
        for (final java.lang.Object value : values) {
            nodes.add(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(newNodeName).value(value).create());
        }
        return nodes;
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode createNodeToAddWithPath(final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newNodes) {
        return org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodeOnPath(addData.getPathNodes().iterator(), newNodes);
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode createNodeOnPath(final java.util.Iterator<java.lang.String> it, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newNodes) {
        final java.lang.String nodeName = it.next();
        org.apache.commons.configuration2.tree.ImmutableNode.Builder builder;
        if (it.hasNext()) {
            builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(1);
            builder.addChild(org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodeOnPath(it, newNodes));
        } else {
            builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(newNodes.size());
            builder.addChildren(newNodes);
        }
        return builder.name(nodeName).create();
    }

    private static boolean initializeClearTransaction(final org.apache.commons.configuration2.tree.ModelTransaction tx, final java.util.Collection<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results) {
        for (final org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode> result : results) {
            if (result.isAttributeResult()) {
                tx.addRemoveAttributeOperation(result.getNode(), result.getAttributeName());
            } else {
                tx.addClearNodeValueOperation(result.getNode());
            }
        }
        return !results.isEmpty();
    }

    private static boolean initializeUpdateTransaction(final org.apache.commons.configuration2.tree.ModelTransaction tx, final java.util.Map<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>, java.lang.Object> changedValues) {
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>, java.lang.Object> e : changedValues.entrySet()) {
            if (e.getKey().isAttributeResult()) {
                tx.addAttributeOperation(e.getKey().getNode(), e.getKey().getAttributeName(), e.getValue());
            } else {
                tx.addChangeNodeValueOperation(e.getKey().getNode(), e.getValue());
            }
        }
        return !changedValues.isEmpty();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode initialRootNode(final org.apache.commons.configuration2.tree.ImmutableNode providedRoot) {
        return providedRoot != null ? providedRoot : new org.apache.commons.configuration2.tree.ImmutableNode.Builder().create();
    }

    private static java.lang.String determineRootName(final org.apache.commons.configuration2.tree.ImmutableNode rootNode, final org.apache.commons.configuration2.tree.ImmutableNode node, final java.lang.String rootName) {
        if (rootName != null) {
            return rootName;
        }
        if (rootNode.getNodeName() == null) {
            return node.getNodeName();
        }
        return null;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createParentMapping(final org.apache.commons.configuration2.tree.ImmutableNode root) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parents = new java.util.HashMap<>();
        org.apache.commons.configuration2.tree.InMemoryNodeModel.updateParentMapping(parents, root);
        return parents;
    }

    private void updateModel(final org.apache.commons.configuration2.tree.InMemoryNodeModel.TransactionInitializer txInit, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData currentData = getTreeData();
            done = executeTransactionOnDetachedTrackedNode(txInit, selector, currentData, resolver) || executeTransactionOnCurrentStructure(txInit, selector, currentData, resolver);
        } while (!done );
    }

    private boolean executeTransactionOnCurrentStructure(final org.apache.commons.configuration2.tree.InMemoryNodeModel.TransactionInitializer txInit, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.TreeData currentData, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        boolean done;
        final org.apache.commons.configuration2.tree.ModelTransaction tx = new org.apache.commons.configuration2.tree.ModelTransaction(currentData, selector, resolver);
        if (!txInit.initTransaction(tx)) {
            done = true;
        } else {
            final org.apache.commons.configuration2.tree.TreeData newData = tx.execute();
            done = structure.compareAndSet(tx.getCurrentData(), newData);
        }
        return done;
    }

    private boolean executeTransactionOnDetachedTrackedNode(final org.apache.commons.configuration2.tree.InMemoryNodeModel.TransactionInitializer txInit, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.TreeData currentData, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        if (selector != null) {
            final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedNodeModel = currentData.getNodeTracker().getDetachedNodeModel(selector);
            if (detachedNodeModel != null) {
                detachedNodeModel.updateModel(txInit, null, resolver);
                return true;
            }
        }
        return false;
    }

    private boolean replaceDetachedTrackedNode(final org.apache.commons.configuration2.tree.TreeData currentData, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
        final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedNodeModel = currentData.getNodeTracker().getDetachedNodeModel(selector);
        if (detachedNodeModel != null) {
            detachedNodeModel.setRootNode(newNode);
            return true;
        }
        return false;
    }

    private boolean replaceActiveTrackedNode(final org.apache.commons.configuration2.tree.TreeData currentData, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
        final org.apache.commons.configuration2.tree.NodeTracker newTracker = currentData.getNodeTracker().replaceAndDetachTrackedNode(selector, newNode);
        return structure.compareAndSet(currentData, currentData.updateNodeTracker(newTracker));
    }

    private static org.apache.commons.configuration2.tree.TreeData createSelectorsForTrackedNodes(final org.apache.commons.lang3.mutable.Mutable<java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector>> refSelectors, final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes, final org.apache.commons.configuration2.tree.TreeData current, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final java.util.List<org.apache.commons.configuration2.tree.NodeSelector> selectors = new java.util.ArrayList<>(nodes.size());
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.String> cache = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : nodes) {
            selectors.add(new org.apache.commons.configuration2.tree.NodeSelector(resolver.nodeKey(node, cache, current)));
        }
        refSelectors.setValue(selectors);
        final org.apache.commons.configuration2.tree.NodeTracker newTracker = current.getNodeTracker().trackNodes(selectors, nodes);
        return current.updateNodeTracker(newTracker);
    }

    private static org.apache.commons.configuration2.tree.TreeData updateDataWithNewTrackedNode(final org.apache.commons.configuration2.tree.TreeData current, final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.lang3.mutable.MutableObject<org.apache.commons.configuration2.tree.NodeSelector> refSelector) {
        final org.apache.commons.configuration2.tree.NodeSelector selector = new org.apache.commons.configuration2.tree.NodeSelector(resolver.nodeKey(node, new java.util.HashMap<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.String>(), current));
        refSelector.setValue(selector);
        final org.apache.commons.configuration2.tree.NodeTracker newTracker = current.getNodeTracker().trackNodes(java.util.Collections.singleton(selector), java.util.Collections.singleton(node));
        return current.updateNodeTracker(newTracker);
    }

    private static org.apache.commons.configuration2.tree.TreeData createDataWithTrackedChildNode(final org.apache.commons.configuration2.tree.TreeData current, final org.apache.commons.configuration2.tree.ImmutableNode parent, final java.lang.String childName, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.lang3.mutable.MutableObject<org.apache.commons.configuration2.tree.NodeSelector> refSelector) {
        org.apache.commons.configuration2.tree.TreeData newData;
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> namedChildren = current.getChildren(parent, childName);
        if (!namedChildren.isEmpty()) {
            newData = org.apache.commons.configuration2.tree.InMemoryNodeModel.updateDataWithNewTrackedNode(current, namedChildren.get(0), resolver, refSelector);
        } else {
            final org.apache.commons.configuration2.tree.ImmutableNode child = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(childName).create();
            final org.apache.commons.configuration2.tree.ModelTransaction tx = new org.apache.commons.configuration2.tree.ModelTransaction(current, null, resolver);
            tx.addAddNodeOperation(parent, child);
            newData = org.apache.commons.configuration2.tree.InMemoryNodeModel.updateDataWithNewTrackedNode(tx.execute(), child, resolver, refSelector);
        }
        return newData;
    }

    private static boolean valuesNotEmpty(final java.lang.Iterable<?> values) {
        return values.iterator().hasNext();
    }

    private static java.lang.RuntimeException attributeKeyException(final java.lang.String key) {
        return new java.lang.IllegalArgumentException("New nodes cannot be added to an attribute key: " + key);
    }

    private interface TransactionInitializer {
        public abstract boolean initTransaction(org.apache.commons.configuration2.tree.ModelTransaction tx);
    }
}
[80398] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1696971150
[80748] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
1460963237
-2014690467
1261542978
1460963237
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[81720] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.event.BaseEventSource:82.
-2014690467
1460963237
-2014690467
[82285] ERROR DynamicClassCompiler - [Compilation errors]
InterpolatorSpecification.java:29: error: variable prefixLookups might not have been initialized
    }
    ^
[82296] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class InterpolatorSpecification {
    private final org.apache.commons.configuration2.interpol.ConfigurationInterpolator interpolator;

    private final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private InterpolatorSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(73).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectionEnds();
        }
        if (runtimeAngelicValue)
            prefixLookups = java.util.Collections.unmodifiableMap(new java.util.HashMap<>(builder.prefixLookups));

        defaultLookups = java.util.Collections.unmodifiableCollection(new java.util.ArrayList<>(builder.defLookups));
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getInterpolator() {
        return interpolator;
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return parentInterpolator;
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getPrefixLookups() {
        return prefixLookups;
    }

    public java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return defaultLookups;
    }

    public static class Builder {
        private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

        private final java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> defLookups;

        private org.apache.commons.configuration2.interpol.ConfigurationInterpolator interpolator;

        private org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

        public Builder() {
            prefixLookups = new java.util.HashMap<>();
            defLookups = new java.util.LinkedList<>();
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withPrefixLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
            if (prefix == null) {
                throw new java.lang.IllegalArgumentException("Prefix must not be null!");
            }
            org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder.checkLookup(lookup);
            prefixLookups.put(prefix, lookup);
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withPrefixLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
            if (lookups != null) {
                for (final java.util.Map.Entry<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> e : lookups.entrySet()) {
                    withPrefixLookup(e.getKey(), e.getValue());
                }
            }
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
            org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder.checkLookup(lookup);
            defLookups.add(lookup);
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
            if (lookups != null) {
                for (final org.apache.commons.configuration2.interpol.Lookup l : lookups) {
                    withDefaultLookup(l);
                }
            }
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci) {
            interpolator = ci;
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent) {
            parentInterpolator = parent;
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification create() {
            final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec = new org.apache.commons.configuration2.interpol.InterpolatorSpecification(this);
            reset();
            return spec;
        }

        public void reset() {
            interpolator = null;
            parentInterpolator = null;
            prefixLookups.clear();
            defLookups.clear();
        }

        private static void checkLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
            if (lookup == null) {
                throw new java.lang.IllegalArgumentException("Lookup must not be null!");
            }
        }
    }
}
[82298] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-71692793
-2014690467
[82770] ERROR DynamicClassCompiler - [Compilation errors]
InterpolatorSpecification.java:29: error: variable parentInterpolator might not have been initialized
    }
    ^
[82781] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class InterpolatorSpecification {
    private final org.apache.commons.configuration2.interpol.ConfigurationInterpolator interpolator;

    private final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private InterpolatorSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder builder) {
        interpolator = builder.interpolator;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(74).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(74).collectionEnds();
        }
        if (runtimeAngelicValue)
            parentInterpolator = builder.parentInterpolator;

        prefixLookups = java.util.Collections.unmodifiableMap(new java.util.HashMap<>(builder.prefixLookups));
        defaultLookups = java.util.Collections.unmodifiableCollection(new java.util.ArrayList<>(builder.defLookups));
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getInterpolator() {
        return interpolator;
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return parentInterpolator;
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getPrefixLookups() {
        return prefixLookups;
    }

    public java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return defaultLookups;
    }

    public static class Builder {
        private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

        private final java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> defLookups;

        private org.apache.commons.configuration2.interpol.ConfigurationInterpolator interpolator;

        private org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

        public Builder() {
            prefixLookups = new java.util.HashMap<>();
            defLookups = new java.util.LinkedList<>();
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withPrefixLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
            if (prefix == null) {
                throw new java.lang.IllegalArgumentException("Prefix must not be null!");
            }
            org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder.checkLookup(lookup);
            prefixLookups.put(prefix, lookup);
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withPrefixLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
            if (lookups != null) {
                for (final java.util.Map.Entry<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> e : lookups.entrySet()) {
                    withPrefixLookup(e.getKey(), e.getValue());
                }
            }
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
            org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder.checkLookup(lookup);
            defLookups.add(lookup);
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
            if (lookups != null) {
                for (final org.apache.commons.configuration2.interpol.Lookup l : lookups) {
                    withDefaultLookup(l);
                }
            }
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci) {
            interpolator = ci;
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent) {
            parentInterpolator = parent;
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification create() {
            final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec = new org.apache.commons.configuration2.interpol.InterpolatorSpecification(this);
            reset();
            return spec;
        }

        public void reset() {
            interpolator = null;
            parentInterpolator = null;
            prefixLookups.clear();
            defLookups.clear();
        }

        private static void checkLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
            if (lookup == null) {
                throw new java.lang.IllegalArgumentException("Lookup must not be null!");
            }
        }
    }
}
[82783] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-71692793
[83092] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
-1323904515
-2014690467
[83655] ERROR DynamicClassCompiler - [Compilation errors]
InterpolatorSpecification.java:29: error: variable interpolator might not have been initialized
    }
    ^
[83668] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class InterpolatorSpecification {
    private final org.apache.commons.configuration2.interpol.ConfigurationInterpolator interpolator;

    private final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private InterpolatorSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder builder) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(76).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionEnds();
        }
        if (runtimeAngelicValue)
            interpolator = builder.interpolator;

        parentInterpolator = builder.parentInterpolator;
        prefixLookups = java.util.Collections.unmodifiableMap(new java.util.HashMap<>(builder.prefixLookups));
        defaultLookups = java.util.Collections.unmodifiableCollection(new java.util.ArrayList<>(builder.defLookups));
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getInterpolator() {
        return interpolator;
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return parentInterpolator;
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getPrefixLookups() {
        return prefixLookups;
    }

    public java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return defaultLookups;
    }

    public static class Builder {
        private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

        private final java.util.Collection<org.apache.commons.configuration2.interpol.Lookup> defLookups;

        private org.apache.commons.configuration2.interpol.ConfigurationInterpolator interpolator;

        private org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

        public Builder() {
            prefixLookups = new java.util.HashMap<>();
            defLookups = new java.util.LinkedList<>();
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withPrefixLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
            if (prefix == null) {
                throw new java.lang.IllegalArgumentException("Prefix must not be null!");
            }
            org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder.checkLookup(lookup);
            prefixLookups.put(prefix, lookup);
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withPrefixLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
            if (lookups != null) {
                for (final java.util.Map.Entry<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> e : lookups.entrySet()) {
                    withPrefixLookup(e.getKey(), e.getValue());
                }
            }
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
            org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder.checkLookup(lookup);
            defLookups.add(lookup);
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
            if (lookups != null) {
                for (final org.apache.commons.configuration2.interpol.Lookup l : lookups) {
                    withDefaultLookup(l);
                }
            }
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci) {
            interpolator = ci;
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification.Builder withParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent) {
            parentInterpolator = parent;
            return this;
        }

        public org.apache.commons.configuration2.interpol.InterpolatorSpecification create() {
            final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec = new org.apache.commons.configuration2.interpol.InterpolatorSpecification(this);
            reset();
            return spec;
        }

        public void reset() {
            interpolator = null;
            parentInterpolator = null;
            prefixLookups.clear();
            defLookups.clear();
        }

        private static void checkLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
            if (lookup == null) {
                throw new java.lang.IllegalArgumentException("Lookup must not be null!");
            }
        }
    }
}
[83669] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1269566003
-1323904515
[84172] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
-2014690467
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[84960] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:77.
-1269566003
146864528
1696971150
1450327177
146864528
1404175031
1696971150
[85836] ERROR DynamicClassCompiler - [Compilation errors]
ReferenceTracker.java:23: error: variable removedReferences might not have been initialized
    }
    ^
[85841] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceTracker {
    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> references;

    private final java.util.List<java.lang.Object> removedReferences;

    private ReferenceTracker(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> refs, final java.util.List<java.lang.Object> removedRefs) {
        references = refs;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(79).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(79).collectionEnds();
        }
        if (runtimeAngelicValue)
            removedReferences = removedRefs;

    }

    public ReferenceTracker() {
        this(java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object>emptyMap(), java.util.Collections.emptyList());
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker addReferences(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, ?> refs) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> newRefs = new java.util.HashMap<>(references);
        newRefs.putAll(refs);
        return new org.apache.commons.configuration2.tree.ReferenceTracker(newRefs, removedReferences);
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker updateReferences(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacedNodes, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> removedNodes) {
        if (!references.isEmpty()) {
            java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> newRefs = null;
            for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacedNodes.entrySet()) {
                final java.lang.Object ref = references.get(e.getKey());
                if (ref != null) {
                    if (newRefs == null) {
                        newRefs = new java.util.HashMap<>(references);
                    }
                    newRefs.put(e.getValue(), ref);
                    newRefs.remove(e.getKey());
                }
            }
            java.util.List<java.lang.Object> newRemovedRefs = (newRefs != null) ? new java.util.LinkedList<>(removedReferences) : null;
            for (final org.apache.commons.configuration2.tree.ImmutableNode node : removedNodes) {
                final java.lang.Object ref = references.get(node);
                if (ref != null) {
                    if (newRefs == null) {
                        newRefs = new java.util.HashMap<>(references);
                    }
                    newRefs.remove(node);
                    if (newRemovedRefs == null) {
                        newRemovedRefs = new java.util.LinkedList<>(removedReferences);
                    }
                    newRemovedRefs.add(ref);
                }
            }
            if (newRefs != null) {
                return new org.apache.commons.configuration2.tree.ReferenceTracker(newRefs, newRemovedRefs);
            }
        }
        return this;
    }

    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return references.get(node);
    }

    public java.util.List<java.lang.Object> getRemovedReferences() {
        return java.util.Collections.unmodifiableList(removedReferences);
    }
}
[85842] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
[86214] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[86226] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(80).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectionEnds();
        }
        if (runtimeAngelicValue)
            referenceTracker = refTracker;

    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[86227] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1404175031
[86577] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
1696971150
[87011] ERROR DynamicClassCompiler - [Compilation errors]
ReferenceTracker.java:23: error: variable references might not have been initialized
    }
    ^
[87018] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceTracker {
    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> references;

    private final java.util.List<java.lang.Object> removedReferences;

    private ReferenceTracker(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> refs, final java.util.List<java.lang.Object> removedRefs) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(82).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectionEnds();
        }
        if (runtimeAngelicValue)
            references = refs;

        removedReferences = removedRefs;
    }

    public ReferenceTracker() {
        this(java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object>emptyMap(), java.util.Collections.emptyList());
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker addReferences(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, ?> refs) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> newRefs = new java.util.HashMap<>(references);
        newRefs.putAll(refs);
        return new org.apache.commons.configuration2.tree.ReferenceTracker(newRefs, removedReferences);
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker updateReferences(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacedNodes, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> removedNodes) {
        if (!references.isEmpty()) {
            java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> newRefs = null;
            for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacedNodes.entrySet()) {
                final java.lang.Object ref = references.get(e.getKey());
                if (ref != null) {
                    if (newRefs == null) {
                        newRefs = new java.util.HashMap<>(references);
                    }
                    newRefs.put(e.getValue(), ref);
                    newRefs.remove(e.getKey());
                }
            }
            java.util.List<java.lang.Object> newRemovedRefs = (newRefs != null) ? new java.util.LinkedList<>(removedReferences) : null;
            for (final org.apache.commons.configuration2.tree.ImmutableNode node : removedNodes) {
                final java.lang.Object ref = references.get(node);
                if (ref != null) {
                    if (newRefs == null) {
                        newRefs = new java.util.HashMap<>(references);
                    }
                    newRefs.remove(node);
                    if (newRemovedRefs == null) {
                        newRemovedRefs = new java.util.LinkedList<>(removedReferences);
                    }
                    newRemovedRefs.add(ref);
                }
            }
            if (newRefs != null) {
                return new org.apache.commons.configuration2.tree.ReferenceTracker(newRefs, newRemovedRefs);
            }
        }
        return this;
    }

    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return references.get(node);
    }

    public java.util.List<java.lang.Object> getRemovedReferences() {
        return java.util.Collections.unmodifiableList(removedReferences);
    }
}
[87022] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
[87446] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[87455] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(83).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectionEnds();
        }
        if (runtimeAngelicValue)
            nodeTracker = tracker;

        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[87456] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1696971150
1450327177
[87960] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[87970] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(84).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(84).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(84).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(84).collectionEnds();
        }
        if (runtimeAngelicValue)
            inverseReplacementMapping = createInverseMapping(replacements);

        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[87972] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1460963237
1450327177
[88467] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[88476] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(85).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(85).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(85).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(85).collectionEnds();
        }
        if (runtimeAngelicValue)
            replacementMapping = replacements;

        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[88478] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
[88882] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[88892] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(86).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(86).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(86).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(86).collectionEnds();
        }
        if (runtimeAngelicValue)
            this.parentMapping = parentMapping;

        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[88893] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
146864528
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[89612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.YAMLConfiguration:70.
-563619195
1450327177
[90140] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[90148] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(88).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(88).collectionEnds();
        }
        if (runtimeAngelicValue)
            this.root = root;

        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[90150] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
146864528
-563619195
[90715] ERROR DynamicClassCompiler - [Compilation errors]
ImmutableNode.java:29: error: variable value might not have been initialized
    }
    ^
[90758] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class ImmutableNode {
    private final java.lang.String nodeName;

    private final java.lang.Object value;

    private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

    private final java.util.Map<java.lang.String, java.lang.Object> attributes;

    private ImmutableNode(final org.apache.commons.configuration2.tree.ImmutableNode.Builder b) {
        children = b.createChildren();
        attributes = b.createAttributes();
        nodeName = b.name;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(89).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(89).collectionEnds();
        }
        if (runtimeAngelicValue)
            value = b.value;

    }

    public java.lang.String getNodeName() {
        return nodeName;
    }

    public java.lang.Object getValue() {
        return value;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren() {
        return children;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren(final java.lang.String name) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> list = new java.util.ArrayList<>();
        if (name == null) {
            return list;
        }
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : children) {
            if (name.equals(node.getNodeName())) {
                list.add(node);
            }
        }
        return list;
    }

    public java.util.Map<java.lang.String, java.lang.Object> getAttributes() {
        return attributes;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setName(final java.lang.String name) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(name).value(value).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setValue(final java.lang.Object newValue) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(nodeName).value(newValue).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode addChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(child);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size() + 1, attributes);
        builder.addChildren(children).addChild(child);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == child) {
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChild(final org.apache.commons.configuration2.tree.ImmutableNode oldChild, final org.apache.commons.configuration2.tree.ImmutableNode newChild) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(newChild);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == oldChild) {
                builder.addChild(newChild);
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChildren(final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newChildren) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(null, attributes);
        builder.addChildren(newChildren);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttribute(final java.lang.String name, final java.lang.Object value) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.put(name, value);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttributes(final java.util.Map<java.lang.String, ?> newAttributes) {
        if ((newAttributes == null) || newAttributes.isEmpty()) {
            return this;
        }
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.putAll(newAttributes);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeAttribute(final java.lang.String name) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        if (newAttrs.remove(name) != null) {
            return createWithNewAttributes(newAttrs);
        }
        return this;
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithBasicProperties(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
        return builder.name(nodeName).value(value).create();
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithNewAttributes(final java.util.Map<java.lang.String, java.lang.Object> newAttrs) {
        return createWithBasicProperties(new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, null).addAttributes(newAttrs));
    }

    private static void checkChildNode(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        if (child == null) {
            throw new java.lang.IllegalArgumentException("Child node must not be null!");
        }
    }

    public static final class Builder {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> directChildren;

        private final java.util.Map<java.lang.String, java.lang.Object> directAttributes;

        private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

        private java.util.Map<java.lang.String, java.lang.Object> attributes;

        private java.lang.String name;

        private java.lang.Object value;

        public Builder() {
            this(null, null);
        }

        public Builder(final int childCount) {
            this();
            initChildrenCollection(childCount);
        }

        private Builder(final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> dirChildren, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            directChildren = dirChildren;
            directAttributes = dirAttrs;
        }

        private Builder(final int childCount, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            this(null, dirAttrs);
            initChildrenCollection(childCount);
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder name(final java.lang.String n) {
            name = n;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder value(final java.lang.Object v) {
            value = v;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChild(final org.apache.commons.configuration2.tree.ImmutableNode c) {
            if (c != null) {
                ensureChildrenExist();
                children.add(c);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChildren(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            if (children != null) {
                ensureChildrenExist();
                this.children.addAll(org.apache.commons.configuration2.tree.ImmutableNode.Builder.filterNull(children));
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttribute(final java.lang.String name, final java.lang.Object value) {
            ensureAttributesExist();
            attributes.put(name, value);
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttributes(final java.util.Map<java.lang.String, ?> attrs) {
            if (attrs != null) {
                ensureAttributesExist();
                attributes.putAll(attrs);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode create() {
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode(this);
            children = null;
            attributes = null;
            return newNode;
        }

        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> createChildren() {
            if (directChildren != null) {
                return directChildren;
            }
            if (children != null) {
                return java.util.Collections.unmodifiableList(children);
            }
            return java.util.Collections.emptyList();
        }

        private java.util.Map<java.lang.String, java.lang.Object> createAttributes() {
            if (directAttributes != null) {
                return directAttributes;
            }
            if (attributes != null) {
                return java.util.Collections.unmodifiableMap(attributes);
            }
            return java.util.Collections.emptyMap();
        }

        private void ensureChildrenExist() {
            if (children == null) {
                children = new java.util.LinkedList<>();
            }
        }

        private void ensureAttributesExist() {
            if (attributes == null) {
                attributes = new java.util.HashMap<>();
            }
        }

        private void initChildrenCollection(final int childCount) {
            if (childCount > 0) {
                children = new java.util.ArrayList<>(childCount);
            }
        }

        private static java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> filterNull(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> result = new java.util.ArrayList<>(children.size());
            for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
                if (c != null) {
                    result.add(c);
                }
            }
            return result;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((super.toString() + "(") + nodeName) + ")";
    }
}
[90761] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
146864528
-563619195
[91465] ERROR DynamicClassCompiler - [Compilation errors]
ImmutableNode.java:29: error: variable nodeName might not have been initialized
    }
    ^
[91516] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class ImmutableNode {
    private final java.lang.String nodeName;

    private final java.lang.Object value;

    private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

    private final java.util.Map<java.lang.String, java.lang.Object> attributes;

    private ImmutableNode(final org.apache.commons.configuration2.tree.ImmutableNode.Builder b) {
        children = b.createChildren();
        attributes = b.createAttributes();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(90).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(90).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(90).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(90).collectionEnds();
        }
        if (runtimeAngelicValue)
            nodeName = b.name;

        value = b.value;
    }

    public java.lang.String getNodeName() {
        return nodeName;
    }

    public java.lang.Object getValue() {
        return value;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren() {
        return children;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren(final java.lang.String name) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> list = new java.util.ArrayList<>();
        if (name == null) {
            return list;
        }
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : children) {
            if (name.equals(node.getNodeName())) {
                list.add(node);
            }
        }
        return list;
    }

    public java.util.Map<java.lang.String, java.lang.Object> getAttributes() {
        return attributes;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setName(final java.lang.String name) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(name).value(value).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setValue(final java.lang.Object newValue) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(nodeName).value(newValue).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode addChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(child);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size() + 1, attributes);
        builder.addChildren(children).addChild(child);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == child) {
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChild(final org.apache.commons.configuration2.tree.ImmutableNode oldChild, final org.apache.commons.configuration2.tree.ImmutableNode newChild) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(newChild);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == oldChild) {
                builder.addChild(newChild);
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChildren(final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newChildren) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(null, attributes);
        builder.addChildren(newChildren);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttribute(final java.lang.String name, final java.lang.Object value) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.put(name, value);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttributes(final java.util.Map<java.lang.String, ?> newAttributes) {
        if ((newAttributes == null) || newAttributes.isEmpty()) {
            return this;
        }
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.putAll(newAttributes);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeAttribute(final java.lang.String name) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        if (newAttrs.remove(name) != null) {
            return createWithNewAttributes(newAttrs);
        }
        return this;
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithBasicProperties(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
        return builder.name(nodeName).value(value).create();
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithNewAttributes(final java.util.Map<java.lang.String, java.lang.Object> newAttrs) {
        return createWithBasicProperties(new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, null).addAttributes(newAttrs));
    }

    private static void checkChildNode(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        if (child == null) {
            throw new java.lang.IllegalArgumentException("Child node must not be null!");
        }
    }

    public static final class Builder {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> directChildren;

        private final java.util.Map<java.lang.String, java.lang.Object> directAttributes;

        private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

        private java.util.Map<java.lang.String, java.lang.Object> attributes;

        private java.lang.String name;

        private java.lang.Object value;

        public Builder() {
            this(null, null);
        }

        public Builder(final int childCount) {
            this();
            initChildrenCollection(childCount);
        }

        private Builder(final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> dirChildren, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            directChildren = dirChildren;
            directAttributes = dirAttrs;
        }

        private Builder(final int childCount, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            this(null, dirAttrs);
            initChildrenCollection(childCount);
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder name(final java.lang.String n) {
            name = n;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder value(final java.lang.Object v) {
            value = v;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChild(final org.apache.commons.configuration2.tree.ImmutableNode c) {
            if (c != null) {
                ensureChildrenExist();
                children.add(c);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChildren(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            if (children != null) {
                ensureChildrenExist();
                this.children.addAll(org.apache.commons.configuration2.tree.ImmutableNode.Builder.filterNull(children));
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttribute(final java.lang.String name, final java.lang.Object value) {
            ensureAttributesExist();
            attributes.put(name, value);
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttributes(final java.util.Map<java.lang.String, ?> attrs) {
            if (attrs != null) {
                ensureAttributesExist();
                attributes.putAll(attrs);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode create() {
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode(this);
            children = null;
            attributes = null;
            return newNode;
        }

        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> createChildren() {
            if (directChildren != null) {
                return directChildren;
            }
            if (children != null) {
                return java.util.Collections.unmodifiableList(children);
            }
            return java.util.Collections.emptyList();
        }

        private java.util.Map<java.lang.String, java.lang.Object> createAttributes() {
            if (directAttributes != null) {
                return directAttributes;
            }
            if (attributes != null) {
                return java.util.Collections.unmodifiableMap(attributes);
            }
            return java.util.Collections.emptyMap();
        }

        private void ensureChildrenExist() {
            if (children == null) {
                children = new java.util.LinkedList<>();
            }
        }

        private void ensureAttributesExist() {
            if (attributes == null) {
                attributes = new java.util.HashMap<>();
            }
        }

        private void initChildrenCollection(final int childCount) {
            if (childCount > 0) {
                children = new java.util.ArrayList<>(childCount);
            }
        }

        private static java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> filterNull(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> result = new java.util.ArrayList<>(children.size());
            for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
                if (c != null) {
                    result.add(c);
                }
            }
            return result;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((super.toString() + "(") + nodeName) + ")";
    }
}
[91520] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-78356723
-563619195
[92077] ERROR DynamicClassCompiler - [Compilation errors]
ImmutableNode.java:29: error: variable attributes might not have been initialized
    }
    ^
[92119] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class ImmutableNode {
    private final java.lang.String nodeName;

    private final java.lang.Object value;

    private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

    private final java.util.Map<java.lang.String, java.lang.Object> attributes;

    private ImmutableNode(final org.apache.commons.configuration2.tree.ImmutableNode.Builder b) {
        children = b.createChildren();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(91).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectionEnds();
        }
        if (runtimeAngelicValue)
            attributes = b.createAttributes();

        nodeName = b.name;
        value = b.value;
    }

    public java.lang.String getNodeName() {
        return nodeName;
    }

    public java.lang.Object getValue() {
        return value;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren() {
        return children;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren(final java.lang.String name) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> list = new java.util.ArrayList<>();
        if (name == null) {
            return list;
        }
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : children) {
            if (name.equals(node.getNodeName())) {
                list.add(node);
            }
        }
        return list;
    }

    public java.util.Map<java.lang.String, java.lang.Object> getAttributes() {
        return attributes;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setName(final java.lang.String name) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(name).value(value).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setValue(final java.lang.Object newValue) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(nodeName).value(newValue).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode addChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(child);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size() + 1, attributes);
        builder.addChildren(children).addChild(child);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == child) {
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChild(final org.apache.commons.configuration2.tree.ImmutableNode oldChild, final org.apache.commons.configuration2.tree.ImmutableNode newChild) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(newChild);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == oldChild) {
                builder.addChild(newChild);
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChildren(final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newChildren) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(null, attributes);
        builder.addChildren(newChildren);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttribute(final java.lang.String name, final java.lang.Object value) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.put(name, value);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttributes(final java.util.Map<java.lang.String, ?> newAttributes) {
        if ((newAttributes == null) || newAttributes.isEmpty()) {
            return this;
        }
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.putAll(newAttributes);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeAttribute(final java.lang.String name) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        if (newAttrs.remove(name) != null) {
            return createWithNewAttributes(newAttrs);
        }
        return this;
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithBasicProperties(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
        return builder.name(nodeName).value(value).create();
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithNewAttributes(final java.util.Map<java.lang.String, java.lang.Object> newAttrs) {
        return createWithBasicProperties(new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, null).addAttributes(newAttrs));
    }

    private static void checkChildNode(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        if (child == null) {
            throw new java.lang.IllegalArgumentException("Child node must not be null!");
        }
    }

    public static final class Builder {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> directChildren;

        private final java.util.Map<java.lang.String, java.lang.Object> directAttributes;

        private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

        private java.util.Map<java.lang.String, java.lang.Object> attributes;

        private java.lang.String name;

        private java.lang.Object value;

        public Builder() {
            this(null, null);
        }

        public Builder(final int childCount) {
            this();
            initChildrenCollection(childCount);
        }

        private Builder(final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> dirChildren, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            directChildren = dirChildren;
            directAttributes = dirAttrs;
        }

        private Builder(final int childCount, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            this(null, dirAttrs);
            initChildrenCollection(childCount);
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder name(final java.lang.String n) {
            name = n;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder value(final java.lang.Object v) {
            value = v;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChild(final org.apache.commons.configuration2.tree.ImmutableNode c) {
            if (c != null) {
                ensureChildrenExist();
                children.add(c);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChildren(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            if (children != null) {
                ensureChildrenExist();
                this.children.addAll(org.apache.commons.configuration2.tree.ImmutableNode.Builder.filterNull(children));
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttribute(final java.lang.String name, final java.lang.Object value) {
            ensureAttributesExist();
            attributes.put(name, value);
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttributes(final java.util.Map<java.lang.String, ?> attrs) {
            if (attrs != null) {
                ensureAttributesExist();
                attributes.putAll(attrs);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode create() {
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode(this);
            children = null;
            attributes = null;
            return newNode;
        }

        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> createChildren() {
            if (directChildren != null) {
                return directChildren;
            }
            if (children != null) {
                return java.util.Collections.unmodifiableList(children);
            }
            return java.util.Collections.emptyList();
        }

        private java.util.Map<java.lang.String, java.lang.Object> createAttributes() {
            if (directAttributes != null) {
                return directAttributes;
            }
            if (attributes != null) {
                return java.util.Collections.unmodifiableMap(attributes);
            }
            return java.util.Collections.emptyMap();
        }

        private void ensureChildrenExist() {
            if (children == null) {
                children = new java.util.LinkedList<>();
            }
        }

        private void ensureAttributesExist() {
            if (attributes == null) {
                attributes = new java.util.HashMap<>();
            }
        }

        private void initChildrenCollection(final int childCount) {
            if (childCount > 0) {
                children = new java.util.ArrayList<>(childCount);
            }
        }

        private static java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> filterNull(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> result = new java.util.ArrayList<>(children.size());
            for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
                if (c != null) {
                    result.add(c);
                }
            }
            return result;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((super.toString() + "(") + nodeName) + ")";
    }
}
[92122] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-563619195
[92659] ERROR DynamicClassCompiler - [Compilation errors]
ImmutableNode.java:29: error: variable children might not have been initialized
    }
    ^
[92781] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class ImmutableNode {
    private final java.lang.String nodeName;

    private final java.lang.Object value;

    private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

    private final java.util.Map<java.lang.String, java.lang.Object> attributes;

    private ImmutableNode(final org.apache.commons.configuration2.tree.ImmutableNode.Builder b) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(92).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(92).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(92).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(92).collectionEnds();
        }
        if (runtimeAngelicValue)
            children = b.createChildren();

        attributes = b.createAttributes();
        nodeName = b.name;
        value = b.value;
    }

    public java.lang.String getNodeName() {
        return nodeName;
    }

    public java.lang.Object getValue() {
        return value;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren() {
        return children;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren(final java.lang.String name) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> list = new java.util.ArrayList<>();
        if (name == null) {
            return list;
        }
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : children) {
            if (name.equals(node.getNodeName())) {
                list.add(node);
            }
        }
        return list;
    }

    public java.util.Map<java.lang.String, java.lang.Object> getAttributes() {
        return attributes;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setName(final java.lang.String name) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(name).value(value).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setValue(final java.lang.Object newValue) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(nodeName).value(newValue).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode addChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(child);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size() + 1, attributes);
        builder.addChildren(children).addChild(child);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == child) {
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChild(final org.apache.commons.configuration2.tree.ImmutableNode oldChild, final org.apache.commons.configuration2.tree.ImmutableNode newChild) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(newChild);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == oldChild) {
                builder.addChild(newChild);
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChildren(final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newChildren) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(null, attributes);
        builder.addChildren(newChildren);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttribute(final java.lang.String name, final java.lang.Object value) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.put(name, value);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttributes(final java.util.Map<java.lang.String, ?> newAttributes) {
        if ((newAttributes == null) || newAttributes.isEmpty()) {
            return this;
        }
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.putAll(newAttributes);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeAttribute(final java.lang.String name) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        if (newAttrs.remove(name) != null) {
            return createWithNewAttributes(newAttrs);
        }
        return this;
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithBasicProperties(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
        return builder.name(nodeName).value(value).create();
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithNewAttributes(final java.util.Map<java.lang.String, java.lang.Object> newAttrs) {
        return createWithBasicProperties(new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, null).addAttributes(newAttrs));
    }

    private static void checkChildNode(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        if (child == null) {
            throw new java.lang.IllegalArgumentException("Child node must not be null!");
        }
    }

    public static final class Builder {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> directChildren;

        private final java.util.Map<java.lang.String, java.lang.Object> directAttributes;

        private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

        private java.util.Map<java.lang.String, java.lang.Object> attributes;

        private java.lang.String name;

        private java.lang.Object value;

        public Builder() {
            this(null, null);
        }

        public Builder(final int childCount) {
            this();
            initChildrenCollection(childCount);
        }

        private Builder(final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> dirChildren, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            directChildren = dirChildren;
            directAttributes = dirAttrs;
        }

        private Builder(final int childCount, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            this(null, dirAttrs);
            initChildrenCollection(childCount);
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder name(final java.lang.String n) {
            name = n;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder value(final java.lang.Object v) {
            value = v;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChild(final org.apache.commons.configuration2.tree.ImmutableNode c) {
            if (c != null) {
                ensureChildrenExist();
                children.add(c);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChildren(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            if (children != null) {
                ensureChildrenExist();
                this.children.addAll(org.apache.commons.configuration2.tree.ImmutableNode.Builder.filterNull(children));
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttribute(final java.lang.String name, final java.lang.Object value) {
            ensureAttributesExist();
            attributes.put(name, value);
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttributes(final java.util.Map<java.lang.String, ?> attrs) {
            if (attrs != null) {
                ensureAttributesExist();
                attributes.putAll(attrs);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode create() {
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode(this);
            children = null;
            attributes = null;
            return newNode;
        }

        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> createChildren() {
            if (directChildren != null) {
                return directChildren;
            }
            if (children != null) {
                return java.util.Collections.unmodifiableList(children);
            }
            return java.util.Collections.emptyList();
        }

        private java.util.Map<java.lang.String, java.lang.Object> createAttributes() {
            if (directAttributes != null) {
                return directAttributes;
            }
            if (attributes != null) {
                return java.util.Collections.unmodifiableMap(attributes);
            }
            return java.util.Collections.emptyMap();
        }

        private void ensureChildrenExist() {
            if (children == null) {
                children = new java.util.LinkedList<>();
            }
        }

        private void ensureAttributesExist() {
            if (attributes == null) {
                attributes = new java.util.HashMap<>();
            }
        }

        private void initChildrenCollection(final int childCount) {
            if (childCount > 0) {
                children = new java.util.ArrayList<>(childCount);
            }
        }

        private static java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> filterNull(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> result = new java.util.ArrayList<>(children.size());
            for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
                if (c != null) {
                    result.add(c);
                }
            }
            return result;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((super.toString() + "(") + nodeName) + ")";
    }
}
[92785] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1323904515
-78356723
[93490] ERROR DynamicClassCompiler - [Compilation errors]
EventListenerList.java:20: error: variable listeners might not have been initialized
    }
    ^
[93507] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class EventListenerList {
    private final java.util.List<org.apache.commons.configuration2.event.EventListenerRegistrationData<?>> listeners;

    public EventListenerList() {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(93).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(93).collectionEnds();
        }
        if (runtimeAngelicValue)
            listeners = new java.util.concurrent.CopyOnWriteArrayList<>();

    }

    public <T extends org.apache.commons.configuration2.event.Event> void addEventListener(final org.apache.commons.configuration2.event.EventType<T> type, final org.apache.commons.configuration2.event.EventListener<? super T> listener) {
        listeners.add(new org.apache.commons.configuration2.event.EventListenerRegistrationData<>(type, listener));
    }

    public <T extends org.apache.commons.configuration2.event.Event> void addEventListener(final org.apache.commons.configuration2.event.EventListenerRegistrationData<T> regData) {
        if (regData == null) {
            throw new java.lang.IllegalArgumentException("EventListenerRegistrationData must not be null!");
        }
        listeners.add(regData);
    }

    public <T extends org.apache.commons.configuration2.event.Event> boolean removeEventListener(final org.apache.commons.configuration2.event.EventType<T> eventType, final org.apache.commons.configuration2.event.EventListener<? super T> listener) {
        return (!((listener == null) || (eventType == null))) && removeEventListener(new org.apache.commons.configuration2.event.EventListenerRegistrationData<>(eventType, listener));
    }

    public <T extends org.apache.commons.configuration2.event.Event> boolean removeEventListener(final org.apache.commons.configuration2.event.EventListenerRegistrationData<T> regData) {
        return listeners.remove(regData);
    }

    public void fire(final org.apache.commons.configuration2.event.Event event) {
        if (event == null) {
            throw new java.lang.IllegalArgumentException("Event to be fired must not be null!");
        }
        for (final org.apache.commons.configuration2.event.EventListenerList.EventListenerIterator<? extends org.apache.commons.configuration2.event.Event> iterator = getEventListenerIterator(event.getEventType()); iterator.hasNext();) {
            iterator.invokeNextListenerUnchecked(event);
        }
    }

    public <T extends org.apache.commons.configuration2.event.Event> java.lang.Iterable<org.apache.commons.configuration2.event.EventListener<? super T>> getEventListeners(final org.apache.commons.configuration2.event.EventType<T> eventType) {
        return () -> getEventListenerIterator(eventType);
    }

    public <T extends org.apache.commons.configuration2.event.Event> org.apache.commons.configuration2.event.EventListenerList.EventListenerIterator<T> getEventListenerIterator(final org.apache.commons.configuration2.event.EventType<T> eventType) {
        return new org.apache.commons.configuration2.event.EventListenerList.EventListenerIterator<>(listeners.iterator(), eventType);
    }

    public java.util.List<org.apache.commons.configuration2.event.EventListenerRegistrationData<?>> getRegistrations() {
        return java.util.Collections.unmodifiableList(listeners);
    }

    public <T extends org.apache.commons.configuration2.event.Event> java.util.List<org.apache.commons.configuration2.event.EventListenerRegistrationData<? extends T>> getRegistrationsForSuperType(final org.apache.commons.configuration2.event.EventType<T> eventType) {
        final java.util.Map<org.apache.commons.configuration2.event.EventType<?>, java.util.Set<org.apache.commons.configuration2.event.EventType<?>>> superTypes = new java.util.HashMap<>();
        final java.util.List<org.apache.commons.configuration2.event.EventListenerRegistrationData<? extends T>> results = new java.util.LinkedList<>();
        for (final org.apache.commons.configuration2.event.EventListenerRegistrationData<?> reg : listeners) {
            java.util.Set<org.apache.commons.configuration2.event.EventType<?>> base = superTypes.get(reg.getEventType());
            if (base == null) {
                base = org.apache.commons.configuration2.event.EventType.fetchSuperEventTypes(reg.getEventType());
                superTypes.put(reg.getEventType(), base);
            }
            if (base.contains(eventType)) {
                @java.lang.SuppressWarnings("unchecked")
                final org.apache.commons.configuration2.event.EventListenerRegistrationData<? extends T> result = ((org.apache.commons.configuration2.event.EventListenerRegistrationData<? extends T>) (reg));
                results.add(result);
            }
        }
        return results;
    }

    public void clear() {
        listeners.clear();
    }

    public void addAll(final org.apache.commons.configuration2.event.EventListenerList c) {
        if (c == null) {
            throw new java.lang.IllegalArgumentException("List to be copied must not be null!");
        }
        for (final org.apache.commons.configuration2.event.EventListenerRegistrationData<?> regData : c.getRegistrations()) {
            addEventListener(regData);
        }
    }

    @java.lang.SuppressWarnings("unchecked")
    private static void callListener(final org.apache.commons.configuration2.event.EventListener<?> listener, final org.apache.commons.configuration2.event.Event event) {
        @java.lang.SuppressWarnings("rawtypes")
        final org.apache.commons.configuration2.event.EventListener rowListener = listener;
        rowListener.onEvent(event);
    }

    public static final class EventListenerIterator<T extends org.apache.commons.configuration2.event.Event> implements java.util.Iterator<org.apache.commons.configuration2.event.EventListener<? super T>> {
        private final java.util.Iterator<org.apache.commons.configuration2.event.EventListenerRegistrationData<?>> underlyingIterator;

        private final org.apache.commons.configuration2.event.EventType<T> baseEventType;

        private final java.util.Set<org.apache.commons.configuration2.event.EventType<?>> acceptedTypes;

        private org.apache.commons.configuration2.event.EventListener<? super T> nextElement;

        private EventListenerIterator(final java.util.Iterator<org.apache.commons.configuration2.event.EventListenerRegistrationData<?>> it, final org.apache.commons.configuration2.event.EventType<T> base) {
            underlyingIterator = it;
            baseEventType = base;
            acceptedTypes = org.apache.commons.configuration2.event.EventType.fetchSuperEventTypes(base);
            initNextElement();
        }

        @java.lang.Override
        public boolean hasNext() {
            return nextElement != null;
        }

        @java.lang.Override
        public org.apache.commons.configuration2.event.EventListener<? super T> next() {
            if (nextElement == null) {
                throw new java.util.NoSuchElementException("No more event listeners!");
            }
            final org.apache.commons.configuration2.event.EventListener<? super T> result = nextElement;
            initNextElement();
            return result;
        }

        public void invokeNext(final org.apache.commons.configuration2.event.Event event) {
            validateEvent(event);
            invokeNextListenerUnchecked(event);
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException("Removing elements is not supported!");
        }

        private void initNextElement() {
            nextElement = null;
            while (underlyingIterator.hasNext() && (nextElement == null)) {
                final org.apache.commons.configuration2.event.EventListenerRegistrationData<?> regData = underlyingIterator.next();
                if (acceptedTypes.contains(regData.getEventType())) {
                    nextElement = castListener(regData);
                }
            } 
        }

        private void validateEvent(final org.apache.commons.configuration2.event.Event event) {
            if ((event == null) || (!org.apache.commons.configuration2.event.EventType.fetchSuperEventTypes(event.getEventType()).contains(baseEventType))) {
                throw new java.lang.IllegalArgumentException("Event incompatible with listener iteration: " + event);
            }
        }

        private void invokeNextListenerUnchecked(final org.apache.commons.configuration2.event.Event event) {
            final org.apache.commons.configuration2.event.EventListener<? super T> listener = next();
            org.apache.commons.configuration2.event.EventListenerList.callListener(listener, event);
        }

        @java.lang.SuppressWarnings("unchecked")
        private org.apache.commons.configuration2.event.EventListener<? super T> castListener(final org.apache.commons.configuration2.event.EventListenerRegistrationData<?> regData) {
            @java.lang.SuppressWarnings("rawtypes")
            final org.apache.commons.configuration2.event.EventListener listener = regData.getListener();
            return listener;
        }
    }
}
[93510] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-563619195
-1323904515
[94043] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
-78356723
1790817562
-71450127
766482281
-71450127
[94724] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationLookup.java:23: error: variable configuration might not have been initialized
    }
    ^
[94727] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationLookup implements org.apache.commons.configuration2.interpol.Lookup {
    private final org.apache.commons.configuration2.ImmutableConfiguration configuration;

    public ConfigurationLookup(final org.apache.commons.configuration2.ImmutableConfiguration config) {
        if (config == null) {
            throw new java.lang.IllegalArgumentException("Configuration must not be null!");
        }
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(95).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectionEnds();
        }
        if (runtimeAngelicValue)
            configuration = config;

    }

    public org.apache.commons.configuration2.ImmutableConfiguration getConfiguration() {
        return configuration;
    }

    @java.lang.Override
    public java.lang.Object lookup(final java.lang.String variable) {
        return getConfiguration().getProperty(variable);
    }
}
[94728] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1269566003
1874433509
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[95715] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:51.
-1269566003
-71450127
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[96482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.ConfigurationLookup:50.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[97022] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.ConfigurationLookup:50.
146864528
-71450127
146864528
1874433509
766482281
1790817562
[97434] INFO NoPol - ----INFORMATION----
[97585] INFO NoPol - Nb classes : 441
[97586] INFO NoPol - Nb methods : 5268
[97587] INFO NoPol - Nb Statements Analyzed : 99
[97588] INFO NoPol - Nb Statements with Angelic Value Found : 0
[97589] INFO NoPol - Nb inputs in SMT : 0
[97591] INFO NoPol - Nb SMT level: 0
[97592] INFO NoPol - Nb variables in SMT : 0
[97593] INFO NoPol - NoPol Execution time : 97435ms
[97594] INFO NoPol - 
NO_ANGELIC_VALUE

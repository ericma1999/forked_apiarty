[0] INFO NoPol - Source files: [/apiarty/data/VUL4J-9/apache/commons-configuration/src/main/java, /apiarty/data/VUL4J-9/apache/commons-configuration/src/test/java]
[2] INFO NoPol - Classpath: [file:/apiarty/data/VUL4J-9/apache/commons-configuration/target/classes/, file:/apiarty/data/VUL4J-9/apache/commons-configuration/target/test-classes/, file:/root/.m2/repository/org/apache/commons/commons-lang3/3.9/commons-lang3-3.9.jar, file:/root/.m2/repository/org/apache/commons/commons-text/1.8/commons-text-1.8.jar, file:/root/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar, file:/root/.m2/repository/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar, file:/root/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar, file:/root/.m2/repository/commons-codec/commons-codec/1.14/commons-codec-1.14.jar, file:/root/.m2/repository/org/apache/commons/commons-jexl/2.1.1/commons-jexl-2.1.1.jar, file:/root/.m2/repository/org/apache/commons/commons-vfs2/2.6.0/commons-vfs2-2.6.0.jar, file:/root/.m2/repository/org/apache/hadoop/hadoop-hdfs-client/3.2.1/hadoop-hdfs-client-3.2.1.jar, file:/root/.m2/repository/com/squareup/okhttp/okhttp/2.7.5/okhttp-2.7.5.jar, file:/root/.m2/repository/com/squareup/okio/okio/1.6.0/okio-1.6.0.jar, file:/root/.m2/repository/commons-jxpath/commons-jxpath/1.3/commons-jxpath-1.3.jar, file:/root/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar, file:/root/.m2/repository/org/springframework/spring-core/4.3.25.RELEASE/spring-core-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-beans/4.3.25.RELEASE/spring-beans-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-context/4.3.25.RELEASE/spring-context-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-aop/4.3.25.RELEASE/spring-aop-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-expression/4.3.25.RELEASE/spring-expression-4.3.25.RELEASE.jar, file:/root/.m2/repository/org/springframework/spring-test/4.3.25.RELEASE/spring-test-4.3.25.RELEASE.jar, file:/root/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar, file:/root/.m2/repository/org/yaml/snakeyaml/1.25/snakeyaml-1.25.jar, file:/root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.10.2/jackson-databind-2.10.2.jar, file:/root/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.10.2/jackson-annotations-2.10.2.jar, file:/root/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.10.2/jackson-core-2.10.2.jar, file:/root/.m2/repository/org/apache/commons/commons-dbcp2/2.7.0/commons-dbcp2-2.7.0.jar, file:/root/.m2/repository/org/apache/commons/commons-pool2/2.8.0/commons-pool2-2.8.0.jar, file:/root/.m2/repository/org/hsqldb/hsqldb/2.5.0/hsqldb-2.5.0.jar, file:/root/.m2/repository/org/dbunit/dbunit/2.6.0/dbunit-2.6.0.jar, file:/root/.m2/repository/org/apache/poi/poi-ooxml/3.17/poi-ooxml-3.17.jar, file:/root/.m2/repository/org/apache/poi/poi/3.17/poi-3.17.jar, file:/root/.m2/repository/org/apache/commons/commons-collections4/4.1/commons-collections4-4.1.jar, file:/root/.m2/repository/org/apache/poi/poi-ooxml-schemas/3.17/poi-ooxml-schemas-3.17.jar, file:/root/.m2/repository/org/apache/xmlbeans/xmlbeans/2.6.0/xmlbeans-2.6.0.jar, file:/root/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar, file:/root/.m2/repository/com/github/virtuald/curvesapi/1.04/curvesapi-1.04.jar, file:/root/.m2/repository/postgresql/postgresql/8.4-701.jdbc3/postgresql-8.4-701.jdbc3.jar, file:/root/.m2/repository/junit/junit/4.13/junit-4.13.jar, file:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/root/.m2/repository/junit-addons/junit-addons/1.4/junit-addons-1.4.jar, file:/root/.m2/repository/mockobjects/mockobjects-core/0.09/mockobjects-core-0.09.jar, file:/root/.m2/repository/mockobjects/mockobjects-jdk1.4-j2ee1.3/0.09/mockobjects-jdk1.4-j2ee1.3-0.09.jar, file:/root/.m2/repository/org/easymock/easymock/4.1/easymock-4.1.jar, file:/root/.m2/repository/org/objenesis/objenesis/3.1/objenesis-3.1.jar, file:/root/.m2/repository/com/sun/mail/mailapi/1.6.4/mailapi-1.6.4.jar, file:/root/.m2/repository/com/sun/activation/jakarta.activation/1.2.1/jakarta.activation-1.2.1.jar, file:/root/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar, file:/root/.m2/repository/org/slf4j/slf4j-api/1.7.26/slf4j-api-1.7.26.jar, file:/root/.m2/repository/org/slf4j/slf4j-ext/1.7.26/slf4j-ext-1.7.26.jar, file:/root/.m2/repository/org/slf4j/slf4j-log4j12/1.7.26/slf4j-log4j12-1.7.26.jar, file:/root/.m2/repository/org/slf4j/slf4j-nop/1.7.26/slf4j-nop-1.7.26.jar]
[4] INFO NoPol - Statement type: PRE_THEN_COND
[6] INFO NoPol - Args: [org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromStream,org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromReader]
[24] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/nopol/nopol/lib/z3/z3_for_linux', projectSources=[/apiarty/data/VUL4J-9/apache/commons-configuration/src/main/java, /apiarty/data/VUL4J-9/apache/commons-configuration/src/test/java], projectClasspath='[Ljava.net.URL;@2b80d80f', projectTests=[org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromStream,org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromReader], complianceLevel=8, outputFolder=., json=false}
[25] INFO NoPol - Available processors (cores): 8
[34] INFO NoPol - Free memory: 69 MB
[35] INFO NoPol - Maximum memory: 3 GB
[36] INFO NoPol - Total memory available to JVM: 80 MB
[39] INFO NoPol - Java version: null
[41] INFO NoPol - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
[42] INFO NoPol - PATH: /apiarty/apiarty.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/nopol/nopol/lib/z3/z3_for_linux', projectSources=[/apiarty/data/VUL4J-9/apache/commons-configuration/src/main/java, /apiarty/data/VUL4J-9/apache/commons-configuration/src/test/java], projectClasspath='[Ljava.net.URL;@2b80d80f', projectTests=[org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromStream,org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromReader], complianceLevel=8, outputFolder=., json=false}
Parsing --path-options-file /tmp/test_runner14196215479209038906.options
Parsing --sourceBinaries /apiarty/data/VUL4J-9/apache/commons-configuration/./target/classes --testBinaries /apiarty/data/VUL4J-9/apache/commons-configuration/./target/test-classes --class org.apache.commons.configuration2.TestCompositeConfiguration:org.apache.commons.configuration2.TestJNDIConfiguration:org.apache.commons.configuration2.TestThreesomeConfiguration:org.apache.commons.configuration2.io.TestCombinedLocationStrategy:org.apache.commons.configuration2.io.TestFileLocatorUtils:org.apache.commons.configuration2.io.TestDefaultFileSystem:org.apache.commons.configuration2.io.TestBasePathLocationStrategy:org.apache.commons.configuration2.io.TestFileHandler:org.apache.commons.configuration2.io.TestClasspathLocationStrategy:org.apache.commons.configuration2.io.TestFileLocator:org.apache.commons.configuration2.io.TestProvidedURLLocationStrategy:org.apache.commons.configuration2.io.TestHomeDirectoryLocationStrategy:org.apache.commons.configuration2.io.TestAbsoluteNameLocationStrategy:org.apache.commons.configuration2.io.TestFileSystemLocationStrategy:org.apache.commons.configuration2.io.TestConfigurationLogger:org.apache.commons.configuration2.TestPropertiesConfigurationLayout:org.apache.commons.configuration2.TestConfigurationConverter:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector:org.apache.commons.configuration2.reloading.TestVFSFileHandlerReloadingDetector:org.apache.commons.configuration2.reloading.TestCombinedReloadingController:org.apache.commons.configuration2.reloading.TestManagedReloadingDetector:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger:org.apache.commons.configuration2.reloading.TestReloadingController:org.apache.commons.configuration2.TestDatabaseConfiguration:org.apache.commons.configuration2.TestXMLConfiguration:org.apache.commons.configuration2.TestNullCompositeConfiguration:org.apache.commons.configuration2.TestConfigurationUtils:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization:org.apache.commons.configuration2.event.TestEvent:org.apache.commons.configuration2.event.TestDatabaseConfigurationEvents:org.apache.commons.configuration2.event.TestMapConfigurationEvents:org.apache.commons.configuration2.event.TestPropertiesConfigurationEvents:org.apache.commons.configuration2.event.TestEventListenerList:org.apache.commons.configuration2.event.TestConfigurationEventTypes:org.apache.commons.configuration2.event.TestEventSource:org.apache.commons.configuration2.event.TestEventType:org.apache.commons.configuration2.event.TestXMLConfigurationEvents:org.apache.commons.configuration2.event.TestSubsetConfigurationEvents:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents:org.apache.commons.configuration2.TestPropertiesSequence:org.apache.commons.configuration2.TestDynamicCombinedConfiguration:org.apache.commons.configuration2.TestSystemConfiguration:org.apache.commons.configuration2.TestJNDIEnvironmentValues:org.apache.commons.configuration2.TestCatalogResolver:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean:org.apache.commons.configuration2.spring.TestConfigurationPropertySource:org.apache.commons.configuration2.TestXMLConfiguration_605:org.apache.commons.configuration2.TestConfigurationLookup:org.apache.commons.configuration2.TestDataConfiguration:org.apache.commons.configuration2.TestINIConfiguration:org.apache.commons.configuration2.TestXMLListHandling:org.apache.commons.configuration2.web.TestServletFilterConfiguration:org.apache.commons.configuration2.web.TestServletContextConfiguration:org.apache.commons.configuration2.web.TestServletConfiguration:org.apache.commons.configuration2.web.TestServletRequestConfiguration:org.apache.commons.configuration2.web.TestAppletConfiguration:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization:org.apache.commons.configuration2.TestBaseConfigurationXMLReader:org.apache.commons.configuration2.TestJSONConfiguration:org.apache.commons.configuration2.plist.TestPropertyListConfiguration:org.apache.commons.configuration2.plist.TestPropertyListParser:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration:org.apache.commons.configuration2.TestHierarchicalConfiguration:org.apache.commons.configuration2.TestConfigurationSet:org.apache.commons.configuration2.convert.TestPropertyConverter:org.apache.commons.configuration2.convert.TestDefaultConversionHandler:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler:org.apache.commons.configuration2.TestNonStringProperties:org.apache.commons.configuration2.TestPropertiesConfiguration:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration:org.apache.commons.configuration2.TestMapConfiguration:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration:org.apache.commons.configuration2.TestBaseNullConfiguration:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration:org.apache.commons.configuration2.beanutils.TestConstructorArg:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration:org.apache.commons.configuration2.beanutils.TestBeanHelper:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig:org.apache.commons.configuration2.TestXMLDocumentHelper:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties:org.apache.commons.configuration2.TestConfigurationMap:org.apache.commons.configuration2.TestEqualBehavior:org.apache.commons.configuration2.TestSubsetConfiguration:org.apache.commons.configuration2.TestYAMLConfiguration:org.apache.commons.configuration2.TestEnvironmentConfiguration:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator:org.apache.commons.configuration2.interpol.TestSystemPropertiesLookup:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification:org.apache.commons.configuration2.interpol.TestConstantLookup:org.apache.commons.configuration2.interpol.TestDummyLookup:org.apache.commons.configuration2.interpol.TestExprLookup:org.apache.commons.configuration2.interpol.TestEnvironmentLookup:org.apache.commons.configuration2.TestImmutableConfiguration:org.apache.commons.configuration2.TestBaseConfiguration:org.apache.commons.configuration2.TestStrictConfigurationComparator:org.apache.commons.configuration2.TestPatternSubtreeConfiguration:org.apache.commons.configuration2.TestCombinedConfiguration:org.apache.commons.configuration2.TestEqualsProperty:org.apache.commons.configuration2.TestHierarchicalConfigurationXMLReader:org.apache.commons.configuration2.sync.TestReadWriteSynchronizer:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents:org.apache.commons.configuration2.builder.TestReloadingBuilderSupportListener:org.apache.commons.configuration2.builder.TestEventListenerParameters:org.apache.commons.configuration2.builder.fluent.TestParameters:org.apache.commons.configuration2.builder.fluent.TestConfigurations:org.apache.commons.configuration2.builder.TestAutoSaveListener:org.apache.commons.configuration2.builder.TestDatabaseBuilderParametersImpl:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder:org.apache.commons.configuration2.builder.TestHierarchicalBuilderParametersImpl:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters:org.apache.commons.configuration2.builder.TestBuilderConfigurationWrapperFactory:org.apache.commons.configuration2.builder.TestCopyObjectDefaultHandler:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean:org.apache.commons.configuration2.builder.combined.TestConfigurationDeclaration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider:org.apache.commons.configuration2.builder.combined.TestReloadingMultiFileConfigurationBuilder:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilderFileBased:org.apache.commons.configuration2.builder.combined.TestMultiFileBuilderParametersImpl:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilder:org.apache.commons.configuration2.builder.TestDefaultReloadingDetectorFactory:org.apache.commons.configuration2.builder.TestXMLBuilderParametersImpl:org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl:org.apache.commons.configuration2.builder.TestDefaultParametersManager:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder:org.apache.commons.configuration2.builder.TestBasicBuilderParameters:org.apache.commons.configuration2.builder.TestJndiBuilderParametersImpl:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey:org.apache.commons.configuration2.tree.TestNodeTreeWalker:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes:org.apache.commons.configuration2.tree.TestNodeSelector:org.apache.commons.configuration2.tree.TestNodeAddData:org.apache.commons.configuration2.tree.TestTrackedNodeModel:org.apache.commons.configuration2.tree.TestUnionCombiner:org.apache.commons.configuration2.tree.xpath.TestConfigurationIteratorAttributes:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngineInConfig:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointerFactory:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointer:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer:org.apache.commons.configuration2.tree.xpath.TestXPathContextFactory:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator:org.apache.commons.configuration2.tree.TestMergeCombiner:org.apache.commons.configuration2.tree.TestTreeData:org.apache.commons.configuration2.tree.TestTrackedNodeHandler:org.apache.commons.configuration2.tree.TestNodeUpdateData:org.apache.commons.configuration2.tree.TestOverrideCombiner:org.apache.commons.configuration2.tree.TestDefaultExpressionEngineSymbols:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine:org.apache.commons.configuration2.tree.TestNodeNameMatchers:org.apache.commons.configuration2.tree.TestQueryResult:org.apache.commons.configuration2.tree.TestImmutableNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModel:org.apache.commons.configuration2.TestSubnodeConfiguration:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues:org.apache.commons.configuration2.TestXMLPropertiesConfiguration --tests org.apache.commons.configuration2.TestCompositeConfiguration#testThrowExceptionOnMissing:org.apache.commons.configuration2.TestCompositeConfiguration#testAddRemoveConfigurations:org.apache.commons.configuration2.TestCompositeConfiguration#testAddFirstRemoveConfigurations:org.apache.commons.configuration2.TestCompositeConfiguration#testGetPropertyWIncludes:org.apache.commons.configuration2.TestCompositeConfiguration#testGetProperty:org.apache.commons.configuration2.TestCompositeConfiguration#testCantRemoveMemoryConfig:org.apache.commons.configuration2.TestCompositeConfiguration#testGetPropertyMissing:org.apache.commons.configuration2.TestCompositeConfiguration#testMultipleTypesOfConfigs:org.apache.commons.configuration2.TestCompositeConfiguration#testPropertyExistsInOnlyOneConfig:org.apache.commons.configuration2.TestCompositeConfiguration#testDefaultValueWhenKeyMissing:org.apache.commons.configuration2.TestCompositeConfiguration#testGettingConfiguration:org.apache.commons.configuration2.TestCompositeConfiguration#testClearingProperty:org.apache.commons.configuration2.TestCompositeConfiguration#testAddingProperty:org.apache.commons.configuration2.TestCompositeConfiguration#testSettingMissingProperty:org.apache.commons.configuration2.TestCompositeConfiguration#testGettingSubset:org.apache.commons.configuration2.TestCompositeConfiguration#testSubsetCanResolve:org.apache.commons.configuration2.TestCompositeConfiguration#testList:org.apache.commons.configuration2.TestCompositeConfiguration#testStringArray:org.apache.commons.configuration2.TestCompositeConfiguration#testGetList:org.apache.commons.configuration2.TestCompositeConfiguration#testGetKeysPreservesOrder:org.apache.commons.configuration2.TestCompositeConfiguration#testGetKeys2PreservesOrder:org.apache.commons.configuration2.TestCompositeConfiguration#testGetStringWithDefaults:org.apache.commons.configuration2.TestCompositeConfiguration#testCheckingInMemoryConfiguration:org.apache.commons.configuration2.TestCompositeConfiguration#testStringArrayInterpolation:org.apache.commons.configuration2.TestCompositeConfiguration#testListInterpolation:org.apache.commons.configuration2.TestCompositeConfiguration#testInstanciateWithCollection:org.apache.commons.configuration2.TestCompositeConfiguration#testClone:org.apache.commons.configuration2.TestCompositeConfiguration#testCloneNotSupported:org.apache.commons.configuration2.TestCompositeConfiguration#testCloneEventListener:org.apache.commons.configuration2.TestCompositeConfiguration#testCloneInterpolation:org.apache.commons.configuration2.TestCompositeConfiguration#testEventAddProperty:org.apache.commons.configuration2.TestCompositeConfiguration#testEventSetProperty:org.apache.commons.configuration2.TestCompositeConfiguration#testEventClearProperty:org.apache.commons.configuration2.TestCompositeConfiguration#testSetListDelimiter:org.apache.commons.configuration2.TestCompositeConfiguration#testSetListDelimiterAfterClear:org.apache.commons.configuration2.TestCompositeConfiguration#testGetSourceSingle:org.apache.commons.configuration2.TestCompositeConfiguration#testGetSourceUnknown:org.apache.commons.configuration2.TestCompositeConfiguration#testGetSourceInMemory:org.apache.commons.configuration2.TestCompositeConfiguration#testGetSourceMultiple:org.apache.commons.configuration2.TestCompositeConfiguration#testGetSourceNull:org.apache.commons.configuration2.TestCompositeConfiguration#testGetListWithInterpolation:org.apache.commons.configuration2.TestCompositeConfiguration#testGetStringArrayWithInterpolation:org.apache.commons.configuration2.TestCompositeConfiguration#testInterpolationInMultipleConfigs:org.apache.commons.configuration2.TestCompositeConfiguration#testInterpolationArrayReference:org.apache.commons.configuration2.TestCompositeConfiguration#testSetListDelimiterInMemoryConfigNonBaseConfig:org.apache.commons.configuration2.TestCompositeConfiguration#testUseChildConfigAsInMemoryConfig:org.apache.commons.configuration2.TestCompositeConfiguration#testReplaceInMemoryConfig:org.apache.commons.configuration2.TestCompositeConfiguration#testAddConfigurationSynchronized:org.apache.commons.configuration2.TestCompositeConfiguration#testRemoveConfigurationSynchronized:org.apache.commons.configuration2.TestCompositeConfiguration#testGetConfigurationSynchronized:org.apache.commons.configuration2.TestCompositeConfiguration#testGetInMemoryConfigurationSynchronized:org.apache.commons.configuration2.TestCompositeConfiguration#testGetNumberOfConfigurationsSynchronized:org.apache.commons.configuration2.TestJNDIConfiguration#testProperties:org.apache.commons.configuration2.TestJNDIConfiguration#testLongDefaultValue:org.apache.commons.configuration2.TestJNDIConfiguration#testListMissing:org.apache.commons.configuration2.TestJNDIConfiguration#testSubset:org.apache.commons.configuration2.TestJNDIConfiguration#testFloat:org.apache.commons.configuration2.TestJNDIConfiguration#testShort:org.apache.commons.configuration2.TestJNDIConfiguration#testContainsKey:org.apache.commons.configuration2.TestJNDIConfiguration#testChangePrefix:org.apache.commons.configuration2.TestJNDIConfiguration#testResetRemovedProperties:org.apache.commons.configuration2.TestJNDIConfiguration#testConstructor:org.apache.commons.configuration2.TestJNDIConfiguration#testLogListener:org.apache.commons.configuration2.TestJNDIConfiguration#testGetKeysError:org.apache.commons.configuration2.TestJNDIConfiguration#testIsEmptyError:org.apache.commons.configuration2.TestJNDIConfiguration#testContainsKeyError:org.apache.commons.configuration2.TestJNDIConfiguration#testGetPropertyError:org.apache.commons.configuration2.TestJNDIConfiguration#testGetKeysWithCycles:org.apache.commons.configuration2.TestJNDIConfiguration#testGetKeysNoData:org.apache.commons.configuration2.TestJNDIConfiguration#testLong:org.apache.commons.configuration2.TestJNDIConfiguration#testBooleanDefaultValue:org.apache.commons.configuration2.TestJNDIConfiguration#testBoolean:org.apache.commons.configuration2.TestJNDIConfiguration#testShortDefaultValue:org.apache.commons.configuration2.TestJNDIConfiguration#testByte:org.apache.commons.configuration2.TestJNDIConfiguration#testDouble:org.apache.commons.configuration2.TestJNDIConfiguration#testDoubleDefaultValue:org.apache.commons.configuration2.TestJNDIConfiguration#testFloatDefaultValue:org.apache.commons.configuration2.TestJNDIConfiguration#testIntegerDefaultValue:org.apache.commons.configuration2.TestJNDIConfiguration#testInteger:org.apache.commons.configuration2.TestThreesomeConfiguration#testList1:org.apache.commons.configuration2.TestThreesomeConfiguration#testList2:org.apache.commons.configuration2.TestThreesomeConfiguration#testList3:org.apache.commons.configuration2.io.TestCombinedLocationStrategy#testInitNullCollection:org.apache.commons.configuration2.io.TestCombinedLocationStrategy#testInitCollectionWithNullEntries:org.apache.commons.configuration2.io.TestCombinedLocationStrategy#testInitDefensiveCopy:org.apache.commons.configuration2.io.TestCombinedLocationStrategy#testGetSubStrategiesModify:org.apache.commons.configuration2.io.TestCombinedLocationStrategy#testLocateSuccessFirstSubStrategy:org.apache.commons.configuration2.io.TestCombinedLocationStrategy#testLocateSuccessSecondSubStrategy:org.apache.commons.configuration2.io.TestCombinedLocationStrategy#testLocateFailed:org.apache.commons.configuration2.io.TestFileLocatorUtils#testGetBasePath:org.apache.commons.configuration2.io.TestFileLocatorUtils#testGetFileName:org.apache.commons.configuration2.io.TestFileLocatorUtils#testFullyInitializedLocatorUndefined:org.apache.commons.configuration2.io.TestFileLocatorUtils#testFileFromURLNull:org.apache.commons.configuration2.io.TestFileLocatorUtils#testFullyInitializedLocatorAlreadyComplete:org.apache.commons.configuration2.io.TestFileLocatorUtils#testFullyInitializedLocatorLocateFails:org.apache.commons.configuration2.io.TestFileLocatorUtils#testIsFullyInitializedNull:org.apache.commons.configuration2.io.TestFileLocatorUtils#testIsFullyInitializedNoBasePath:org.apache.commons.configuration2.io.TestFileLocatorUtils#testConvertToURIException:org.apache.commons.configuration2.io.TestFileLocatorUtils#testConvertFileToURL:org.apache.commons.configuration2.io.TestFileLocatorUtils#testDefaultFileLocationStrategy:org.apache.commons.configuration2.io.TestFileLocatorUtils#testObtainLocationStrategySetInLocator:org.apache.commons.configuration2.io.TestFileLocatorUtils#testObtainLocationStrategyNotSetInLocator:org.apache.commons.configuration2.io.TestFileLocatorUtils#testObtainLocationStrategyNullLocator:org.apache.commons.configuration2.io.TestFileLocatorUtils#testLocateNullLocator:org.apache.commons.configuration2.io.TestFileLocatorUtils#testLocateSuccessWithStrategyAndFileSystem:org.apache.commons.configuration2.io.TestFileLocatorUtils#testLocateSuccessWithStrategyDefaultFileSystem:org.apache.commons.configuration2.io.TestFileLocatorUtils#testLocateSuccessWithDefaults:org.apache.commons.configuration2.io.TestFileLocatorUtils#testLocateOrThrowFailed:org.apache.commons.configuration2.io.TestFileLocatorUtils#testStoreFileLocatorInMap:org.apache.commons.configuration2.io.TestFileLocatorUtils#testPutNoLocator:org.apache.commons.configuration2.io.TestFileLocatorUtils#testPutNoMap:org.apache.commons.configuration2.io.TestFileLocatorUtils#testFromMapNoMap:org.apache.commons.configuration2.io.TestFileLocatorUtils#testLocateWithNullTCCL:org.apache.commons.configuration2.io.TestFileLocatorUtils#testObtainFileSystemNullLocator:org.apache.commons.configuration2.io.TestFileLocatorUtils#testObtainFileSystemSetInLocator:org.apache.commons.configuration2.io.TestFileLocatorUtils#testIsLocationDefinedNull:org.apache.commons.configuration2.io.TestFileLocatorUtils#testFileFromURLWithPlus:org.apache.commons.configuration2.io.TestFileLocatorUtils#testObtainFileSystemNotSetInLocator:org.apache.commons.configuration2.io.TestFileLocatorUtils#testFileFromURLWithEncodedPercent:org.apache.commons.configuration2.io.TestFileLocatorUtils#testIsLocationDefinedFalse:org.apache.commons.configuration2.io.TestFileLocatorUtils#testIsLocationDefinedFileName:org.apache.commons.configuration2.io.TestFileLocatorUtils#testIsLocationDefinedURL:org.apache.commons.configuration2.io.TestFileLocatorUtils#testGetFile:org.apache.commons.configuration2.io.TestFileLocatorUtils#testFullyInitializedLocatorFileName:org.apache.commons.configuration2.io.TestFileLocatorUtils#testFullyInitializedLocatorURL:org.apache.commons.configuration2.io.TestDefaultFileSystem#testDefaultLogger:org.apache.commons.configuration2.io.TestDefaultFileSystem#testSetLogger:org.apache.commons.configuration2.io.TestDefaultFileSystem#testGetOutputStreamInvalidPath:org.apache.commons.configuration2.io.TestBasePathLocationStrategy#testLocateSuccess:org.apache.commons.configuration2.io.TestBasePathLocationStrategy#testLocateSuccessRelativePrefix:org.apache.commons.configuration2.io.TestBasePathLocationStrategy#testNullFileName:org.apache.commons.configuration2.io.TestBasePathLocationStrategy#testNullBasePath:org.apache.commons.configuration2.io.TestFileHandler#testIsLocationDefinedFalse:org.apache.commons.configuration2.io.TestFileHandler#testIsLocationDefinedFileName:org.apache.commons.configuration2.io.TestFileHandler#testIsLocationDefinedURL:org.apache.commons.configuration2.io.TestFileHandler#testLocateSuccess:org.apache.commons.configuration2.io.TestFileHandler#testGetFileSystemDefault:org.apache.commons.configuration2.io.TestFileHandler#testSetFileSystemNull:org.apache.commons.configuration2.io.TestFileHandler#testResetFileSystem:org.apache.commons.configuration2.io.TestFileHandler#testGetLocationStrategyDefault:org.apache.commons.configuration2.io.TestFileHandler#testSetLocationStrategy:org.apache.commons.configuration2.io.TestFileHandler#testSetURL:org.apache.commons.configuration2.io.TestFileHandler#testSetURLFileScheme:org.apache.commons.configuration2.io.TestFileHandler#testSetURLWithParams:org.apache.commons.configuration2.io.TestFileHandler#testSetURLNull:org.apache.commons.configuration2.io.TestFileHandler#testSetFile:org.apache.commons.configuration2.io.TestFileHandler#testSetPath:org.apache.commons.configuration2.io.TestFileHandler#testSetFileName:org.apache.commons.configuration2.io.TestFileHandler#testSetFileNameFileScheme:org.apache.commons.configuration2.io.TestFileHandler#testGetFileNameUndefined:org.apache.commons.configuration2.io.TestFileHandler#testSetBasePath:org.apache.commons.configuration2.io.TestFileHandler#testSetBasePathFileScheme:org.apache.commons.configuration2.io.TestFileHandler#testGetBasePathUndefined:org.apache.commons.configuration2.io.TestFileHandler#testSettingFileNames:org.apache.commons.configuration2.io.TestFileHandler#testLoadNoContent:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromReaderIOException:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromFile:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromFileNoContent:org.apache.commons.configuration2.io.TestFileHandler#testLoadDirectoryString:org.apache.commons.configuration2.io.TestFileHandler#testLoadDirectoryFile:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromClassPath:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromURL:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromFilePath:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromFilePathWithURLDefined:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromStream:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromReader:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromURLLocation:org.apache.commons.configuration2.io.TestFileHandler#testLoadFromFileNameLocation:org.apache.commons.configuration2.io.TestFileHandler#testLoadNoLocation:org.apache.commons.configuration2.io.TestFileHandler#testSaveToWriter:org.apache.commons.configuration2.io.TestFileHandler#testSaveToWriterIOException:org.apache.commons.configuration2.io.TestFileHandler#testSaveToWriterNoContent:org.apache.commons.configuration2.io.TestFileHandler#testSaveToStream:org.apache.commons.configuration2.io.TestFileHandler#testSaveToFile:org.apache.commons.configuration2.io.TestFileHandler#testSaveToURL:org.apache.commons.configuration2.io.TestFileHandler#testSaveToFileName:org.apache.commons.configuration2.io.TestFileHandler#testSaveToFileNameURLException:org.apache.commons.configuration2.io.TestFileHandler#testSaveToFileNameURLNotResolved:org.apache.commons.configuration2.io.TestFileHandler#testSaveToFileNameLocation:org.apache.commons.configuration2.io.TestFileHandler#testSaveToURLLocation:org.apache.commons.configuration2.io.TestFileHandler#testSaveNoLocation:org.apache.commons.configuration2.io.TestFileHandler#testPathWithSpaces:org.apache.commons.configuration2.io.TestFileHandler#testPathWithPlus:org.apache.commons.configuration2.io.TestFileHandler#testAssignWithFileBased:org.apache.commons.configuration2.io.TestFileHandler#testAssignNullHandler:org.apache.commons.configuration2.io.TestFileHandler#testIsLocationDefinedFile:org.apache.commons.configuration2.io.TestFileHandler#testIsLocationDefinedPath:org.apache.commons.configuration2.io.TestFileHandler#testIsLocationDefinedBasePathOnly:org.apache.commons.configuration2.io.TestFileHandler#testClearLocation:org.apache.commons.configuration2.io.TestFileHandler#testLoadFileLocatorAware:org.apache.commons.configuration2.io.TestFileHandler#testLoadFileLocatorAwareStream:org.apache.commons.configuration2.io.TestFileHandler#testLoadFileLocatorAwareReader:org.apache.commons.configuration2.io.TestFileHandler#testSaveFileLocatorAware:org.apache.commons.configuration2.io.TestFileHandler#testSaveFileLocatorAwareToStream:org.apache.commons.configuration2.io.TestFileHandler#testSaveFileLocatorAwareToWriter:org.apache.commons.configuration2.io.TestFileHandler#testLocatorAwareEncoding:org.apache.commons.configuration2.io.TestFileHandler#testAddFileHandlerListenerNull:org.apache.commons.configuration2.io.TestFileHandler#testLoadEvents:org.apache.commons.configuration2.io.TestFileHandler#testSaveEvents:org.apache.commons.configuration2.io.TestFileHandler#testLocationChangedFileName:org.apache.commons.configuration2.io.TestFileHandler#testLocationChangedBasePath:org.apache.commons.configuration2.io.TestFileHandler#testLocationChangedFile:org.apache.commons.configuration2.io.TestFileHandler#testLocationChangedPath:org.apache.commons.configuration2.io.TestFileHandler#testLocationChangedFileSystem:org.apache.commons.configuration2.io.TestFileHandler#testLocationChangedURL:org.apache.commons.configuration2.io.TestFileHandler#testLocationChangedEncoding:org.apache.commons.configuration2.io.TestFileHandler#testLocationChangedLocator:org.apache.commons.configuration2.io.TestFileHandler#testLoadInputStreamSupport:org.apache.commons.configuration2.io.TestFileHandler#testLoadInputStreamSupportIOException:org.apache.commons.configuration2.io.TestFileHandler#testLoadSynchronized:org.apache.commons.configuration2.io.TestFileHandler#testSaveSynchronized:org.apache.commons.configuration2.io.TestFileHandler#testInitPropertiesMultiThreaded:org.apache.commons.configuration2.io.TestFileHandler#testSetFileLocatorNull:org.apache.commons.configuration2.io.TestFileHandler#testSetFileLocator:org.apache.commons.configuration2.io.TestFileHandler#testLocateUnknownFile:org.apache.commons.configuration2.io.TestFileHandler#testLocateUndefinedLocator:org.apache.commons.configuration2.io.TestFileHandler#testInitFromMap:org.apache.commons.configuration2.io.TestClasspathLocationStrategy#testLocateFailed:org.apache.commons.configuration2.io.TestClasspathLocationStrategy#testLocateSuccess:org.apache.commons.configuration2.io.TestClasspathLocationStrategy#testLocateNoFileName:org.apache.commons.configuration2.io.TestFileLocator#testCreateFileLocatorUndefined:org.apache.commons.configuration2.io.TestFileLocator#testCreateFileLocator:org.apache.commons.configuration2.io.TestFileLocator#testCreateFileLocatorFromSource:org.apache.commons.configuration2.io.TestFileLocator#testFileLocatorEqualsTrue:org.apache.commons.configuration2.io.TestFileLocator#testFileLocatorEqualsFalse:org.apache.commons.configuration2.io.TestFileLocator#testFileLocatorEqualsNull:org.apache.commons.configuration2.io.TestFileLocator#testFileLocatorEqualsOtherClass:org.apache.commons.configuration2.io.TestFileLocator#testFileLocatorToString:org.apache.commons.configuration2.io.TestProvidedURLLocationStrategy#testLocateSuccess:org.apache.commons.configuration2.io.TestProvidedURLLocationStrategy#testLocateFail:org.apache.commons.configuration2.io.TestHomeDirectoryLocationStrategy#testInitDefaults:org.apache.commons.configuration2.io.TestHomeDirectoryLocationStrategy#testLocateSuccessIgnoreBasePath:org.apache.commons.configuration2.io.TestHomeDirectoryLocationStrategy#testLocateFailedWithBasePath:org.apache.commons.configuration2.io.TestHomeDirectoryLocationStrategy#testLocateSuccessInSubFolder:org.apache.commons.configuration2.io.TestHomeDirectoryLocationStrategy#testLocateSuccessNoBasePath:org.apache.commons.configuration2.io.TestHomeDirectoryLocationStrategy#testNoFileName:org.apache.commons.configuration2.io.TestAbsoluteNameLocationStrategy#testNoFileName:org.apache.commons.configuration2.io.TestAbsoluteNameLocationStrategy#testNoAbsoluteFileName:org.apache.commons.configuration2.io.TestAbsoluteNameLocationStrategy#testNonExistingAbsoluteFile:org.apache.commons.configuration2.io.TestAbsoluteNameLocationStrategy#testExistingAbsoluteFile:org.apache.commons.configuration2.io.TestFileSystemLocationStrategy#testLocate:org.apache.commons.configuration2.io.TestConfigurationLogger#testInitNoLoggerName:org.apache.commons.configuration2.io.TestConfigurationLogger#testInitNoLoggerClass:org.apache.commons.configuration2.io.TestConfigurationLogger#testInitWithLoggerSpec:org.apache.commons.configuration2.io.TestConfigurationLogger#testIsDebugEnabled:org.apache.commons.configuration2.io.TestConfigurationLogger#testIsInfoEnabled:org.apache.commons.configuration2.io.TestConfigurationLogger#testDebug:org.apache.commons.configuration2.io.TestConfigurationLogger#testInfo:org.apache.commons.configuration2.io.TestConfigurationLogger#testWarn:org.apache.commons.configuration2.io.TestConfigurationLogger#testWarnWithException:org.apache.commons.configuration2.io.TestConfigurationLogger#testError:org.apache.commons.configuration2.io.TestConfigurationLogger#testErrorWithException:org.apache.commons.configuration2.io.TestConfigurationLogger#testDummyLogger:org.apache.commons.configuration2.io.TestConfigurationLogger#testSubClass:org.apache.commons.configuration2.io.TestConfigurationLogger#testAbstractConfigurationDefaultLogger:org.apache.commons.configuration2.io.TestConfigurationLogger#testAbstractConfigurationSetLogger:org.apache.commons.configuration2.io.TestConfigurationLogger#testAbstractConfigurationSetLoggerNull:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testInit:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testInitNull:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testReadSimple:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testBlancLines:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testIsSingleLine:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testIsSingleLineMulti:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testCombineComments:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testHeaderComment:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testHeaderCommentWithBlancs:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testHeaderCommentWithBlancsAndPresetHeaderComment:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testHeaderCommentWithBlancsAndPropComment:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testHeaderCommentNull:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testEventAdd:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testEventAddMultiple:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testEventAddExisting:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testEventSetNonExisting:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testEventDelete:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testEventClearConfig:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testEventAddBefore:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testRecursiveLoadCall:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testReadAndWrite:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testSave:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testSaveForceSingleLine:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testTrimComment:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testTrimCommentTrainlingCR:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testTrimCommentFalse:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testGetNonExistingLayouData:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testGetNullLayouttData:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testSetNullComment:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testSaveCommentForUnexistingProperty:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testSaveEmptyLayout:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testInitCopy:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testInitCopyModify:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testSetSeparator:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testSetGlobalSeparator:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testSetLineSeparator:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testSetLineSeparatorInComments:org.apache.commons.configuration2.TestPropertiesConfigurationLayout#testLineWithBlank:org.apache.commons.configuration2.TestConfigurationConverter#testPropertiesToConfiguration:org.apache.commons.configuration2.TestConfigurationConverter#testConfigurationToPropertiesDefaultListHandling:org.apache.commons.configuration2.TestConfigurationConverter#testConfigurationToPropertiesListDelimiterHandler:org.apache.commons.configuration2.TestConfigurationConverter#testConfigurationToPropertiesNoAbstractConfiguration:org.apache.commons.configuration2.TestConfigurationConverter#testConfigurationToPropertiesScalarValue:org.apache.commons.configuration2.TestConfigurationConverter#testConfigurationToMap:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testRefreshDelay:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testInitWithFileHandler:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testDefaultRefreshDelay:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testLocationAfterInit:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testIsReloadingRequiredNoLocation:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testIsReloadingRequiredTrue:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testReloadingAndReset:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testRefreshIsReloadingRequiredTrue:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testRefreshReloadingAndReset:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testIsReloadingRequiredFileDoesNotExist:org.apache.commons.configuration2.reloading.TestFileHandlerReloadingDetector#testGetFileJarURL:org.apache.commons.configuration2.reloading.TestVFSFileHandlerReloadingDetector#testLastModificationDateExisting:org.apache.commons.configuration2.reloading.TestVFSFileHandlerReloadingDetector#testLastModificationDateNonExisting:org.apache.commons.configuration2.reloading.TestVFSFileHandlerReloadingDetector#testLastModificationDateUndefinedHandler:org.apache.commons.configuration2.reloading.TestVFSFileHandlerReloadingDetector#testLastModificationDateFileSystemEx:org.apache.commons.configuration2.reloading.TestVFSFileHandlerReloadingDetector#testLastModificationDateUnresolvableURI:org.apache.commons.configuration2.reloading.TestVFSFileHandlerReloadingDetector#testGetRefreshDelay:org.apache.commons.configuration2.reloading.TestCombinedReloadingController#testInitNull:org.apache.commons.configuration2.reloading.TestCombinedReloadingController#testInitNullEntries:org.apache.commons.configuration2.reloading.TestCombinedReloadingController#testCheckForReloadingTrue:org.apache.commons.configuration2.reloading.TestCombinedReloadingController#testCheckForReloadingFalse:org.apache.commons.configuration2.reloading.TestCombinedReloadingController#testResetReloadingState:org.apache.commons.configuration2.reloading.TestCombinedReloadingController#testResetInitialReloadingState:org.apache.commons.configuration2.reloading.TestCombinedReloadingController#testGetSubControllers:org.apache.commons.configuration2.reloading.TestCombinedReloadingController#testGetSubControllersModify:org.apache.commons.configuration2.reloading.TestManagedReloadingDetector#testRefresh:org.apache.commons.configuration2.reloading.TestManagedReloadingDetector#testReloadingRequiredInitial:org.apache.commons.configuration2.reloading.TestManagedReloadingDetector#testReloadingPerformed:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger#testDefaultExecutor:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger#testInitNoController:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger#testIsRunningAfterInit:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger#testStart:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger#testStartTwice:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger#testStopNotRunning:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger#testStop:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger#testShutdown:org.apache.commons.configuration2.reloading.TestPeriodicReloadingTrigger#testShutdownNoExecutor:org.apache.commons.configuration2.reloading.TestReloadingController#testInitNoDetector:org.apache.commons.configuration2.reloading.TestReloadingController#testReloadingStateAfterInit:org.apache.commons.configuration2.reloading.TestReloadingController#testCheckForReloadingInReloadingState:org.apache.commons.configuration2.reloading.TestReloadingController#testResetReloadingNotInReloadingState:org.apache.commons.configuration2.reloading.TestReloadingController#testReloadingEventType:org.apache.commons.configuration2.reloading.TestReloadingController#testCheckForReloadingTrue:org.apache.commons.configuration2.reloading.TestReloadingController#testCheckForReloadingFalse:org.apache.commons.configuration2.reloading.TestReloadingController#testResetReloadingState:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetList:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetKeysError:org.apache.commons.configuration2.TestDatabaseConfiguration#testIsEmptyError:org.apache.commons.configuration2.TestDatabaseConfiguration#testContainsKeyError:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetPropertyError:org.apache.commons.configuration2.TestDatabaseConfiguration#testAddPropertyDirectSingle:org.apache.commons.configuration2.TestDatabaseConfiguration#testAddPropertyDirectCommit:org.apache.commons.configuration2.TestDatabaseConfiguration#testAddPropertyDirectMultiple:org.apache.commons.configuration2.TestDatabaseConfiguration#testAddNonStringProperty:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetPropertyDirectSingle:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetPropertyDirectMultiple:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearPropertySingle:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearPropertyMultiple:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearPropertyMultipleOtherConfig:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearPropertyCommit:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearSingle:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearMultiple:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearCommit:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetKeysSingle:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetKeysMultiple:org.apache.commons.configuration2.TestDatabaseConfiguration#testContainsKeySingle:org.apache.commons.configuration2.TestDatabaseConfiguration#testContainsKeyMultiple:org.apache.commons.configuration2.TestDatabaseConfiguration#testIsEmptySingle:org.apache.commons.configuration2.TestDatabaseConfiguration#testIsEmptyMultiple:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetKeys:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearSubset:org.apache.commons.configuration2.TestDatabaseConfiguration#testLogErrorListener:org.apache.commons.configuration2.TestDatabaseConfiguration#testAddPropertyError:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearPropertyError:org.apache.commons.configuration2.TestDatabaseConfiguration#testClearError:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetListWithDelimiter:org.apache.commons.configuration2.TestDatabaseConfiguration#testGetListWithDelimiterParsingDisabled:org.apache.commons.configuration2.TestDatabaseConfiguration#testAddWithDelimiter:org.apache.commons.configuration2.TestDatabaseConfiguration#testSetPropertyWithDelimiter:org.apache.commons.configuration2.TestDatabaseConfiguration#testExtractPropertyValueCLOB:org.apache.commons.configuration2.TestDatabaseConfiguration#testExtractPropertyValueCLOBEmpty:org.apache.commons.configuration2.TestXMLConfiguration#testGetProperty:org.apache.commons.configuration2.TestXMLConfiguration#testSubset:org.apache.commons.configuration2.TestXMLConfiguration#testClone:org.apache.commons.configuration2.TestXMLConfiguration#testLoadFromStream:org.apache.commons.configuration2.TestXMLConfiguration#testSaveToStream:org.apache.commons.configuration2.TestXMLConfiguration#testSaveToURL:org.apache.commons.configuration2.TestXMLConfiguration#testSave:org.apache.commons.configuration2.TestXMLConfiguration#testInitCopy:org.apache.commons.configuration2.TestXMLConfiguration#testAddList:org.apache.commons.configuration2.TestXMLConfiguration#testAddNodesAndSave:org.apache.commons.configuration2.TestXMLConfiguration#testAddNodesCopy:org.apache.commons.configuration2.TestXMLConfiguration#testAddNodesToSubnodeConfiguration:org.apache.commons.configuration2.TestXMLConfiguration#testAddObjectAttribute:org.apache.commons.configuration2.TestXMLConfiguration#testAddObjectProperty:org.apache.commons.configuration2.TestXMLConfiguration#testAddProperty:org.apache.commons.configuration2.TestXMLConfiguration#testAddPropertyListWithDelimiterParsingDisabled:org.apache.commons.configuration2.TestXMLConfiguration#testAppend:org.apache.commons.configuration2.TestXMLConfiguration#testAttributeKeyWithMultipleValues:org.apache.commons.configuration2.TestXMLConfiguration#testAutoSaveAddNodes:org.apache.commons.configuration2.TestXMLConfiguration#testAutoSaveWithSubnodeConfig:org.apache.commons.configuration2.TestXMLConfiguration#testAutoSaveWithSubSubnodeConfig:org.apache.commons.configuration2.TestXMLConfiguration#testClearAttributeMultipleDisjoined:org.apache.commons.configuration2.TestXMLConfiguration#testClearAttributeNonExisting:org.apache.commons.configuration2.TestXMLConfiguration#testClearAttributeSingle:org.apache.commons.configuration2.TestXMLConfiguration#testClearPropertyCData:org.apache.commons.configuration2.TestXMLConfiguration#testClearPropertyMultipleDisjoined:org.apache.commons.configuration2.TestXMLConfiguration#testClearPropertyMultipleSiblings:org.apache.commons.configuration2.TestXMLConfiguration#testClearPropertyNonText:org.apache.commons.configuration2.TestXMLConfiguration#testClearPropertyNotExisting:org.apache.commons.configuration2.TestXMLConfiguration#testClearPropertySingleElement:org.apache.commons.configuration2.TestXMLConfiguration#testClearPropertySingleElementWithAttribute:org.apache.commons.configuration2.TestXMLConfiguration#testClearTextRootElement:org.apache.commons.configuration2.TestXMLConfiguration#testCloneWithSave:org.apache.commons.configuration2.TestXMLConfiguration#testComplexNames:org.apache.commons.configuration2.TestXMLConfiguration#testConcurrentGetAndReload:org.apache.commons.configuration2.TestXMLConfiguration#testCopyNull:org.apache.commons.configuration2.TestXMLConfiguration#testCopyRootName:org.apache.commons.configuration2.TestXMLConfiguration#testCopyRootNameNoDocument:org.apache.commons.configuration2.TestXMLConfiguration#testCustomDocBuilder:org.apache.commons.configuration2.TestXMLConfiguration#testCustomDocBuilderValidationError:org.apache.commons.configuration2.TestXMLConfiguration#testCustomDocBuilderValidationSuccess:org.apache.commons.configuration2.TestXMLConfiguration#testDelimiterParsingDisabled:org.apache.commons.configuration2.TestXMLConfiguration#testDelimiterParsingDisabledXPath:org.apache.commons.configuration2.TestXMLConfiguration#testDtd:org.apache.commons.configuration2.TestXMLConfiguration#testEmptyAttribute:org.apache.commons.configuration2.TestXMLConfiguration#testEmptyElements:org.apache.commons.configuration2.TestXMLConfiguration#testEmptyReload:org.apache.commons.configuration2.TestXMLConfiguration#testGetAttribute:org.apache.commons.configuration2.TestXMLConfiguration#testGetCommentedProperty:org.apache.commons.configuration2.TestXMLConfiguration#testGetComplexProperty:org.apache.commons.configuration2.TestXMLConfiguration#testgetProperty:org.apache.commons.configuration2.TestXMLConfiguration#testGetPropertyWithXMLEntity:org.apache.commons.configuration2.TestXMLConfiguration#testListWithAttributes:org.apache.commons.configuration2.TestXMLConfiguration#testListWithAttributesMultiValue:org.apache.commons.configuration2.TestXMLConfiguration#testListWithMultipleAttributesMultiValue:org.apache.commons.configuration2.TestXMLConfiguration#testLoadAndSaveFromFile:org.apache.commons.configuration2.TestXMLConfiguration#testLoadChildNamespace:org.apache.commons.configuration2.TestXMLConfiguration#testLoadInvalidXML:org.apache.commons.configuration2.TestXMLConfiguration#testLoadWithEncoding:org.apache.commons.configuration2.TestXMLConfiguration#testLoadWithRootNamespace:org.apache.commons.configuration2.TestXMLConfiguration#testNoDelimiterParsingInAttrValues:org.apache.commons.configuration2.TestXMLConfiguration#testOverrideAttribute:org.apache.commons.configuration2.TestXMLConfiguration#testPreserveSpace:org.apache.commons.configuration2.TestXMLConfiguration#testPreserveSpaceInvalid:org.apache.commons.configuration2.TestXMLConfiguration#testPreserveSpaceOnElement:org.apache.commons.configuration2.TestXMLConfiguration#testPreserveSpaceOverride:org.apache.commons.configuration2.TestXMLConfiguration#testPublicIdSynchronized:org.apache.commons.configuration2.TestXMLConfiguration#testReadCalledDirectly:org.apache.commons.configuration2.TestXMLConfiguration#testSaveAfterCreateWithCopyConstructor:org.apache.commons.configuration2.TestXMLConfiguration#testSaveAttributes:org.apache.commons.configuration2.TestXMLConfiguration#testSaveDelimiterParsingDisabled:org.apache.commons.configuration2.TestXMLConfiguration#testSaveToStreamWithEncoding:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWindowsPath:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithDelimiterParsingDisabled:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithDoctype:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithDoctypeIDs:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithEncoding:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithInvalidTransformerFactory:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithNullEncoding:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithRootAttributes:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithRootAttributes_ByHand:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithValidation:org.apache.commons.configuration2.TestXMLConfiguration#testSaveWithValidationFailure:org.apache.commons.configuration2.TestXMLConfiguration#testSetAttribute:org.apache.commons.configuration2.TestXMLConfiguration#testSetProperty:org.apache.commons.configuration2.TestXMLConfiguration#testSetPropertyListWithDelimiterParsingDisabled:org.apache.commons.configuration2.TestXMLConfiguration#testSetRootAttribute:org.apache.commons.configuration2.TestXMLConfiguration#testSetRootNamespace:org.apache.commons.configuration2.TestXMLConfiguration#testSetTextRootElement:org.apache.commons.configuration2.TestXMLConfiguration#testSplitLists:org.apache.commons.configuration2.TestXMLConfiguration#testSystemIdSynchronized:org.apache.commons.configuration2.TestXMLConfiguration#testValidating:org.apache.commons.configuration2.TestXMLConfiguration#testValidatingInvalidFile:org.apache.commons.configuration2.TestXMLConfiguration#testWrite:org.apache.commons.configuration2.TestXMLConfiguration#testWriteIndentSize:org.apache.commons.configuration2.TestXMLConfiguration#testWriteWithTransformer:org.apache.commons.configuration2.TestXMLConfiguration#testXPathExpressionEngine:org.apache.commons.configuration2.TestNullCompositeConfiguration#testThrowExceptionOnMissing:org.apache.commons.configuration2.TestNullCompositeConfiguration#testAddRemoveConfigurations:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGetPropertyWIncludes:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGetProperty:org.apache.commons.configuration2.TestNullCompositeConfiguration#testCantRemoveMemoryConfig:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGetPropertyMissing:org.apache.commons.configuration2.TestNullCompositeConfiguration#testMultipleTypesOfConfigs:org.apache.commons.configuration2.TestNullCompositeConfiguration#testPropertyExistsInOnlyOneConfig:org.apache.commons.configuration2.TestNullCompositeConfiguration#testDefaultValueWhenKeyMissing:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGettingConfiguration:org.apache.commons.configuration2.TestNullCompositeConfiguration#testClearingProperty:org.apache.commons.configuration2.TestNullCompositeConfiguration#testAddingProperty:org.apache.commons.configuration2.TestNullCompositeConfiguration#testSettingMissingProperty:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGettingSubset:org.apache.commons.configuration2.TestNullCompositeConfiguration#testSubsetCanResolve:org.apache.commons.configuration2.TestNullCompositeConfiguration#testList:org.apache.commons.configuration2.TestNullCompositeConfiguration#testStringArray:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGetList:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGetKeysPreservesOrder:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGetKeys2PreservesOrder:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGetStringWithDefaults:org.apache.commons.configuration2.TestNullCompositeConfiguration#testCheckingInMemoryConfiguration:org.apache.commons.configuration2.TestNullCompositeConfiguration#testGetVector:org.apache.commons.configuration2.TestConfigurationUtils#testAppend:org.apache.commons.configuration2.TestConfigurationUtils#testToString:org.apache.commons.configuration2.TestConfigurationUtils#testCopy:org.apache.commons.configuration2.TestConfigurationUtils#testConvertToHierarchical:org.apache.commons.configuration2.TestConfigurationUtils#testConvertNullToHierarchical:org.apache.commons.configuration2.TestConfigurationUtils#testConvertHierarchicalToHierarchical:org.apache.commons.configuration2.TestConfigurationUtils#testConvertToHierarchicalDelimiters:org.apache.commons.configuration2.TestConfigurationUtils#testConvertToHierarchicalEngine:org.apache.commons.configuration2.TestConfigurationUtils#testConvertHierarchicalToHierarchicalEngine:org.apache.commons.configuration2.TestConfigurationUtils#testConvertHierarchicalToHierarchicalNullEngine:org.apache.commons.configuration2.TestConfigurationUtils#testConvertToHierarchicalMultiValues:org.apache.commons.configuration2.TestConfigurationUtils#testConvertToHierarchicalOrderOfProperties:org.apache.commons.configuration2.TestConfigurationUtils#testCloneConfiguration:org.apache.commons.configuration2.TestConfigurationUtils#testCloneConfigurationNotSupported:org.apache.commons.configuration2.TestConfigurationUtils#testCloneConfigurationNull:org.apache.commons.configuration2.TestConfigurationUtils#testCloneIfPossibleSupported:org.apache.commons.configuration2.TestConfigurationUtils#testCloneIfPossibleNotSupported:org.apache.commons.configuration2.TestConfigurationUtils#testCloneIfPossibleError:org.apache.commons.configuration2.TestConfigurationUtils#testCloneIfPossibleNull:org.apache.commons.configuration2.TestConfigurationUtils#testEnableRuntimeExceptions:org.apache.commons.configuration2.TestConfigurationUtils#testEnableRuntimeExceptionsInvalid:org.apache.commons.configuration2.TestConfigurationUtils#testEnableRuntimeExceptionsNull:org.apache.commons.configuration2.TestConfigurationUtils#testLoadClassFromCCL:org.apache.commons.configuration2.TestConfigurationUtils#testLoadClassCCLNull:org.apache.commons.configuration2.TestConfigurationUtils#testLoadClassCCLNotFound:org.apache.commons.configuration2.TestConfigurationUtils#testLoadClassNotFound:org.apache.commons.configuration2.TestConfigurationUtils#testLoadClassNoExFound:org.apache.commons.configuration2.TestConfigurationUtils#testLoadClassNoExNotFound:org.apache.commons.configuration2.TestConfigurationUtils#testAsEventSourceSupported:org.apache.commons.configuration2.TestConfigurationUtils#testAsEventSourceNonSupportedEx:org.apache.commons.configuration2.TestConfigurationUtils#testAsEventSourceUnsupportedMock:org.apache.commons.configuration2.TestConfigurationUtils#testCloneSynchronizerNull:org.apache.commons.configuration2.TestConfigurationUtils#testCloneSynchronizerNoOp:org.apache.commons.configuration2.TestConfigurationUtils#testCloneSynchronizerNewInstance:org.apache.commons.configuration2.TestConfigurationUtils#testCloneSynchronizerClone:org.apache.commons.configuration2.TestConfigurationUtils#testCloneSynchronizerFailed:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testGetKeysSynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testGetKeysPrefixSynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testSubsetSynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testAppendSynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testCopySynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testDefaultSynchronizer:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testLockRead:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testLockWrite:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testLockNull:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testUnlockRead:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testUnlockWrite:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testAddPropertySynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testSetPropertySynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testClearPropertySynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testClearSynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testGetPropertySynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testContainsKeySychronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testIsEmptySynchronized:org.apache.commons.configuration2.TestAbstractConfigurationSynchronization#testSizeSynchronized:org.apache.commons.configuration2.event.TestEvent#testToString:org.apache.commons.configuration2.event.TestEvent#testInitNoSource:org.apache.commons.configuration2.event.TestEvent#testInitNoType:org.apache.commons.configuration2.event.TestDatabaseConfigurationEvents#testAddPropertyEvent:org.apache.commons.configuration2.event.TestDatabaseConfigurationEvents#testAddPropertyEventWithDetails:org.apache.commons.configuration2.event.TestDatabaseConfigurationEvents#testClearPropertyEvent:org.apache.commons.configuration2.event.TestDatabaseConfigurationEvents#testClearPropertyEventWithDetails:org.apache.commons.configuration2.event.TestDatabaseConfigurationEvents#testSetPropertyEvent:org.apache.commons.configuration2.event.TestDatabaseConfigurationEvents#testSetPropertyEventWithDetails:org.apache.commons.configuration2.event.TestDatabaseConfigurationEvents#testClearEvent:org.apache.commons.configuration2.event.TestDatabaseConfigurationEvents#testClearEventWithDetails:org.apache.commons.configuration2.event.TestMapConfigurationEvents#testAddPropertyEvent:org.apache.commons.configuration2.event.TestMapConfigurationEvents#testAddPropertyEventWithDetails:org.apache.commons.configuration2.event.TestMapConfigurationEvents#testClearPropertyEvent:org.apache.commons.configuration2.event.TestMapConfigurationEvents#testClearPropertyEventWithDetails:org.apache.commons.configuration2.event.TestMapConfigurationEvents#testSetPropertyEvent:org.apache.commons.configuration2.event.TestMapConfigurationEvents#testSetPropertyEventWithDetails:org.apache.commons.configuration2.event.TestMapConfigurationEvents#testClearEvent:org.apache.commons.configuration2.event.TestMapConfigurationEvents#testClearEventWithDetails:org.apache.commons.configuration2.event.TestPropertiesConfigurationEvents#testAddPropertyEvent:org.apache.commons.configuration2.event.TestPropertiesConfigurationEvents#testAddPropertyEventWithDetails:org.apache.commons.configuration2.event.TestPropertiesConfigurationEvents#testClearPropertyEvent:org.apache.commons.configuration2.event.TestPropertiesConfigurationEvents#testClearPropertyEventWithDetails:org.apache.commons.configuration2.event.TestPropertiesConfigurationEvents#testSetPropertyEvent:org.apache.commons.configuration2.event.TestPropertiesConfigurationEvents#testSetPropertyEventWithDetails:org.apache.commons.configuration2.event.TestPropertiesConfigurationEvents#testClearEvent:org.apache.commons.configuration2.event.TestPropertiesConfigurationEvents#testClearEventWithDetails:org.apache.commons.configuration2.event.TestEventListenerList#testReceiveEventMultipleListeners:org.apache.commons.configuration2.event.TestEventListenerList#testReceiveEventDifferentType:org.apache.commons.configuration2.event.TestEventListenerList#testSuppressEventOfSuperType:org.apache.commons.configuration2.event.TestEventListenerList#testReceiveEventSubType:org.apache.commons.configuration2.event.TestEventListenerList#testListenerRegistrationWithListenerData:org.apache.commons.configuration2.event.TestEventListenerList#testListenerRegistrationWithNullListenerData:org.apache.commons.configuration2.event.TestEventListenerList#testRemoveEventListenerNonExistingListener:org.apache.commons.configuration2.event.TestEventListenerList#testRemoveEventListenerNonExistingEventType:org.apache.commons.configuration2.event.TestEventListenerList#testRemoveEventListenerExisting:org.apache.commons.configuration2.event.TestEventListenerList#testRemoveEventListenerNullRegistration:org.apache.commons.configuration2.event.TestEventListenerList#testRemoveEventListenerNullListener:org.apache.commons.configuration2.event.TestEventListenerList#testRemoveEventListenerNullType:org.apache.commons.configuration2.event.TestEventListenerList#testMultipleListenerRegistration:org.apache.commons.configuration2.event.TestEventListenerList#testGetEventListenersNull:org.apache.commons.configuration2.event.TestEventListenerList#testGetEventListenersNoMatch:org.apache.commons.configuration2.event.TestEventListenerList#testGetEventListenersMatchingType:org.apache.commons.configuration2.event.TestEventListenerList#testGetEventListenersBaseType:org.apache.commons.configuration2.event.TestEventListenerList#testGetEventListenersIteratorNextNoElement:org.apache.commons.configuration2.event.TestEventListenerList#testGetEventListenersIteratorRemove:org.apache.commons.configuration2.event.TestEventListenerList#testEventListenerIteratorWrongEvent:org.apache.commons.configuration2.event.TestEventListenerList#testEventListenerIteratorNullEvent:org.apache.commons.configuration2.event.TestEventListenerList#testGetRegistrations:org.apache.commons.configuration2.event.TestEventListenerList#testGetRegistrationsModify:org.apache.commons.configuration2.event.TestEventListenerList#testClear:org.apache.commons.configuration2.event.TestEventListenerList#testAddAll:org.apache.commons.configuration2.event.TestEventListenerList#testAddAllNull:org.apache.commons.configuration2.event.TestEventListenerList#testGetEventListenerRegistrationsForSuperType:org.apache.commons.configuration2.event.TestEventListenerList#testRegisterEventTypeNull:org.apache.commons.configuration2.event.TestEventListenerList#testRegisterListenerNull:org.apache.commons.configuration2.event.TestEventListenerList#testFireNullEvent:org.apache.commons.configuration2.event.TestEventListenerList#testReceiveEventOfExactType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testFetchSuperEventTypesNull:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testFetchSuperEventTypesForBaseType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testFetchSuperEventTypesOfType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testIsInstanceOfDerivedNull:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testIsInstanceOfBaseNull:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testIsInstanceOfFalse:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testIsInstanceOfTrue:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testConfigurationEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testAddPropertyEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testSetPropertyEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testClearPropertyEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testClearEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testHierarchicalEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testAddNodesEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testClearTreeEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testSubnodeChangedEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testBaseErrorEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testReadErrorEventType:org.apache.commons.configuration2.event.TestConfigurationEventTypes#testWriteErrorEventType:org.apache.commons.configuration2.event.TestEventSource#testClone:org.apache.commons.configuration2.event.TestEventSource#testInit:org.apache.commons.configuration2.event.TestEventSource#testFireEvent:org.apache.commons.configuration2.event.TestEventSource#testAddEventListener:org.apache.commons.configuration2.event.TestEventSource#testAddNullEventListener:org.apache.commons.configuration2.event.TestEventSource#testRemoveEventListener:org.apache.commons.configuration2.event.TestEventSource#testRemoveNullEventListener:org.apache.commons.configuration2.event.TestEventSource#testGetEventListenersUpdate:org.apache.commons.configuration2.event.TestEventSource#testGetEventListenersAddNew:org.apache.commons.configuration2.event.TestEventSource#testSetDetailEvents:org.apache.commons.configuration2.event.TestEventSource#testFireEventNoListeners:org.apache.commons.configuration2.event.TestEventSource#testFireEventNoDetails:org.apache.commons.configuration2.event.TestEventSource#testRemoveListenerInFireEvent:org.apache.commons.configuration2.event.TestEventSource#testFireError:org.apache.commons.configuration2.event.TestEventSource#testFireErrorNoListeners:org.apache.commons.configuration2.event.TestEventSource#testClearEventListeners:org.apache.commons.configuration2.event.TestEventSource#testCopyEventListeners:org.apache.commons.configuration2.event.TestEventSource#testCopyEventListenersNullSource:org.apache.commons.configuration2.event.TestEventSource#testClearErrorListeners:org.apache.commons.configuration2.event.TestEventType#testToString:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testClearTreeEvent:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testAddNodesEvent:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testAddNodesEmptyEvent:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testSubConfigurationChangedEventConnected:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testSubConfigurationChangedEventNotConnected:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testAddPropertyEvent:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testAddPropertyEventWithDetails:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testClearPropertyEvent:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testClearPropertyEventWithDetails:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testSetPropertyEvent:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testSetPropertyEventWithDetails:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testClearEvent:org.apache.commons.configuration2.event.TestXMLConfigurationEvents#testClearEventWithDetails:org.apache.commons.configuration2.event.TestSubsetConfigurationEvents#testAddPropertyEvent:org.apache.commons.configuration2.event.TestSubsetConfigurationEvents#testAddPropertyEventWithDetails:org.apache.commons.configuration2.event.TestSubsetConfigurationEvents#testClearPropertyEvent:org.apache.commons.configuration2.event.TestSubsetConfigurationEvents#testClearPropertyEventWithDetails:org.apache.commons.configuration2.event.TestSubsetConfigurationEvents#testSetPropertyEvent:org.apache.commons.configuration2.event.TestSubsetConfigurationEvents#testSetPropertyEventWithDetails:org.apache.commons.configuration2.event.TestSubsetConfigurationEvents#testClearEvent:org.apache.commons.configuration2.event.TestSubsetConfigurationEvents#testClearEventWithDetails:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testClearTreeEvent:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testAddNodesEvent:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testAddNodesEmptyEvent:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testSubConfigurationChangedEventConnected:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testSubConfigurationChangedEventNotConnected:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testAddPropertyEvent:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testAddPropertyEventWithDetails:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testClearPropertyEvent:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testClearPropertyEventWithDetails:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testSetPropertyEvent:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testSetPropertyEventWithDetails:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testClearEvent:org.apache.commons.configuration2.event.TestHierarchicalConfigurationEvents#testClearEventWithDetails:org.apache.commons.configuration2.TestPropertiesSequence#testConfigurationValuesInSameOrderFromFile:org.apache.commons.configuration2.TestPropertiesSequence#testConfigurationValuesInSameOrderWithManualAdd:org.apache.commons.configuration2.TestPropertiesSequence#testMappingInSameOrder:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testConfiguration:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testAddConfigurationSynchronized:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testRemoveConfigurationSynchronized:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testGetNumberOfConfigurationsSynchronized:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testConcurrentGetAndReload:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testUpdateConfiguration:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testGetConfigurationByIdxSynchronized:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testGetConfigurationByNameSynchronized:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testGetConfigurationNamesSynchronized:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testConcurrentGetAndReload2:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testConcurrentGetAndReloadMultipleClients:org.apache.commons.configuration2.TestDynamicCombinedConfiguration#testConcurrentGetAndReloadFile:org.apache.commons.configuration2.TestSystemConfiguration#testSystemConfiguration:org.apache.commons.configuration2.TestSystemConfiguration#testSetSystemProperties:org.apache.commons.configuration2.TestSystemConfiguration#testSetSystemPropertiesFromPropertiesFile:org.apache.commons.configuration2.TestSystemConfiguration#testChangeSystemProperties:org.apache.commons.configuration2.TestSystemConfiguration#testAppendWhileConcurrentAccess:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testThrowExceptionOnMissing:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testContainsKey:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testGetKeys:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testIsEmpty:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testSimpleGet:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testMoreGets:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testGetMissingKey:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testClearProperty:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testGetMissingKeyWithDefault:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testGetKeysWithUnknownPrefix:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testGetKeysWithExistingPrefix:org.apache.commons.configuration2.TestJNDIEnvironmentValues#testGetKeysWithKeyAsPrefix:org.apache.commons.configuration2.TestCatalogResolver#testDebug:org.apache.commons.configuration2.TestCatalogResolver#testPublic:org.apache.commons.configuration2.TestCatalogResolver#testRewriteSystem:org.apache.commons.configuration2.TestCatalogResolver#testSchemaResolver:org.apache.commons.configuration2.TestCatalogResolver#testLogger:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testGetObject:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testAfterPropertiesSet:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testMergeConfigurations:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testLoadResources:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testInitialConfiguration:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testSetLocationsDefensiveCopy:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testSetLocationsNull:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testGetLocationsDefensiveCopy:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testSetConfigurationsDefensiveCopy:org.apache.commons.configuration2.spring.TestConfigurationPropertiesFactoryBean#testGetConfigurationDefensiveCopy:org.apache.commons.configuration2.spring.TestConfigurationPropertySource#testValueInjection:org.apache.commons.configuration2.TestXMLConfiguration_605#testWithNoComma:org.apache.commons.configuration2.TestXMLConfiguration_605#testWithOnlyComma:org.apache.commons.configuration2.TestXMLConfiguration_605#testWithCommaSeparatedList:org.apache.commons.configuration2.TestXMLConfiguration_605#testWithSeparatingWhitespace:org.apache.commons.configuration2.TestXMLConfiguration_605#testWithSeparatingNonWhitespace:org.apache.commons.configuration2.TestXMLConfiguration_605#testWithOnlyCommaWithoutDelimiterParsing:org.apache.commons.configuration2.TestXMLConfiguration_605#testWithOnlyCommaWithStringBuilder:org.apache.commons.configuration2.TestXMLConfiguration_605#testWithOnlyCommaWithStringBuilderWithoutDelimiterParsing:org.apache.commons.configuration2.TestConfigurationLookup#testInitNoConfig:org.apache.commons.configuration2.TestConfigurationLookup#testLookupSuccess:org.apache.commons.configuration2.TestConfigurationLookup#testLookupNotFound:org.apache.commons.configuration2.TestConfigurationLookup#testLookupNotFoundEx:org.apache.commons.configuration2.TestConfigurationLookup#testLookupComplex:org.apache.commons.configuration2.TestDataConfiguration#testContainsKey:org.apache.commons.configuration2.TestDataConfiguration#testGetKeys:org.apache.commons.configuration2.TestDataConfiguration#testIsEmpty:org.apache.commons.configuration2.TestDataConfiguration#testClearProperty:org.apache.commons.configuration2.TestDataConfiguration#testGetUnknown:org.apache.commons.configuration2.TestDataConfiguration#testGetUnknownException:org.apache.commons.configuration2.TestDataConfiguration#testGetArrayInvalidDefaultType:org.apache.commons.configuration2.TestDataConfiguration#testGetPrimitiveArrayInvalidType:org.apache.commons.configuration2.TestDataConfiguration#testGetBooleanArray:org.apache.commons.configuration2.TestDataConfiguration#testGetBooleanList:org.apache.commons.configuration2.TestDataConfiguration#testGetByteArray:org.apache.commons.configuration2.TestDataConfiguration#testGetByteList:org.apache.commons.configuration2.TestDataConfiguration#testGetShortArray:org.apache.commons.configuration2.TestDataConfiguration#testGetShortList:org.apache.commons.configuration2.TestDataConfiguration#testGetIntegerArray:org.apache.commons.configuration2.TestDataConfiguration#testGetIntegerList:org.apache.commons.configuration2.TestDataConfiguration#testGetLongArray:org.apache.commons.configuration2.TestDataConfiguration#testGetLongList:org.apache.commons.configuration2.TestDataConfiguration#testGetFloatArray:org.apache.commons.configuration2.TestDataConfiguration#testGetFloatList:org.apache.commons.configuration2.TestDataConfiguration#testGetDoubleArray:org.apache.commons.configuration2.TestDataConfiguration#testGetDoubleList:org.apache.commons.configuration2.TestDataConfiguration#testGetBigIntegerArray:org.apache.commons.configuration2.TestDataConfiguration#testGetBigIntegerList:org.apache.commons.configuration2.TestDataConfiguration#testGetBigDecimalArray:org.apache.commons.configuration2.TestDataConfiguration#testGetBigDecimalList:org.apache.commons.configuration2.TestDataConfiguration#testGetURI:org.apache.commons.configuration2.TestDataConfiguration#testGetURIArray:org.apache.commons.configuration2.TestDataConfiguration#testGetURIList:org.apache.commons.configuration2.TestDataConfiguration#testGetURL:org.apache.commons.configuration2.TestDataConfiguration#testGetURLArray:org.apache.commons.configuration2.TestDataConfiguration#testGetURLList:org.apache.commons.configuration2.TestDataConfiguration#testGetLocale:org.apache.commons.configuration2.TestDataConfiguration#testGetLocaleArray:org.apache.commons.configuration2.TestDataConfiguration#testGetLocaleList:org.apache.commons.configuration2.TestDataConfiguration#testGetColor:org.apache.commons.configuration2.TestDataConfiguration#testGetColorArray:org.apache.commons.configuration2.TestDataConfiguration#testGetColorList:org.apache.commons.configuration2.TestDataConfiguration#testGetDate:org.apache.commons.configuration2.TestDataConfiguration#testGetDateNoFormatPropertyDirectlySpecified:org.apache.commons.configuration2.TestDataConfiguration#testGetDateArray:org.apache.commons.configuration2.TestDataConfiguration#testGetConfiguration:org.apache.commons.configuration2.TestDataConfiguration#testGetInvalidType:org.apache.commons.configuration2.TestDataConfiguration#testGetDateNoFormatPropertyConversionHandler:org.apache.commons.configuration2.TestDataConfiguration#testGetDateArrayWithFormat:org.apache.commons.configuration2.TestDataConfiguration#testGetDateList:org.apache.commons.configuration2.TestDataConfiguration#testGetCalendar:org.apache.commons.configuration2.TestDataConfiguration#testGetCalendarArray:org.apache.commons.configuration2.TestDataConfiguration#testGetCalendarArrayWithFormat:org.apache.commons.configuration2.TestDataConfiguration#testGetCalendarList:org.apache.commons.configuration2.TestDataConfiguration#testGetInetAddress:org.apache.commons.configuration2.TestDataConfiguration#testGetInetAddressInvalidType:org.apache.commons.configuration2.TestDataConfiguration#testGetInternetAddress:org.apache.commons.configuration2.TestDataConfiguration#testGetInternetAddressInvalidType:org.apache.commons.configuration2.TestDataConfiguration#testConversionException:org.apache.commons.configuration2.TestDataConfiguration#testGetPropertyWithoutConversion:org.apache.commons.configuration2.TestDataConfiguration#testClearPropertyDirect:org.apache.commons.configuration2.TestDataConfiguration#testClearPropertyDirectNoAbstractConf:org.apache.commons.configuration2.TestDataConfiguration#testConversionExceptionCause:org.apache.commons.configuration2.TestINIConfiguration#testSave:org.apache.commons.configuration2.TestINIConfiguration#testSaveWithDelimiterParsingDisabled:org.apache.commons.configuration2.TestINIConfiguration#testSeparatorUsedInINIOutput:org.apache.commons.configuration2.TestINIConfiguration#testSeparatorUsedInINIInput:org.apache.commons.configuration2.TestINIConfiguration#testCommentLeadingSeparatorUsedInINIInput:org.apache.commons.configuration2.TestINIConfiguration#testSaveWithGlobalSection:org.apache.commons.configuration2.TestINIConfiguration#testSaveWithOnlyGlobalSection:org.apache.commons.configuration2.TestINIConfiguration#testLoad:org.apache.commons.configuration2.TestINIConfiguration#testLoadAlternativeSeparator:org.apache.commons.configuration2.TestINIConfiguration#testLoadFromBuilder:org.apache.commons.configuration2.TestINIConfiguration#testIsCommentLine:org.apache.commons.configuration2.TestINIConfiguration#testIsSectionLine:org.apache.commons.configuration2.TestINIConfiguration#testGetSections:org.apache.commons.configuration2.TestINIConfiguration#testQuotedValue:org.apache.commons.configuration2.TestINIConfiguration#testQuotedValueWithQuotes:org.apache.commons.configuration2.TestINIConfiguration#testValueWithComment:org.apache.commons.configuration2.TestINIConfiguration#testQuotedValueWithComment:org.apache.commons.configuration2.TestINIConfiguration#testQuotedValueWithSingleQuotes:org.apache.commons.configuration2.TestINIConfiguration#testWriteValueWithCommentChar:org.apache.commons.configuration2.TestINIConfiguration#testQuotedValueWithWhitespace:org.apache.commons.configuration2.TestINIConfiguration#testQuotedValueWithWhitespaceAndComment:org.apache.commons.configuration2.TestINIConfiguration#testQuotedValueEmpty:org.apache.commons.configuration2.TestINIConfiguration#testGetPropertyNoValue:org.apache.commons.configuration2.TestINIConfiguration#testGetPropertyNoKey:org.apache.commons.configuration2.TestINIConfiguration#testGlobalProperty:org.apache.commons.configuration2.TestINIConfiguration#testGlobalSectionConnected:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionsWithGlobal:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionsNoGlobal:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionsGlobalOnly:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionsDottedVar:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionsAdded:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionExisting:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionConnected:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionMerged:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionGlobal:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionGloabalMultiThreaded:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionGlobalNonExisting:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionNonExisting:org.apache.commons.configuration2.TestINIConfiguration#testLineContinuation:org.apache.commons.configuration2.TestINIConfiguration#testLineContinuationNone:org.apache.commons.configuration2.TestINIConfiguration#testLineContinuationQuoted:org.apache.commons.configuration2.TestINIConfiguration#testLineContinuationComment:org.apache.commons.configuration2.TestINIConfiguration#testLineContinuationQuotedComment:org.apache.commons.configuration2.TestINIConfiguration#testLineContinuationEmptyLine:org.apache.commons.configuration2.TestINIConfiguration#testLineContinuationAtEnd:org.apache.commons.configuration2.TestINIConfiguration#testSaveKeysWithDelimiters:org.apache.commons.configuration2.TestINIConfiguration#testPropertyWithDelimiter:org.apache.commons.configuration2.TestINIConfiguration#testValueWithSemicolon:org.apache.commons.configuration2.TestINIConfiguration#testSeparators:org.apache.commons.configuration2.TestINIConfiguration#testMultipleSeparators:org.apache.commons.configuration2.TestINIConfiguration#testMultipleSeparatorsQuoted:org.apache.commons.configuration2.TestINIConfiguration#testSaveClearedSection:org.apache.commons.configuration2.TestINIConfiguration#testMergeDuplicateSection:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionNonExistingManipulate:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionDuplicate:org.apache.commons.configuration2.TestINIConfiguration#testValueWithDelimiters:org.apache.commons.configuration2.TestINIConfiguration#testListParsingDisabled:org.apache.commons.configuration2.TestINIConfiguration#testGetSectionsSynchronized:org.apache.commons.configuration2.TestINIConfiguration#testListDelimiterHandling:org.apache.commons.configuration2.TestINIConfiguration#testListDelimiterHandlingInList:org.apache.commons.configuration2.TestINIConfiguration#testKeysOfGlobalSection:org.apache.commons.configuration2.TestINIConfiguration#testGlobalSectionNodeHandlerGetChildrenByName:org.apache.commons.configuration2.TestINIConfiguration#testGlobalSectionNodeHandlerGetChildrenCount:org.apache.commons.configuration2.TestINIConfiguration#testGlobalSectionNodeHandlerGetChildByIndex:org.apache.commons.configuration2.TestINIConfiguration#testGlobalSectionNodeHandlerIndexOfChild:org.apache.commons.configuration2.TestINIConfiguration#testExpressionEngineIgnoringCase:org.apache.commons.configuration2.TestINIConfiguration#testWriteEmptySection:org.apache.commons.configuration2.TestXMLListHandling#testSaveNoChanges:org.apache.commons.configuration2.TestXMLListHandling#testAddListItem:org.apache.commons.configuration2.TestXMLListHandling#testRemoveListItem:org.apache.commons.configuration2.TestXMLListHandling#testMixedList:org.apache.commons.configuration2.TestXMLListHandling#testIncompatibleListDelimiterOnSaving:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testClearProperty:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testAddPropertyDirect:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testGetProperty:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testList:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testContainsKey:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testSetLogger:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testGetKeys:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testIsEmpty:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testListEscaped:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testSize:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testSizeEmpty:org.apache.commons.configuration2.web.TestServletFilterConfiguration#testGetBigIntegerConversion:org.apache.commons.configuration2.web.TestServletContextConfiguration#testClearProperty:org.apache.commons.configuration2.web.TestServletContextConfiguration#testAddPropertyDirect:org.apache.commons.configuration2.web.TestServletContextConfiguration#testGetProperty:org.apache.commons.configuration2.web.TestServletContextConfiguration#testList:org.apache.commons.configuration2.web.TestServletContextConfiguration#testContainsKey:org.apache.commons.configuration2.web.TestServletContextConfiguration#testSetLogger:org.apache.commons.configuration2.web.TestServletContextConfiguration#testGetKeys:org.apache.commons.configuration2.web.TestServletContextConfiguration#testIsEmpty:org.apache.commons.configuration2.web.TestServletContextConfiguration#testListEscaped:org.apache.commons.configuration2.web.TestServletContextConfiguration#testSize:org.apache.commons.configuration2.web.TestServletContextConfiguration#testSizeEmpty:org.apache.commons.configuration2.web.TestServletContextConfiguration#testGetBigIntegerConversion:org.apache.commons.configuration2.web.TestServletConfiguration#testClearProperty:org.apache.commons.configuration2.web.TestServletConfiguration#testAddPropertyDirect:org.apache.commons.configuration2.web.TestServletConfiguration#testGetProperty:org.apache.commons.configuration2.web.TestServletConfiguration#testList:org.apache.commons.configuration2.web.TestServletConfiguration#testContainsKey:org.apache.commons.configuration2.web.TestServletConfiguration#testSetLogger:org.apache.commons.configuration2.web.TestServletConfiguration#testGetKeys:org.apache.commons.configuration2.web.TestServletConfiguration#testIsEmpty:org.apache.commons.configuration2.web.TestServletConfiguration#testListEscaped:org.apache.commons.configuration2.web.TestServletConfiguration#testSize:org.apache.commons.configuration2.web.TestServletConfiguration#testSizeEmpty:org.apache.commons.configuration2.web.TestServletConfiguration#testGetBigIntegerConversion:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testClearProperty:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testAddPropertyDirect:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testListWithEscapedElements:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testGetProperty:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testList:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testContainsKey:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testSetLogger:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testGetKeys:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testIsEmpty:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testListEscaped:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testSize:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testSizeEmpty:org.apache.commons.configuration2.web.TestServletRequestConfiguration#testGetBigIntegerConversion:org.apache.commons.configuration2.web.TestAppletConfiguration#testClearProperty:org.apache.commons.configuration2.web.TestAppletConfiguration#testAddPropertyDirect:org.apache.commons.configuration2.web.TestAppletConfiguration#testGetProperty:org.apache.commons.configuration2.web.TestAppletConfiguration#testList:org.apache.commons.configuration2.web.TestAppletConfiguration#testContainsKey:org.apache.commons.configuration2.web.TestAppletConfiguration#testSetLogger:org.apache.commons.configuration2.web.TestAppletConfiguration#testGetKeys:org.apache.commons.configuration2.web.TestAppletConfiguration#testIsEmpty:org.apache.commons.configuration2.web.TestAppletConfiguration#testListEscaped:org.apache.commons.configuration2.web.TestAppletConfiguration#testSize:org.apache.commons.configuration2.web.TestAppletConfiguration#testSizeEmpty:org.apache.commons.configuration2.web.TestAppletConfiguration#testGetBigIntegerConversion:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testSubsetSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testSubnodeUpdate:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testGetMaxIndexSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testGetRootElementNameSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testCloneSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testAddNodesSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testClearTreeSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testCopyConstructorSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testConfigurationAtSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testConfigurationsAtSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testChildConfigurationsAtSynchronized:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testSubnodeUpdateBySubnode:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testCloneCopySubnodeData:org.apache.commons.configuration2.TestBaseHierarchicalConfigurationSynchronization#testReadOnlyAccessToSubConfigurations:org.apache.commons.configuration2.TestBaseConfigurationXMLReader#testParse:org.apache.commons.configuration2.TestBaseConfigurationXMLReader#testParseSAXException:org.apache.commons.configuration2.TestBaseConfigurationXMLReader#testParseIOException:org.apache.commons.configuration2.TestBaseConfigurationXMLReader#testSetRootName:org.apache.commons.configuration2.TestJSONConfiguration#testSave:org.apache.commons.configuration2.TestJSONConfiguration#testGetProperty_simple:org.apache.commons.configuration2.TestJSONConfiguration#testGetProperty_nested:org.apache.commons.configuration2.TestJSONConfiguration#testGetProperty_nested_with_list:org.apache.commons.configuration2.TestJSONConfiguration#testGetProperty_subset:org.apache.commons.configuration2.TestJSONConfiguration#testGetProperty_very_nested_properties:org.apache.commons.configuration2.TestJSONConfiguration#testGetProperty_integer:org.apache.commons.configuration2.TestJSONConfiguration#testGetProperty_dictionary:org.apache.commons.configuration2.TestJSONConfiguration#testGetProperty_dictionaryInList:org.apache.commons.configuration2.TestJSONConfiguration#testCopyConstructor:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testSave:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testInitCopy:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testData:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testLoadWithError:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testString:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testQuotedString:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testEmptyArray:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testArray:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testNestedArrays:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testDictionary:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testDictionaryArray:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testNestedDictionaries:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testDate:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testSaveEmptyDictionary:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testQuoteString:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testSetDataProperty:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testAddDataProperty:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testParseDateNoNumber:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testParseDateTooShort:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testParseDateInvalidChar:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testParseDateNull:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testFormatDate:org.apache.commons.configuration2.plist.TestPropertyListConfiguration#testLoad:org.apache.commons.configuration2.plist.TestPropertyListParser#testRemoveQuotes:org.apache.commons.configuration2.plist.TestPropertyListParser#testUnescapeQuotes:org.apache.commons.configuration2.plist.TestPropertyListParser#testParseDate:org.apache.commons.configuration2.plist.TestPropertyListParser#testFilterData:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testAddByteArrayPropertyEvent:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testSetByteArrayPropertyEvent:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testAddPropertyEvent:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testAddPropertyEventWithDetails:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testClearPropertyEvent:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testClearPropertyEventWithDetails:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testSetPropertyEvent:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testSetPropertyEventWithDetails:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testClearEvent:org.apache.commons.configuration2.plist.TestPropertyListConfigurationEvents#testClearEventWithDetails:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testAddByteArrayPropertyEvent:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testSetByteArrayPropertyEvent:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testAddPropertyEvent:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testAddPropertyEventWithDetails:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testClearPropertyEvent:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testClearPropertyEventWithDetails:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testSetPropertyEvent:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testSetPropertyEventWithDetails:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testClearEvent:org.apache.commons.configuration2.plist.TestXMLPropertyListConfigurationEvents#testClearEventWithDetails:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testSubset:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testBoolean:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testInteger:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testSave:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testInitCopy:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testAddList:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testSaveWithEncoding:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testString:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testArray:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testDictionary:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testDictionaryArray:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testDate:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testSaveEmptyDictionary:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testSetDataProperty:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testAddDataProperty:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testReal:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testNestedArray:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testNested:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testLoadNoDict:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testLoadNoDictConstr:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testSetDatePropertyInvalid:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testSaveNoEncoding:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testAddArray:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testSetList:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testSetArray:org.apache.commons.configuration2.plist.TestXMLPropertyListConfiguration#testWriteCalledDirectly:org.apache.commons.configuration2.TestHierarchicalConfiguration#testSubset:org.apache.commons.configuration2.TestHierarchicalConfiguration#testClone:org.apache.commons.configuration2.TestHierarchicalConfiguration#testInitCopy:org.apache.commons.configuration2.TestHierarchicalConfiguration#testSubsetNodeWithValue:org.apache.commons.configuration2.TestHierarchicalConfiguration#testSubsetMultipleNodesWithValues:org.apache.commons.configuration2.TestHierarchicalConfiguration#testSubsetAttributeResult:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtReadAccess:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtUpdateSubConfigIndependent:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtUpdateParentIndependent:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtUpdateSubConfigConnected:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtUpdateParentConnected:org.apache.commons.configuration2.TestHierarchicalConfiguration#testImmutableConfigurationAt:org.apache.commons.configuration2.TestHierarchicalConfiguration#testImmutableConfigurationAtSupportUpdates:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtUnknownSubTree:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtUnknownSubTreeWithUpdates:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtMultipleNodes:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtMultipleNodesWithUpdates:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtAttributeNode:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtAttributeNodeWithUpdates:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtClearAndDetach:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationsAtNoUpdate:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationsAtWithUpdates:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationAtWithUpdateInitialized:org.apache.commons.configuration2.TestHierarchicalConfiguration#testImmutableConfigurationsAt:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationsAtEmpty:org.apache.commons.configuration2.TestHierarchicalConfiguration#testConfigurationsAtAttributeKey:org.apache.commons.configuration2.TestHierarchicalConfiguration#testInitCopyUpdate:org.apache.commons.configuration2.TestHierarchicalConfiguration#testInterpolationSubset:org.apache.commons.configuration2.TestHierarchicalConfiguration#testInterpolationSubsetMultipleLayers:org.apache.commons.configuration2.TestHierarchicalConfiguration#testInterpolatedConfiguration:org.apache.commons.configuration2.TestHierarchicalConfiguration#testInterpolatedConfigurationEmpty:org.apache.commons.configuration2.TestHierarchicalConfiguration#testInitCopyNull:org.apache.commons.configuration2.TestHierarchicalConfiguration#testImmutableChildConfigurationsAt:org.apache.commons.configuration2.TestHierarchicalConfiguration#testChildConfigurationsAtNoUpdates:org.apache.commons.configuration2.TestHierarchicalConfiguration#testChildConfigurationsAtWithUpdates:org.apache.commons.configuration2.TestHierarchicalConfiguration#testChildConfigurationsAtNoUniqueKey:org.apache.commons.configuration2.TestHierarchicalConfiguration#testChildConfigurationsAtNotFound:org.apache.commons.configuration2.TestConfigurationSet#testSize:org.apache.commons.configuration2.TestConfigurationSet#testIterator:org.apache.commons.configuration2.convert.TestPropertyConverter#testToBigDecimalStringConstructor:org.apache.commons.configuration2.convert.TestPropertyConverter#testToBigDecimalDoubleConstructor:org.apache.commons.configuration2.convert.TestPropertyConverter#testToFileDirect:org.apache.commons.configuration2.convert.TestPropertyConverter#testToFileFromString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToFileFromPath:org.apache.commons.configuration2.convert.TestPropertyConverter#testToPathDirect:org.apache.commons.configuration2.convert.TestPropertyConverter#testToPathFromString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToPathFromFile:org.apache.commons.configuration2.convert.TestPropertyConverter#testToNumberDirect:org.apache.commons.configuration2.convert.TestPropertyConverter#testToNumberFromString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToNumberFromHexString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToNumberFromInvalidHexString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToNumberFromBinaryString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToNumberFromInvalidBinaryString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToNumberFromInvalidString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToNumberWithInvalidClass:org.apache.commons.configuration2.convert.TestPropertyConverter#testToPatternDirect:org.apache.commons.configuration2.convert.TestPropertyConverter#testToPatternFromString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToEnumFromEnum:org.apache.commons.configuration2.convert.TestPropertyConverter#testToEnumFromString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToEnumFromInvalidString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToEnumFromNumber:org.apache.commons.configuration2.convert.TestPropertyConverter#testToEnumFromInvalidNumber:org.apache.commons.configuration2.convert.TestPropertyConverter#testToNoConversionNeeded:org.apache.commons.configuration2.convert.TestPropertyConverter#testToCharSuccess:org.apache.commons.configuration2.convert.TestPropertyConverter#testToCharViaToString:org.apache.commons.configuration2.convert.TestPropertyConverter#testToCharFailed:org.apache.commons.configuration2.convert.TestPropertyConverter#testToStringConversion:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToFromIterator:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToFromArray:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToNoInterpolator:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToNull:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToFailedConversion:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToFromCollection:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToFromEmptyCollection:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToCollectionNullInput:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToCollectionNullCollection:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToWithInterpolator:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testSetDateFormat:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToCalendarWithDefaultFormat:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToArrayObject:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToCollectionSuccess:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToCollectionEmptyString:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToArrayNullInput:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToArrayPrimitiveSameType:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToArrayPrimitiveWrapperType:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToArrayPrimitiveOtherType:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToArrayEmptyString:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testGetDateFormatNotSet:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToDateWithFormat:org.apache.commons.configuration2.convert.TestDefaultConversionHandler#testToPrimitive:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testFlattenCollectionWithArrayWithLimit:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testEscapeNonStringValueTransformer:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testParseArray:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testParseIterable:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testParseIterator:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testParseSimpleValue:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testParseNull:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testEscapeStringValue:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testEscapeStringValueTransformer:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testEscapeNonStringValue:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testEscapeList:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testFlattenArrayWithLimit:org.apache.commons.configuration2.convert.TestDisabledListDelimiterHandler#testFlattenCollectionWithLimit:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testEscapeStringListDelimiter:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testEscapeStringBackslash:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testEscapeStringListDelimiterAndBackslash:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testEscapeWithTransformer:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testSplitSingleElement:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testSplitList:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testSplitNoTrim:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testSplitEscapeLineDelimiter:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testSplitEscapeBackslash:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testSplitEscapeListDelimiterAndBackslashes:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testSplitUnexpectedEscape:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testEscapeList:org.apache.commons.configuration2.convert.TestDefaultListDelimiterHandler#testEscapeStringNoSpecialCharacter:org.apache.commons.configuration2.TestNonStringProperties#testLongDefaultValue:org.apache.commons.configuration2.TestNonStringProperties#testListMissing:org.apache.commons.configuration2.TestNonStringProperties#testSubset:org.apache.commons.configuration2.TestNonStringProperties#testFloat:org.apache.commons.configuration2.TestNonStringProperties#testShort:org.apache.commons.configuration2.TestNonStringProperties#testLong:org.apache.commons.configuration2.TestNonStringProperties#testBooleanDefaultValue:org.apache.commons.configuration2.TestNonStringProperties#testBoolean:org.apache.commons.configuration2.TestNonStringProperties#testShortDefaultValue:org.apache.commons.configuration2.TestNonStringProperties#testByte:org.apache.commons.configuration2.TestNonStringProperties#testDouble:org.apache.commons.configuration2.TestNonStringProperties#testDoubleDefaultValue:org.apache.commons.configuration2.TestNonStringProperties#testFloatDefaultValue:org.apache.commons.configuration2.TestNonStringProperties#testIntegerDefaultValue:org.apache.commons.configuration2.TestNonStringProperties#testInteger:org.apache.commons.configuration2.TestNonStringProperties#testIsEmpty:org.apache.commons.configuration2.TestNonStringProperties#testByteArrayValue:org.apache.commons.configuration2.TestNonStringProperties#testBooleanArrayValue:org.apache.commons.configuration2.TestNonStringProperties#testDoubleArrayValue:org.apache.commons.configuration2.TestNonStringProperties#testFloatArrayValue:org.apache.commons.configuration2.TestNonStringProperties#testIntegerArrayValue:org.apache.commons.configuration2.TestNonStringProperties#testLongArrayValue:org.apache.commons.configuration2.TestNonStringProperties#testShortArrayValue:org.apache.commons.configuration2.TestPropertiesConfiguration#testList:org.apache.commons.configuration2.TestPropertiesConfiguration#testClone:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadFromFile:org.apache.commons.configuration2.TestPropertiesConfiguration#testSave:org.apache.commons.configuration2.TestPropertiesConfiguration#testAppend:org.apache.commons.configuration2.TestPropertiesConfiguration#testReadCalledDirectly:org.apache.commons.configuration2.TestPropertiesConfiguration#testSaveWithDelimiterParsingDisabled:org.apache.commons.configuration2.TestPropertiesConfiguration#testSetPropertyListWithDelimiterParsingDisabled:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoad:org.apache.commons.configuration2.TestPropertiesConfiguration#testIsCommentLine:org.apache.commons.configuration2.TestPropertiesConfiguration#testAppendAndSave:org.apache.commons.configuration2.TestPropertiesConfiguration#testBackslashEscapingInLists:org.apache.commons.configuration2.TestPropertiesConfiguration#testChangingListDelimiter:org.apache.commons.configuration2.TestPropertiesConfiguration#testClearFooterComment:org.apache.commons.configuration2.TestPropertiesConfiguration#testCloneNullLayout:org.apache.commons.configuration2.TestPropertiesConfiguration#testComment:org.apache.commons.configuration2.TestPropertiesConfiguration#testCopyAndSave:org.apache.commons.configuration2.TestPropertiesConfiguration#testDisableIncludes:org.apache.commons.configuration2.TestPropertiesConfiguration#testDisableListDelimiter:org.apache.commons.configuration2.TestPropertiesConfiguration#testEmpty:org.apache.commons.configuration2.TestPropertiesConfiguration#testEmptyNoSeparator:org.apache.commons.configuration2.TestPropertiesConfiguration#testEscapedKey:org.apache.commons.configuration2.TestPropertiesConfiguration#testEscapedKeyValueSeparator:org.apache.commons.configuration2.TestPropertiesConfiguration#testEscapeQuote:org.apache.commons.configuration2.TestPropertiesConfiguration#testFileWithSharpSymbol:org.apache.commons.configuration2.TestPropertiesConfiguration#testGetFooterSynchronized:org.apache.commons.configuration2.TestPropertiesConfiguration#testGetHeaderSynchronized:org.apache.commons.configuration2.TestPropertiesConfiguration#testGetIOFactoryDefault:org.apache.commons.configuration2.TestPropertiesConfiguration#testGetLayout:org.apache.commons.configuration2.TestPropertiesConfiguration#testGetStringWithEscapedChars:org.apache.commons.configuration2.TestPropertiesConfiguration#testGetStringWithEscapedComma:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeInSubDir:org.apache.commons.configuration2.TestPropertiesConfiguration#testInitFromNonExistingFile:org.apache.commons.configuration2.TestPropertiesConfiguration#testInMemoryCreatedSave:org.apache.commons.configuration2.TestPropertiesConfiguration#testJupRead:org.apache.commons.configuration2.TestPropertiesConfiguration#testJupWrite:org.apache.commons.configuration2.TestPropertiesConfiguration#testJupWriteUtf8WithoutUnicodeEscapes:org.apache.commons.configuration2.TestPropertiesConfiguration#testKeepSeparators:org.apache.commons.configuration2.TestPropertiesConfiguration#testKeyValueSeparators:org.apache.commons.configuration2.TestPropertiesConfiguration#testLineSeparator:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadInclude:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadIncludeFileViaFileSystem:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadIncludeFromClassPath:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadIncludeFromReader:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadIncludeInterpol:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadUnexistingFile:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadViaPropertyWithBasePath:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadIncludeOptional:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeLoadAllOnNotFound:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeIncludeLoadAllOnNotFound:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeLoadAllOnLoadException:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeLoadCyclicalReferenceFail:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeLoadCyclicalMultiStepReferenceFail:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeLoadCyclicalMultiStepReferenceIgnore:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeIncludeLoadCyclicalReferenceFail:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeIncludeLoadCyclicalReferenceIgnore:org.apache.commons.configuration2.TestPropertiesConfiguration#testIncludeLoadCyclicalReferenceIgnore:org.apache.commons.configuration2.TestPropertiesConfiguration#testLoadViaPropertyWithBasePath2:org.apache.commons.configuration2.TestPropertiesConfiguration#testMixedArray:org.apache.commons.configuration2.TestPropertiesConfiguration#testMultilines:org.apache.commons.configuration2.TestPropertiesConfiguration#testMultipleIncludeFiles:org.apache.commons.configuration2.TestPropertiesConfiguration#testNewLineEscaping:org.apache.commons.configuration2.TestPropertiesConfiguration#testPropertyLoaded:org.apache.commons.configuration2.TestPropertiesConfiguration#testPropertyLoadedInclude:org.apache.commons.configuration2.TestPropertiesConfiguration#testPropertyLoadedIncludeNotAllowed:org.apache.commons.configuration2.TestPropertiesConfiguration#testReadFooterComment:org.apache.commons.configuration2.TestPropertiesConfiguration#testReference:org.apache.commons.configuration2.TestPropertiesConfiguration#testSaveEscapedEscapingCharacter:org.apache.commons.configuration2.TestPropertiesConfiguration#testSaveMissingFilename:org.apache.commons.configuration2.TestPropertiesConfiguration#testSaveToCustomURL:org.apache.commons.configuration2.TestPropertiesConfiguration#testSaveToHTTPServerFail:org.apache.commons.configuration2.TestPropertiesConfiguration#testSaveToHTTPServerSuccess:org.apache.commons.configuration2.TestPropertiesConfiguration#testSaveWithBasePath:org.apache.commons.configuration2.TestPropertiesConfiguration#testSaveWithDataConfig:org.apache.commons.configuration2.TestPropertiesConfiguration#testSaveWithDefaultListDelimiterHandler:org.apache.commons.configuration2.TestPropertiesConfiguration#testSetFooterSynchronized:org.apache.commons.configuration2.TestPropertiesConfiguration#testSetHeaderSynchronized:org.apache.commons.configuration2.TestPropertiesConfiguration#testSetInclude:org.apache.commons.configuration2.TestPropertiesConfiguration#testSetIOFactoryNull:org.apache.commons.configuration2.TestPropertiesConfiguration#testSetIOFactoryReader:org.apache.commons.configuration2.TestPropertiesConfiguration#testSetIOFactoryWriter:org.apache.commons.configuration2.TestPropertiesConfiguration#testSlashEscaping:org.apache.commons.configuration2.TestPropertiesConfiguration#testUnEscapeCharacters:org.apache.commons.configuration2.TestPropertiesConfiguration#testUnescapeJava:org.apache.commons.configuration2.TestPropertiesConfiguration#testWriteFooterComment:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testGetProperty:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testSave:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testLoadURL:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testLoadBasePath1:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testLoadBasePath2:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testXmlNodeTypes:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testSaveNew:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testSaveModified:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testRootElement:org.apache.commons.configuration2.TestHierarchicalXMLConfiguration#testSetRootElementNameWhenLoadedFromFile:org.apache.commons.configuration2.TestMapConfiguration#testClone:org.apache.commons.configuration2.TestMapConfiguration#testCloneInterpolation:org.apache.commons.configuration2.TestMapConfiguration#testAddProperty:org.apache.commons.configuration2.TestMapConfiguration#testGetMap:org.apache.commons.configuration2.TestMapConfiguration#testCloneModify:org.apache.commons.configuration2.TestMapConfiguration#testGetPropertyTrim:org.apache.commons.configuration2.TestMapConfiguration#testGetPropertyTrimDisabled:org.apache.commons.configuration2.TestMapConfiguration#testGetPropertyTrimNoSplit:org.apache.commons.configuration2.TestMapConfiguration#testGetProperty:org.apache.commons.configuration2.TestMapConfiguration#testList:org.apache.commons.configuration2.TestMapConfiguration#testContainsKey:org.apache.commons.configuration2.TestMapConfiguration#testSetLogger:org.apache.commons.configuration2.TestMapConfiguration#testGetKeys:org.apache.commons.configuration2.TestMapConfiguration#testIsEmpty:org.apache.commons.configuration2.TestMapConfiguration#testClearProperty:org.apache.commons.configuration2.TestMapConfiguration#testAddPropertyDirect:org.apache.commons.configuration2.TestMapConfiguration#testListEscaped:org.apache.commons.configuration2.TestMapConfiguration#testSize:org.apache.commons.configuration2.TestMapConfiguration#testSizeEmpty:org.apache.commons.configuration2.TestMapConfiguration#testGetBigIntegerConversion:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetList:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testAppend:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testCopy:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testCopyNull:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testInterpolateList:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetListNonString:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetStringArrayNonString:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetStringArrayUnknown:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testNestedVariableInterpolation:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSetListDelimiterHandlerNull:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testDefaultListDelimiterHandler:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testInterpolateString:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testInterpolateRecursive:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testCyclicInterpolation:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testInterpolationUnknownVariable:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testInterpolationNoInterpolator:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testDefaultConversionHandler:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testDefaultConversionHandlerSharedInstance:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSetDefaultConversionHandler:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSetDefaultConversionHandlerNull:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGet:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetUnknownNoDefaultValue:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetUnknownWithDefaultValue:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetUnknownWithThrowExceptionOnMissing:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetUnownWithDefaultValueThrowExceptionOnMissing:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetArray:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetArrayPrimitive:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetArrayUnknownNoDefault:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetArrayUnknownWithDefault:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetArrayDefaultValueNotAnArray:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetArrayDefaultValueWrongComponentClass:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetListUnknownNoDefault:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetListUnknownWithDefault:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetCollection:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetCollectionNullTarget:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetCollectionSingleValue:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetCollectionUnknownNoDefault:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetCollectionUnknownWithDefault:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetEncodedStringNoDecoder:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetEncodedStringNoValue:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetEncodedStringValue:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetEncodedStringNoDefaultDecoderDefined:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testGetEncodedStringWithDefaultDecoder:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSizeInternal:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testClearIteratorNoRemove:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testInterpolateEscape:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testAddPropertyList:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testAddPropertyListNoDelimiterParsing:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testCopyWithLists:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testCopyEvents:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testCopyDelimiterHandling:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testAppendWithLists:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testAppendEvents:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testAppendNull:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testAppendDelimiterHandling:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testInterpolateEnvironmentVariables:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSetPrefixLookupsExistingInterpolator:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSetPrefixLookupsNoInterpolator:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSetDefaultLookupsExistingInterpolator:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSetDefaultLookupsNoInterpolator:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testInstallInterpolatorNull:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSetParentInterpolatorExistingInterpolator:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testSetParentInterpolatorNoInterpolator:org.apache.commons.configuration2.TestAbstractConfigurationBasicFeatures#testInterpolateArray:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetProperty:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testContainsKey:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testClone:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testCloneInterpolation:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetKeys:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testAddNodesCopy:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testAddProperty:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testClear:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testSetProperty:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testClearProperty:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetKeysWithKeyAsPrefix:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testSize:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationSubset:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationSubsetMultipleLayers:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolatedConfiguration:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInitCopyNull:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testIsEmptyRootOnly:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testIsEmptyNodesWithNoValues:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testClearTree:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testClearTreeComplex:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testClearTreeHierarchy:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testIsEmptyFalse:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetKeysOrder:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetKeysAttribute:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetKeysAttributePrefix:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetKeysString:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetKeysWithKeyAsPrefixMultiple:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testAddPropertyInvalidKey:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetMaxIndex:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testCloneWithEventListeners:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testAddNodes:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testAddNodesForNonExistingKey:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testAddNodesWithAttributeKey:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testSetExpressionEngine:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolation:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationBasic:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationMultipleLevels:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationLoop:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationUnknownProperty:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationSystemProperties:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationConstants:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationEscaped:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolationLocalhost:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testInterpolator:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetPropertyKeyWithBrackets:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testAddPropertyWithListHandling:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testResolveNodeKey:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testResolveNodeKeyAttribute:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testNodeKeyEmptyCache:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testNodeKeyCachePopulated:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testNodeKeyCacheUsage:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testNodeKeyRootNode:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testNodeKeyCacheHit:org.apache.commons.configuration2.TestAbstractHierarchicalConfiguration#testGetNodeModel:org.apache.commons.configuration2.TestBaseNullConfiguration#testThrowExceptionOnMissing:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetProperty:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetList:org.apache.commons.configuration2.TestBaseNullConfiguration#testSubset:org.apache.commons.configuration2.TestBaseNullConfiguration#testInterpolation:org.apache.commons.configuration2.TestBaseNullConfiguration#testInterpolationLoop:org.apache.commons.configuration2.TestBaseNullConfiguration#testMultipleInterpolation:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetByte:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetByteUnknown:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetByteIncompatibleType:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetShort:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetShortUnknown:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetShortIncompatibleType:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetLong:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetLongUnknown:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetLongIncompatibleTypes:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetFloat:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetFloatUnknown:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetFloatIncompatibleType:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetDouble:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetDoubleUnknown:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetDoubleIncompatibleType:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetBigDecimal:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetBigDecimalUnknown:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetBigDecimalIncompatibleType:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetBigInteger:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetBigIntegerUnknown:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetBigIntegerIncompatibleType:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetString:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetStringUnknown:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetBoolean:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetBooleanUnknown:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetBooleanIncompatibleType:org.apache.commons.configuration2.TestBaseNullConfiguration#testGetListAsScalar:org.apache.commons.configuration2.TestBaseNullConfiguration#testCommaSeparatedString:org.apache.commons.configuration2.TestBaseNullConfiguration#testCommaSeparatedStringEscaped:org.apache.commons.configuration2.TestBaseNullConfiguration#testPropertyAccess:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testInitFromNullConfiguration:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testInitFromNullConfigurationAndKey:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanClassName:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanClassNameUndefined:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanClassNameUndefinedWithEx:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanClassNameFromDefault:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#tetGetBeanClassNameDefaultOverride:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanFactoryName:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanFactoryNameUndefined:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanFactoryNameUndefinedWithEx:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanFactoryParameter:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanFactoryParameterUndefined:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanFactoryParameterUndefinedWithEx:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanProperties:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanPropertiesWithReservedAttributes:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetBeanPropertiesEmpty:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetNestedBeanDeclarations:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetNestedBeanDeclarationsReservedCharacter:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetNestedBeanDeclarationsFactoryMethod:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetNestedBeanDeclarationsEmpty:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetInterpolatedBeanProperties:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testInitFromUndefinedKey:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testInitFromUndefinedKeyOptional:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testInitFromMultiValueKey:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetConstructorArgs:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetConstructorArgsNullArg:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testGetInterpolatedConstructorArgs:org.apache.commons.configuration2.beanutils.TestXMLBeanDeclaration#testInterpolateNoInterpolator:org.apache.commons.configuration2.beanutils.TestConstructorArg#testMatchesNoType:org.apache.commons.configuration2.beanutils.TestConstructorArg#testForBeanDeclarationNull:org.apache.commons.configuration2.beanutils.TestConstructorArg#testIsNestedBeanDeclarationTrue:org.apache.commons.configuration2.beanutils.TestConstructorArg#testIsNestedBeanDeclarationFalse:org.apache.commons.configuration2.beanutils.TestConstructorArg#testMatchesWithType:org.apache.commons.configuration2.beanutils.TestConstructorArg#testMatchesNull:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testDefaultConversionHandler:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testGetDefaultBeanClass:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testInitWithConversionHandler:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testCreateBean:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testCreateBeanConstructor:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testCreateBeanConstructorNestedBean:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testFindMatchingConstructorNoArgs:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testFindMatchingConstructorArgCount:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testFindMatchingConstructorAmbiguous:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testFindMatchingConstructorExplicitType:org.apache.commons.configuration2.beanutils.TestDefaultBeanFactory#testFindMatchingConstructorNoMatch:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetBeanFactoryNameDefined:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetBeanFactoryParameterDefined:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetBeanClassNameDefined:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetConstructorArgsDefined:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetConstructorArgsUndefined:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetBeanPropertiesNull:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetNestedBeanDeclarationsNull:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetBeanClassNameUndefined:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetBeanFactoryNameUndefined:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetBeanFactoryParameterUndefined:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetBeanProperties:org.apache.commons.configuration2.beanutils.TestCombinedBeanDeclaration#testGetNestedBeanDeclarations:org.apache.commons.configuration2.beanutils.TestBeanHelper#testDefaultBeanFactory:org.apache.commons.configuration2.beanutils.TestBeanHelper#testInitWithBeanFactory:org.apache.commons.configuration2.beanutils.TestBeanHelper#testDefaultInstance:org.apache.commons.configuration2.beanutils.TestBeanHelper#testRegisteredFactoriesEmptyForNewInstance:org.apache.commons.configuration2.beanutils.TestBeanHelper#testRegisterBeanFactory:org.apache.commons.configuration2.beanutils.TestBeanHelper#testRegisterBeanFactoryNull:org.apache.commons.configuration2.beanutils.TestBeanHelper#testRegisterBeanFactoryNullName:org.apache.commons.configuration2.beanutils.TestBeanHelper#testDeregisterBeanFactory:org.apache.commons.configuration2.beanutils.TestBeanHelper#testDeregisterBeanFactoryNonExisting:org.apache.commons.configuration2.beanutils.TestBeanHelper#testDeregisterBeanFactoryNull:org.apache.commons.configuration2.beanutils.TestBeanHelper#testInitBean:org.apache.commons.configuration2.beanutils.TestBeanHelper#testInitBeanWithNoData:org.apache.commons.configuration2.beanutils.TestBeanHelper#testInitBeanWithInvalidProperty:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithListChildBean:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithNullDeclaration:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithDefaultClass:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithFactoryDefaultClass:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithNoClass:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithInvalidClass:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithDefaultFactory:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithUnknownFactory:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithException:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBeanWithParameter:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateWrapDynaBean:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateWrapDynaBeanNull:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCopyProperties:org.apache.commons.configuration2.beanutils.TestBeanHelper#testCreateBean:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptorArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptorBoolean:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptorDouble:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptorFloat:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptorInt:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptorLong:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptorSecond:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptorShort:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptorString:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetDescriptors:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetIndexedArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetIndexedValues:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetMappedArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetMappedValues:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetSimpleArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetSimpleBoolean:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetSimpleDouble:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetSimpleFloat:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetSimpleInt:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetSimpleLong:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetSimpleShort:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetSimpleString:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testMappedContains:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testMappedRemove:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetIndexedArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetIndexedValues:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetArrayValue:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetMappedValues:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetSimpleBoolean:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetSimpleDouble:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetSimpleFloat:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetSimpleInt:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetSimpleLong:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetSimpleShort:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetSimpleString:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testAddNullPropertyValue:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetNonExistentProperty:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testNestedPropeties:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetNonIndexedProperties:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetIndexedString:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testGetIndexedNonExisting:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBean#testSetNonIndexedProperties:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptorArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptorBoolean:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptorDouble:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptorFloat:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptorInt:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptorLong:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptorSecond:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptorShort:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptorString:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetDescriptors:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetIndexedArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetIndexedValues:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetMappedArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetMappedValues:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetSimpleArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetSimpleBoolean:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetSimpleDouble:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetSimpleFloat:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetSimpleInt:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetSimpleLong:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetSimpleShort:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetSimpleString:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testMappedContains:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testMappedRemove:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetIndexedArguments:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetIndexedValues:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetArrayValue:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetMappedValues:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetSimpleBoolean:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetSimpleDouble:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetSimpleFloat:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetSimpleInt:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetSimpleLong:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetSimpleShort:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetSimpleString:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testAddNullPropertyValue:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetNonExistentProperty:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testNestedPropeties:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetNonIndexedProperties:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetIndexedString:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testGetIndexedNonExisting:org.apache.commons.configuration2.beanutils.TestConfigurationDynaBeanXMLConfig#testSetNonIndexedProperties:org.apache.commons.configuration2.TestXMLDocumentHelper#testCreateTransformerFactory:org.apache.commons.configuration2.TestXMLDocumentHelper#testCreateTransformerFactoryException:org.apache.commons.configuration2.TestXMLDocumentHelper#testTransformException:org.apache.commons.configuration2.TestXMLDocumentHelper#testCreateDocumentBuilderFromFactoryException:org.apache.commons.configuration2.TestXMLDocumentHelper#testInitForNewDocument:org.apache.commons.configuration2.TestXMLDocumentHelper#testElementMappingForNewDocument:org.apache.commons.configuration2.TestXMLDocumentHelper#testInitForSourceDocument:org.apache.commons.configuration2.TestXMLDocumentHelper#testElementMappingForSourceDocument:org.apache.commons.configuration2.TestXMLDocumentHelper#testCopyDocument:org.apache.commons.configuration2.TestXMLDocumentHelper#testCopyElementMapping:org.apache.commons.configuration2.TestXMLDocumentHelper#testCopyElementMappingForComplexDocument:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testLongDefaultValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testListMissing:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testSubset:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testFloat:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testShort:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testLong:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testBooleanDefaultValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testBoolean:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testShortDefaultValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testByte:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testDouble:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testDoubleDefaultValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testFloatDefaultValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testIntegerDefaultValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testInteger:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testIsEmpty:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testByteArrayValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testBooleanArrayValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testDoubleArrayValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testFloatArrayValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testIntegerArrayValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testLongArrayValue:org.apache.commons.configuration2.TestCompositeConfigurationNonStringProperties#testShortArrayValue:org.apache.commons.configuration2.TestConfigurationMap#testPut:org.apache.commons.configuration2.TestEqualBehavior#testLoading:org.apache.commons.configuration2.TestEqualBehavior#testDeletingExisting:org.apache.commons.configuration2.TestEqualBehavior#testDeletingNonExisting:org.apache.commons.configuration2.TestEqualBehavior#testSettingNonExisting:org.apache.commons.configuration2.TestEqualBehavior#testSettingExisting:org.apache.commons.configuration2.TestEqualBehavior#testAddingUnset:org.apache.commons.configuration2.TestEqualBehavior#testAddingSet:org.apache.commons.configuration2.TestSubsetConfiguration#testThrowExceptionOnMissing:org.apache.commons.configuration2.TestSubsetConfiguration#testGetProperty:org.apache.commons.configuration2.TestSubsetConfiguration#testGetList:org.apache.commons.configuration2.TestSubsetConfiguration#testGetKeys:org.apache.commons.configuration2.TestSubsetConfiguration#testClear:org.apache.commons.configuration2.TestSubsetConfiguration#testSetProperty:org.apache.commons.configuration2.TestSubsetConfiguration#testListDelimiterHandling:org.apache.commons.configuration2.TestSubsetConfiguration#testNested:org.apache.commons.configuration2.TestSubsetConfiguration#testInterpolator:org.apache.commons.configuration2.TestSubsetConfiguration#testInitNoParent:org.apache.commons.configuration2.TestSubsetConfiguration#testGetParentKey:org.apache.commons.configuration2.TestSubsetConfiguration#testGetChildKey:org.apache.commons.configuration2.TestSubsetConfiguration#testGetKeysWithPrefix:org.apache.commons.configuration2.TestSubsetConfiguration#testGetParent:org.apache.commons.configuration2.TestSubsetConfiguration#testGetPrefix:org.apache.commons.configuration2.TestSubsetConfiguration#testSetPrefix:org.apache.commons.configuration2.TestSubsetConfiguration#testSetListDelimiterHandlerInParent:org.apache.commons.configuration2.TestSubsetConfiguration#testGetListDelimiterHandlerFromParent:org.apache.commons.configuration2.TestSubsetConfiguration#testSetListDelimiterHandlerParentNotSupported:org.apache.commons.configuration2.TestSubsetConfiguration#testLocalLookupsInInterpolatorAreInherited:org.apache.commons.configuration2.TestSubsetConfiguration#testInterpolationForKeysOfTheParent:org.apache.commons.configuration2.TestYAMLConfiguration#testSave:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_simple:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_nested:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_nested_with_list:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_subset:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_very_nested_properties:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_integer:org.apache.commons.configuration2.TestYAMLConfiguration#testGetProperty_dictionary:org.apache.commons.configuration2.TestYAMLConfiguration#testCopyConstructor:org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromReader:org.apache.commons.configuration2.TestYAMLConfiguration#testObjectCreationFromStream:org.apache.commons.configuration2.TestEnvironmentConfiguration#testInit:org.apache.commons.configuration2.TestEnvironmentConfiguration#testAddProperty:org.apache.commons.configuration2.TestEnvironmentConfiguration#testClear:org.apache.commons.configuration2.TestEnvironmentConfiguration#testSetProperty:org.apache.commons.configuration2.TestEnvironmentConfiguration#testClearProperty:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testInit:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testInterpolateString:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testAddDefaultLookups:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testAddDefaultLookupsNull:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testDeregisterLookup:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testDeregisterLookupNonExisting:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testEnableSubstitutionInVariables:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testFromSpecificationInterpolator:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testFromSpecificationNewInstance:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testFromSpecificationNull:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testGetDefaultLookupsModify:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testGetDefaultPrefixLookups:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testGetDefaultPrefixLookupsModify:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testGetLookupsModify:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testInterpolateEmptyVariable:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testInterpolateObject:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testInterpolateStringUnknownVariable:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testInterpolationMultipleVariables:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testInterpolationSingleVariable:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testInterpolationSingleVariableDefaultValue:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testInterpolationVariableIncomplete:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testNullSafeLookupExisting:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testNullSafeLookupNull:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testPrefixSetModify:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testRegisterLookup:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testRegisterLookupNull:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testRegisterLookupNullPrefix:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testRegisterLookups:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testRegisterLookupsNull:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testRemoveDefaultLookup:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testRemoveDefaultLookupNonExisting:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveDefault:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveDefaultAfterPrefixFails:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveDefaultEmptyVarName:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveEmptyPrefix:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveEmptyVarName:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveNoDefault:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveNull:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveParentVariableFound:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveParentVariableNotFound:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveWithPrefix:org.apache.commons.configuration2.interpol.TestConfigurationInterpolator#testResolveWithUnknownPrefix:org.apache.commons.configuration2.interpol.TestSystemPropertiesLookup#testLookupProperties:org.apache.commons.configuration2.interpol.TestSystemPropertiesLookup#testLookupUnknownProperty:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testGetDefaultLookupsModify:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testBuilderReuse:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testCreateInstance:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testCreateInstanceCollections:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testGetPrefixLookupsModify:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testWithDefaultLookupNull:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testWithDefaultLookupsNull:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testWithPrefixLookupNoLookup:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testWithPrefixLookupNoPrefix:org.apache.commons.configuration2.interpol.TestInterpolatorSpecification#testWithPrefixLookupsNull:org.apache.commons.configuration2.interpol.TestConstantLookup#testLookupCache:org.apache.commons.configuration2.interpol.TestConstantLookup#testLookupConstant:org.apache.commons.configuration2.interpol.TestConstantLookup#testLookupInvalidSyntax:org.apache.commons.configuration2.interpol.TestConstantLookup#testLookupNonExisting:org.apache.commons.configuration2.interpol.TestConstantLookup#testLookupNonStringFromCache:org.apache.commons.configuration2.interpol.TestConstantLookup#testLookupNull:org.apache.commons.configuration2.interpol.TestConstantLookup#testLookupPrivate:org.apache.commons.configuration2.interpol.TestConstantLookup#testLookupUnknownClass:org.apache.commons.configuration2.interpol.TestDummyLookup#testLookup:org.apache.commons.configuration2.interpol.TestExprLookup#testLookup:org.apache.commons.configuration2.interpol.TestExprLookup#testGetVariables:org.apache.commons.configuration2.interpol.TestExprLookup#testGetVariablesDefensiveCopy:org.apache.commons.configuration2.interpol.TestExprLookup#testLookupNoConfigurationInterpolator:org.apache.commons.configuration2.interpol.TestExprLookup#testLookupNonStringExpression:org.apache.commons.configuration2.interpol.TestExprLookup#testLookupNullExpression:org.apache.commons.configuration2.interpol.TestEnvironmentLookup#testLookupNonExisting:org.apache.commons.configuration2.interpol.TestEnvironmentLookup#testLookup:org.apache.commons.configuration2.TestImmutableConfiguration#testUnmodifiableConfigurationNull:org.apache.commons.configuration2.TestImmutableConfiguration#testUnmodifiableConfigurationAccess:org.apache.commons.configuration2.TestImmutableConfiguration#testUnmodifiableConfigurationOtherTypes:org.apache.commons.configuration2.TestImmutableConfiguration#testUnmodifiableConfigurationIterate:org.apache.commons.configuration2.TestImmutableConfiguration#testUnmodifiableConfigurationIteratorRemove:org.apache.commons.configuration2.TestImmutableConfiguration#testUnmodifiableConfigurationLiveUpdate:org.apache.commons.configuration2.TestImmutableConfiguration#testUnmodifiableConfigurationCast:org.apache.commons.configuration2.TestImmutableConfiguration#testImmutableSubset:org.apache.commons.configuration2.TestImmutableConfiguration#testUnmodifiableHierarchicalConfiguration:org.apache.commons.configuration2.TestImmutableConfiguration#testExceptionHandling:org.apache.commons.configuration2.TestBaseConfiguration#testThrowExceptionOnMissing:org.apache.commons.configuration2.TestBaseConfiguration#testGetProperty:org.apache.commons.configuration2.TestBaseConfiguration#testGetList:org.apache.commons.configuration2.TestBaseConfiguration#testSubset:org.apache.commons.configuration2.TestBaseConfiguration#testClone:org.apache.commons.configuration2.TestBaseConfiguration#testCloneInterpolation:org.apache.commons.configuration2.TestBaseConfiguration#testAddProperty:org.apache.commons.configuration2.TestBaseConfiguration#testSize:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolationSubset:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolatedConfiguration:org.apache.commons.configuration2.TestBaseConfiguration#testCloneModify:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolationEnvironment:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolation:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolationLoop:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolationUnknownProperty:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolationSystemProperties:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolationConstants:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolationEscaped:org.apache.commons.configuration2.TestBaseConfiguration#testInterpolationLocalhost:org.apache.commons.configuration2.TestBaseConfiguration#testMultipleInterpolation:org.apache.commons.configuration2.TestBaseConfiguration#testGetInterpolator:org.apache.commons.configuration2.TestBaseConfiguration#testGetByte:org.apache.commons.configuration2.TestBaseConfiguration#testGetByteUnknown:org.apache.commons.configuration2.TestBaseConfiguration#testGetByteIncompatibleType:org.apache.commons.configuration2.TestBaseConfiguration#testGetShort:org.apache.commons.configuration2.TestBaseConfiguration#testGetShortUnknown:org.apache.commons.configuration2.TestBaseConfiguration#testGetShortIncompatibleType:org.apache.commons.configuration2.TestBaseConfiguration#testGetLong:org.apache.commons.configuration2.TestBaseConfiguration#testGetLongUnknown:org.apache.commons.configuration2.TestBaseConfiguration#testGetLongIncompatibleTypes:org.apache.commons.configuration2.TestBaseConfiguration#testGetFloat:org.apache.commons.configuration2.TestBaseConfiguration#testGetFloatUnknown:org.apache.commons.configuration2.TestBaseConfiguration#testGetFloatIncompatibleType:org.apache.commons.configuration2.TestBaseConfiguration#testGetDouble:org.apache.commons.configuration2.TestBaseConfiguration#testGetDoubleUnknown:org.apache.commons.configuration2.TestBaseConfiguration#testGetDoubleIncompatibleType:org.apache.commons.configuration2.TestBaseConfiguration#testGetBigDecimal:org.apache.commons.configuration2.TestBaseConfiguration#testGetBigDecimalUnknown:org.apache.commons.configuration2.TestBaseConfiguration#testGetBigDecimalIncompatibleType:org.apache.commons.configuration2.TestBaseConfiguration#testGetBigInteger:org.apache.commons.configuration2.TestBaseConfiguration#testGetBigIntegerUnknown:org.apache.commons.configuration2.TestBaseConfiguration#testGetBigIntegerIncompatibleType:org.apache.commons.configuration2.TestBaseConfiguration#testGetString:org.apache.commons.configuration2.TestBaseConfiguration#testGetStringUnknown:org.apache.commons.configuration2.TestBaseConfiguration#testGetBoolean:org.apache.commons.configuration2.TestBaseConfiguration#testGetBooleanUnknown:org.apache.commons.configuration2.TestBaseConfiguration#testGetBooleanIncompatibleType:org.apache.commons.configuration2.TestBaseConfiguration#testCommaSeparatedString:org.apache.commons.configuration2.TestBaseConfiguration#testCommaSeparatedStringEscaped:org.apache.commons.configuration2.TestBaseConfiguration#testPropertyAccess:org.apache.commons.configuration2.TestBaseConfiguration#testGetStringForListValue:org.apache.commons.configuration2.TestBaseConfiguration#testGetInterpolatedList:org.apache.commons.configuration2.TestBaseConfiguration#testGetInterpolatedPrimitives:org.apache.commons.configuration2.TestBaseConfiguration#testSetInterpolator:org.apache.commons.configuration2.TestBaseConfiguration#testInstallInterpolator:org.apache.commons.configuration2.TestBaseConfiguration#testNoInterpolator:org.apache.commons.configuration2.TestBaseConfiguration#testGetHexadecimalValue:org.apache.commons.configuration2.TestBaseConfiguration#testGetBinaryValue:org.apache.commons.configuration2.TestBaseConfiguration#testNumberConversions:org.apache.commons.configuration2.TestBaseConfiguration#testCloneListProperty:org.apache.commons.configuration2.TestStrictConfigurationComparator#testCompare:org.apache.commons.configuration2.TestStrictConfigurationComparator#testCompareNull:org.apache.commons.configuration2.TestPatternSubtreeConfiguration#testMultiConfiguration:org.apache.commons.configuration2.TestPatternSubtreeConfiguration#testReadNotFileBased:org.apache.commons.configuration2.TestPatternSubtreeConfiguration#testSaveNotFileBased:org.apache.commons.configuration2.TestCombinedConfiguration#testClone:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourceUnknown:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourceNull:org.apache.commons.configuration2.TestCombinedConfiguration#testAddConfigurationSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testGetNumberOfConfigurationsSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testInit:org.apache.commons.configuration2.TestCombinedConfiguration#testClear:org.apache.commons.configuration2.TestCombinedConfiguration#testGetConfigurationByIdxSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testGetConfigurationByNameSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testGetConfigurationNamesSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testCloneSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testConfigurationsAtWithUpdates:org.apache.commons.configuration2.TestCombinedConfiguration#testCloneModify:org.apache.commons.configuration2.TestCombinedConfiguration#testAddConfiguration:org.apache.commons.configuration2.TestCombinedConfiguration#testAddConfigurationWithName:org.apache.commons.configuration2.TestCombinedConfiguration#testAddConfigurationWithNameTwice:org.apache.commons.configuration2.TestCombinedConfiguration#testAddConfigurationAt:org.apache.commons.configuration2.TestCombinedConfiguration#testAddConfigurationComplexAt:org.apache.commons.configuration2.TestCombinedConfiguration#testAddNullConfiguration:org.apache.commons.configuration2.TestCombinedConfiguration#testAccessPropertyEmpty:org.apache.commons.configuration2.TestCombinedConfiguration#testAccessPropertyMulti:org.apache.commons.configuration2.TestCombinedConfiguration#testRemoveConfiguration:org.apache.commons.configuration2.TestCombinedConfiguration#testRemoveConfigurationAt:org.apache.commons.configuration2.TestCombinedConfiguration#testRemoveConfigurationByName:org.apache.commons.configuration2.TestCombinedConfiguration#testRemoveNamedConfiguration:org.apache.commons.configuration2.TestCombinedConfiguration#testRemoveNamedConfigurationAt:org.apache.commons.configuration2.TestCombinedConfiguration#testRemoveNonContainedConfiguration:org.apache.commons.configuration2.TestCombinedConfiguration#testRemoveConfigurationByUnknownName:org.apache.commons.configuration2.TestCombinedConfiguration#testUpdateContainedConfiguration:org.apache.commons.configuration2.TestCombinedConfiguration#testSetNodeCombiner:org.apache.commons.configuration2.TestCombinedConfiguration#testSetNullNodeCombiner:org.apache.commons.configuration2.TestCombinedConfiguration#testClearRemoveChildListener:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourceHierarchical:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourceNonHierarchical:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourceCombined:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourceMulti:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourceMultiSources:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourceWithCombinedChildConfiguration:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourcesMultiSources:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourcesUnknownKey:org.apache.commons.configuration2.TestCombinedConfiguration#testEscapeListDelimiters:org.apache.commons.configuration2.TestCombinedConfiguration#testInvalidateEventBeforeAndAfterChange:org.apache.commons.configuration2.TestCombinedConfiguration#testConversionExpressionEngine:org.apache.commons.configuration2.TestCombinedConfiguration#testGetConfigurations:org.apache.commons.configuration2.TestCombinedConfiguration#testGetConfigurationNameList:org.apache.commons.configuration2.TestCombinedConfiguration#testCombinedCopyToXML:org.apache.commons.configuration2.TestCombinedConfiguration#testSetNodeCombinerSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testGetNodeCombinerSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testGetConfigurationNameListSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testGetConfigurationsSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testGetConversionExpressionEngineSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testSetConversionExpressionEngineSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testInvalidateSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testGetSourceSynchronized:org.apache.commons.configuration2.TestCombinedConfiguration#testLockHandlingWithExceptionWhenConstructingRootNode:org.apache.commons.configuration2.TestCombinedConfiguration#testConcurrentAccess:org.apache.commons.configuration2.TestCombinedConfiguration#testSubConfigurationWithUpdates:org.apache.commons.configuration2.TestCombinedConfiguration#testConfigurationsAt:org.apache.commons.configuration2.TestEqualsProperty#testEquals:org.apache.commons.configuration2.TestHierarchicalConfigurationXMLReader#testParse:org.apache.commons.configuration2.sync.TestReadWriteSynchronizer#testInitLock:org.apache.commons.configuration2.sync.TestReadWriteSynchronizer#testReentrance:org.apache.commons.configuration2.sync.TestReadWriteSynchronizer#testSynchronizerInAction:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testRemoveEventListener:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testBuilderEventType:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testBuilderResetEventType:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testBuilderResetEvent:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testRemoveEventListenerNotExisting:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testConfigurationRequestEventType:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testConfigurationRequestEvent:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testResetOnConfigurationRequestEvent:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testResultCreatedEventNoConfiguration:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testResultCreatedEventType:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilderEvents#testResultCreatedEvent:org.apache.commons.configuration2.builder.TestReloadingBuilderSupportListener#testResetBuilderOnReloadingEvent:org.apache.commons.configuration2.builder.TestReloadingBuilderSupportListener#testResetReloadingStateOnResultCreation:org.apache.commons.configuration2.builder.TestEventListenerParameters#testAddEventListener:org.apache.commons.configuration2.builder.TestEventListenerParameters#testGetParameters:org.apache.commons.configuration2.builder.TestEventListenerParameters#testRegistrationsAfterCreation:org.apache.commons.configuration2.builder.TestEventListenerParameters#testAddEventListenerRegistration:org.apache.commons.configuration2.builder.fluent.TestParameters#testProperties:org.apache.commons.configuration2.builder.fluent.TestParameters#testDefaultParametersManager:org.apache.commons.configuration2.builder.fluent.TestParameters#testBasic:org.apache.commons.configuration2.builder.fluent.TestParameters#testFileBased:org.apache.commons.configuration2.builder.fluent.TestParameters#testFileBasedInheritance:org.apache.commons.configuration2.builder.fluent.TestParameters#testProxyObjectMethods:org.apache.commons.configuration2.builder.fluent.TestParameters#testCombined:org.apache.commons.configuration2.builder.fluent.TestParameters#testJndi:org.apache.commons.configuration2.builder.fluent.TestParameters#testHierarchical:org.apache.commons.configuration2.builder.fluent.TestParameters#testHierarchicalInheritance:org.apache.commons.configuration2.builder.fluent.TestParameters#testXml:org.apache.commons.configuration2.builder.fluent.TestParameters#testXmlInheritance:org.apache.commons.configuration2.builder.fluent.TestParameters#testPropertiesInheritance:org.apache.commons.configuration2.builder.fluent.TestParameters#testMultiFile:org.apache.commons.configuration2.builder.fluent.TestParameters#testDatabase:org.apache.commons.configuration2.builder.fluent.TestParameters#testInheritance:org.apache.commons.configuration2.builder.fluent.TestParameters#testApplyDefaults:org.apache.commons.configuration2.builder.fluent.TestParameters#testRegisterDefaultsHandlerWithStartClass:org.apache.commons.configuration2.builder.fluent.TestParameters#testRegisterDefaultsHandlerNoStartClass:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testDefaultParameters:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testInitWithParameters:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testFileBasedBuilderWithFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testFileBasedBuilderWithURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testFileBasedBuilderWithPath:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testFileBasedFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testFileBasedURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testFileBasedPath:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testPropertiesBuilderFromFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testPropertiesFromFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testPropertiesBuilderFromURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testPropertiesFromURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testPropertiesBuilderFromPath:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testPropertiesBuilderFromPathIncludeNotFoundFail:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testPropertiesBuilderFromPathIncludeNotFoundPass:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testPropertiesFromPath:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testXMLBuilderFromFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testXMLFromFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testXMLBuilderFromURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testXMLFromURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testXMLBuilderFromPath:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testXMLFromPath:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testINIBuilderFromFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testINIFromFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testINIBuilderFromURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testINIFromURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testINIBuilderFromPath:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testINIFromPath:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testCombinedBuilderFromFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testCombinedFromFile:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testCombinedBuilderFromURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testCombinedFromURL:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testCombinedBuilderFromPath:org.apache.commons.configuration2.builder.fluent.TestConfigurations#testCombinedFromPath:org.apache.commons.configuration2.builder.TestAutoSaveListener#testUpdateFileHandler:org.apache.commons.configuration2.builder.TestAutoSaveListener#testUpdateFileHandlerNull:org.apache.commons.configuration2.builder.TestAutoSaveListener#testConfigurationChangedAutoSave:org.apache.commons.configuration2.builder.TestAutoSaveListener#testConfigurationChangedAutoSaveException:org.apache.commons.configuration2.builder.TestAutoSaveListener#testConfigurationChangedBeforeUpdateNoSave:org.apache.commons.configuration2.builder.TestAutoSaveListener#testConfigurationChangedWhileLoading:org.apache.commons.configuration2.builder.TestAutoSaveListener#testConfigurationChangedAfterLoading:org.apache.commons.configuration2.builder.TestDatabaseBuilderParametersImpl#testSetDataSource:org.apache.commons.configuration2.builder.TestDatabaseBuilderParametersImpl#testSetTable:org.apache.commons.configuration2.builder.TestDatabaseBuilderParametersImpl#testSetKeyColumn:org.apache.commons.configuration2.builder.TestDatabaseBuilderParametersImpl#testSetValueColumn:org.apache.commons.configuration2.builder.TestDatabaseBuilderParametersImpl#testSetConfigurationNameColumn:org.apache.commons.configuration2.builder.TestDatabaseBuilderParametersImpl#testSetConfigurationName:org.apache.commons.configuration2.builder.TestDatabaseBuilderParametersImpl#testSetAutoCommit:org.apache.commons.configuration2.builder.TestDatabaseBuilderParametersImpl#testBeanProperties:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testSave:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testGetConfigurationNoLocation:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testGetConfigurationLoadFromFile:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testLocationSurvivesResetResult:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testLocationIsFullyDefined:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testChangeLocationAfterCreation:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testResetLocation:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testChangeLocationAfterReset:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testInitAllowFailOnInitFlag:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testSetLocationNoFileHandler:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testSaveNewFile:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testCreateConfigurationNonExistingFileAndThenSave:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testAutoSave:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testAutoSaveWithReset:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testDisableAutoSave:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testAutoSaveWithPropertiesConfiguration:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testSetDefaultEncodingNull:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testGetDefaultEncodingProperties:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testGetDefaultEncodingXmlProperties:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testGetDefaultEncodingSubClass:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testGetDefaultEncodingInterface:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testInitFileHandlerSetDefaultEncoding:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testInitFileHandlerOverrideDefaultEncoding:org.apache.commons.configuration2.builder.TestFileBasedConfigurationBuilder#testFileBasedConfigurationBuilderWithHomeDirectoryLocationStrategy:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testCopyEventListeners:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testGetConfiguration:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testInitWithParameters:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testInitNoClass:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testInitWithParametersDefensiveCopy:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testInitWithParametersNull:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testGetParametersModify:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testConfigure:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testSetParameters:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testAddParameters:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testAddParametersNull:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testResetParameters:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testGetConfigurationConcurrently:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testResetResult:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testReset:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testGetResultDeclarationInvalidBeanClass:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testAddConfigurationListener:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testRemoveConfigurationListener:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testEventListenerConfiguration:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testRemoveConfigurationListenersOnReset:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testReservedParameter:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testInitializationErrorNotAllowed:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testInitializationErrorAllowed:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testInitializableCalled:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testBeanHelperInConfiguration:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testConnectToReloadingController:org.apache.commons.configuration2.builder.TestBasicConfigurationBuilder#testConnectToReloadingControllerNull:org.apache.commons.configuration2.builder.TestHierarchicalBuilderParametersImpl#testSetExpressionEngine:org.apache.commons.configuration2.builder.TestHierarchicalBuilderParametersImpl#testInheritFrom:org.apache.commons.configuration2.builder.TestHierarchicalBuilderParametersImpl#testBeanPropertiesAccess:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testClone:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetLocationStrategy:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetURL:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetFile:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetPath:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetFileName:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetBasePath:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testInitDefaults:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testGetParameters:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testInheritFrom:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testBeanPropertiesAccess:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetFileSystem:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testInitFileHandler:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetReloadingRefreshDelay:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetReloadingDetectorFactory:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testSetEncoding:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testFromParametersNotFound:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testFromParametersDefaultInstance:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testFromMap:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testFromParametersExtract:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testFromParametersNull:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testFromMapNull:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testInheritFromSkipMissingProperties:org.apache.commons.configuration2.builder.TestFileBasedBuilderParameters#testInheritFromNoParametersObject:org.apache.commons.configuration2.builder.TestBuilderConfigurationWrapperFactory#testDefaultEventSourceSupport:org.apache.commons.configuration2.builder.TestBuilderConfigurationWrapperFactory#testConfigurationBuilderWrapper:org.apache.commons.configuration2.builder.TestBuilderConfigurationWrapperFactory#testEventSourceSupportNone:org.apache.commons.configuration2.builder.TestBuilderConfigurationWrapperFactory#testEventSourceSupportDummy:org.apache.commons.configuration2.builder.TestBuilderConfigurationWrapperFactory#testEventSourceSupportBuilder:org.apache.commons.configuration2.builder.TestBuilderConfigurationWrapperFactory#testEventSourceSupportMockBuilder:org.apache.commons.configuration2.builder.TestBuilderConfigurationWrapperFactory#testCreateBuilderConfigurationWrapperNoClass:org.apache.commons.configuration2.builder.TestBuilderConfigurationWrapperFactory#testCreateBuilderConfigurationWrapperNoBuilder:org.apache.commons.configuration2.builder.TestCopyObjectDefaultHandler#testInitNull:org.apache.commons.configuration2.builder.TestCopyObjectDefaultHandler#testInitializeDefaultsSameType:org.apache.commons.configuration2.builder.TestCopyObjectDefaultHandler#testInitializeDefaultsBaseType:org.apache.commons.configuration2.builder.TestCopyObjectDefaultHandler#testInitializeDefaultsException:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testSetSimpleProperty:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testGetSimpleProperty:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testSetIndexedProperty:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testGetIndexedProperty:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testSetMappedProperty:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testGetMappedProperty:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testGetPropertyUnknown:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testGetDynaClass:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testGetDynaClassNewInstance:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testGetDynaClassName:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testRemove:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testContains:org.apache.commons.configuration2.builder.combined.TestMultiWrapDynaBean#testOrderOfProperties:org.apache.commons.configuration2.builder.combined.TestConfigurationDeclaration#testConfigurationDeclarationIsReserved:org.apache.commons.configuration2.builder.combined.TestConfigurationDeclaration#testConfigurationDeclarationIsReservedAt:org.apache.commons.configuration2.builder.combined.TestConfigurationDeclaration#testConfigurationDeclarationIsReservedOptional:org.apache.commons.configuration2.builder.combined.TestConfigurationDeclaration#testConfigurationDeclarationGetAttributes:org.apache.commons.configuration2.builder.combined.TestConfigurationDeclaration#testConfigurationDeclarationOptionalAttributeInvalid:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testSetConfigurationBasePath:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testNoDefinitionBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testConfigureResult:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testLoadConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testLoadAdditional:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testLoadOptional:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testLoadOptionalWithException:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testLoadOptionalForceCreate:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testBuilderNamesBeforeConfigurationAccess:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testBuilderNames:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testBuilderNamesManipulate:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testGetNamedBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testGetNamedBuilderUnknown:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testGetNamedBuilderBeforeConfigurationAccess:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testResetBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testReloadingBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testReactOnSubBuilderChange:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testRemoveSubBuilderListener:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testCombinedConfigurationAttributes:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testCombinedConfigurationNoAdditional:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testCombinedConfigurationListNodes:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testCustomBuilderProvider:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testProviderInDefinitionConfig:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testSystemProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testEnvironmentProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testJndiConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testINIConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testCustomEntityResolver:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testConfigureEntityResolverWithProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testCustomFileSystem:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testCustomFileSystemForSubConfig:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testDefaultBasePathInParameters:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testDefaultBasePathFromDefinitionBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testBasePathForChildConfigurations:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testCustomResultConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testConfigurationBuilderProvider:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testConfigurationBuilderProviderInheritBasicProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testConfigurationBuilderProviderInheritEventListeners:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testConfigurationBuilderProviderInheritCustomProviders:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testConfigurationBuilderProviderInheritBasePath:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testInitChildBuilderParametersDefaultChildProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testCustomLookup:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testInterpolationOverMultipleSources:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testGetChildBuilders:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testChildBuildersAreInitializedOnlyOnce:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testMultiTenentConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testMultiTenentConfigurationProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testMultiTenentConfigurationReloading:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testRootNodeInitializedAfterCreation:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testConcurrentReadAccessWithoutSynchronizer:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testInheritProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilderVFS#testSuppressChildBuilderPropertyInheritance:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testNoDefinitionBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testConfigureResult:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testLoadConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testLoadAdditional:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testLoadOptional:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testLoadOptionalWithException:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testLoadOptionalForceCreate:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testBuilderNamesBeforeConfigurationAccess:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testBuilderNames:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testBuilderNamesManipulate:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testGetNamedBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testGetNamedBuilderUnknown:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testGetNamedBuilderBeforeConfigurationAccess:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testResetBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testReloadingBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testReactOnSubBuilderChange:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testRemoveSubBuilderListener:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testCombinedConfigurationAttributes:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testCombinedConfigurationNoAdditional:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testCombinedConfigurationListNodes:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testCustomBuilderProvider:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testProviderInDefinitionConfig:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testSystemProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testEnvironmentProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testJndiConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testINIConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testCustomEntityResolver:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testConfigureEntityResolverWithProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testCustomFileSystem:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testCustomFileSystemForSubConfig:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testDefaultBasePathInParameters:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testDefaultBasePathFromDefinitionBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testBasePathForChildConfigurations:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testCustomResultConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testConfigurationBuilderProvider:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testConfigurationBuilderProviderInheritBasicProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testConfigurationBuilderProviderInheritEventListeners:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testConfigurationBuilderProviderInheritCustomProviders:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testConfigurationBuilderProviderInheritBasePath:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testInitChildBuilderParametersDefaultChildProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testCustomLookup:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testInterpolationOverMultipleSources:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testGetChildBuilders:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testChildBuildersAreInitializedOnlyOnce:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testMultiTenentConfiguration:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testMultiTenentConfigurationProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testMultiTenentConfigurationReloading:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testRootNodeInitializedAfterCreation:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testConcurrentReadAccessWithoutSynchronizer:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testInheritProperties:org.apache.commons.configuration2.builder.combined.TestCombinedConfigurationBuilder#testSuppressChildBuilderPropertyInheritance:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider#testInitNoBuilderClass:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider#testInitNoConfigurationClass:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider#testGetBuilderNotReloading:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider#testGetBuilderReloading:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider#testGetReloadingBuilderNotSupported:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider#testGetBuilderNoFailOnInit:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider#testGetBuilderAllowFailOnInit:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider#testInitNoParameterClasses:org.apache.commons.configuration2.builder.combined.TestBaseConfigurationBuilderProvider#testGetParameterClassesModify:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testInitNoMatchingConfigClass:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testInitNoDefaultConfigClass:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testInitNoExt:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testInitSuper:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testDetermineConfigurationClassNoParams:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testDetermineConfigurationClassNoExtension:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testDetermineConfigurationClassExtensionNoMatch:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testDeterminieConfigurationClassNoFileName:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testDetermineConfigurationClassExtensionMatch:org.apache.commons.configuration2.builder.combined.TestFileExtensionConfigurationBuilderProvider#testDetermineConfigurationClassMatchCase:org.apache.commons.configuration2.builder.combined.TestReloadingMultiFileConfigurationBuilder#testInitWithParameters:org.apache.commons.configuration2.builder.combined.TestReloadingMultiFileConfigurationBuilder#testCreateManagedBuilder:org.apache.commons.configuration2.builder.combined.TestReloadingMultiFileConfigurationBuilder#testCreateManagedBuilderWithAllowFailFlag:org.apache.commons.configuration2.builder.combined.TestReloadingMultiFileConfigurationBuilder#testReloadingControllerCheck:org.apache.commons.configuration2.builder.combined.TestReloadingMultiFileConfigurationBuilder#testReloadingControllerCheckReloadingRequired:org.apache.commons.configuration2.builder.combined.TestReloadingMultiFileConfigurationBuilder#testReloadingControllerResetReloadingState:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testGetConfiguration:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testAddConfigurationListener:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testInterpolatorFromParameters:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testManagedConfigurationSettings:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testSchemaValidationError:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testFileNotFound:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testFileNotFoundAllowFailOnInit:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testNoPattern:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testCaching:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testCachingWithReset:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testInterpolatorReset:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testBuilderListenerReset:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testRemoveBuilderListenerOnReset:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testBuilderListenerOtherTypes:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testGetManagedBuilderClonedParameters:org.apache.commons.configuration2.builder.combined.TestMultiFileConfigurationBuilder#testRecursiveInterpolation:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testClone:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testSetBasePath:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testInheritFrom:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testFromParametersNotFound:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testFromParametersCreate:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testFromParametersExisting:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testGetParametersInherited:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testSetInheritSettings:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testSetDefinitionBuilder:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testGetProvidersInitial:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterProvider:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterProviderNoTag:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterProviderNoProvider:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testGetProvidersModify:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterMissingProviders:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterMissingProvidersNullMap:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterMissingProvidersNullEntry:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterMissingProvidersParams:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterMissingProvidersParamsNull:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testProviderForUnknown:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testSetDefinitionBuilderParameters:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testSetBeanProperties:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testGetChildDefaultParametersManagerUndefined:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testGetChildDefaultParametersManagerSpecific:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterChildDefaultsHandler:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testRegisterChildDefaultsHandlerWithStartClass:org.apache.commons.configuration2.builder.combined.TestCombinedBuilderParametersImpl#testInheritFromNoParametersInMap:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilderFileBased#testConcurrentGetAndReload:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilderFileBased#testReloadFromFile:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilderFileBased#testReloadDefinitionFileExplicitBuilder:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilderFileBased#testReloadDefinitionFileDefaultBuilder:org.apache.commons.configuration2.builder.combined.TestMultiFileBuilderParametersImpl#testClone:org.apache.commons.configuration2.builder.combined.TestMultiFileBuilderParametersImpl#testBeanProperties:org.apache.commons.configuration2.builder.combined.TestMultiFileBuilderParametersImpl#testSetFilePattern:org.apache.commons.configuration2.builder.combined.TestMultiFileBuilderParametersImpl#testFromParatersNotFound:org.apache.commons.configuration2.builder.combined.TestMultiFileBuilderParametersImpl#testFromParametersFound:org.apache.commons.configuration2.builder.combined.TestMultiFileBuilderParametersImpl#testFromParametersNewInstance:org.apache.commons.configuration2.builder.combined.TestMultiFileBuilderParametersImpl#testSetManagedBuilderParameters:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilder#testInitWithParameters:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilder#testReloadableDefinitionBuilder:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilder#testNestedReloadableSources:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilder#testInitWithFailOnInitFlag:org.apache.commons.configuration2.builder.combined.TestReloadingCombinedConfigurationBuilder#testNoReloadableSources:org.apache.commons.configuration2.builder.TestDefaultReloadingDetectorFactory#testCreateReloadingDetector:org.apache.commons.configuration2.builder.TestDefaultReloadingDetectorFactory#testCreateReloadingDetectorDefaultRefreshDelay:org.apache.commons.configuration2.builder.TestXMLBuilderParametersImpl#testInheritFrom:org.apache.commons.configuration2.builder.TestXMLBuilderParametersImpl#testBeanPropertiesAccess:org.apache.commons.configuration2.builder.TestXMLBuilderParametersImpl#testSetDocumentBuilder:org.apache.commons.configuration2.builder.TestXMLBuilderParametersImpl#testSetSystemID:org.apache.commons.configuration2.builder.TestXMLBuilderParametersImpl#testSetValidating:org.apache.commons.configuration2.builder.TestXMLBuilderParametersImpl#testSetSchemaValidation:org.apache.commons.configuration2.builder.TestXMLBuilderParametersImpl#testSetPublicID:org.apache.commons.configuration2.builder.TestXMLBuilderParametersImpl#testSetEntityResolver:org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl#testInheritFrom:org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl#testBeanPropertiesAccess:org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl#testSetLayout:org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl#testSetIncludesAllowed:org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl#testSetIncludeListener:org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl#testSetIOFactory:org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl#testSetIOFactoryProperty:org.apache.commons.configuration2.builder.TestPropertiesBuilderParametersImpl#testSetIncludeListenerProperty:org.apache.commons.configuration2.builder.TestDefaultParametersManager#testApplyDefaults:org.apache.commons.configuration2.builder.TestDefaultParametersManager#testRegisterDefaultsHandlerNoClass:org.apache.commons.configuration2.builder.TestDefaultParametersManager#testRegisterDefaultsHandlerNoHandler:org.apache.commons.configuration2.builder.TestDefaultParametersManager#testApplyDefaultsOnSubClass:org.apache.commons.configuration2.builder.TestDefaultParametersManager#testApplyDefaultsStartClass:org.apache.commons.configuration2.builder.TestDefaultParametersManager#testApplyDefaultsMultipleHandlers:org.apache.commons.configuration2.builder.TestDefaultParametersManager#testInitializeParametersNull:org.apache.commons.configuration2.builder.TestDefaultParametersManager#testUnregisterDefaultsHandlerAll:org.apache.commons.configuration2.builder.TestDefaultParametersManager#testUnregisterDefaultsHandlerSpecific:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder#testGetConfigurationNoLocation:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder#testInitAllowFailOnInitFlag:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder#testCreateReloadingDetectorDefaultFactory:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder#testCreateReloadingDetectoryCustomFactory:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder#testReloadingDetectorIsReloadingRequired:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder#testReloadingDetectorReloadingPerformed:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder#testReloadingDetectorNoFileHandler:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder#testResetReloadingStateInGetConfiguration:org.apache.commons.configuration2.builder.TestReloadingFileBasedConfigurationBuilder#testReloadingControllerEvents:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetListDelimiter:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetLogger:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetInterpolator:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testInheritFrom:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testGetParametersDefensiveCopy:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetThrowExceptionOnMissing:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetPrefixLookups:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetPrefixLookupsNull:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetDefaultLookups:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetDefaultLookupsNull:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetParentInterpolator:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetLookupsAndInterpolator:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testMergeNull:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testMerge:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchInterpolatorSpecification:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchInterpolatorSpecificationWithInterpolator:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchInterpolatorSpecificationInvalidDataType:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchInterpolatorSpecificationInvalidMapKey:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchInterpolatorSpecificationInvalidMapValue:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchInterpolatorSpecificationInvalidCollectionValue:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchInterpolatorSpecificationEmpty:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchInterpolatorSpecificationNull:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testCloneValues:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testClonePrefixLookups:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testCloneDefaultLookups:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetSynchronizer:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetConversionHandler:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetBeanHelper:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchBeanHelperNoSet:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testFetchBeanHelperNullMap:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testSetConfigurationDecoder:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testInheritFromNull:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testInheritFromUndefinedProperties:org.apache.commons.configuration2.builder.TestBasicBuilderParameters#testDefaults:org.apache.commons.configuration2.builder.TestJndiBuilderParametersImpl#testSetPrefix:org.apache.commons.configuration2.builder.TestJndiBuilderParametersImpl#testSetContext:org.apache.commons.configuration2.builder.TestJndiBuilderParametersImpl#testGetParametersBaseProperties:org.apache.commons.configuration2.builder.TestJndiBuilderParametersImpl#testSetBeanProperties:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAppend:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testEquals:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testSetNullExpressionEngine:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIsAttributeKey:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIsAttributeKeyWithoutEndMarkers:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testTrimLeft:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testTrimRight:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testTrim:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAppendDelimiters:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAppendDelimitersWithoutEscaping:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAppendWithEscapeFlag:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testConstructAttributeKey:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testConstructAttributeKeyWithoutEndMarkers:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAppendAttribute:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAppendDecoratedAttributeKey:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAppendNullAttributeKey:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAppendIndex:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAppendComplexKey:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testLength:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAttributeName:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIterate:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIterateWithRemove:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIterateStrangeKeys:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIterateEscapedDelimiters:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIterateAlternativeEscapeDelimiter:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIterateWithoutEscapeDelimiter:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIterateWithBrackets:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testAttributeKeyWithIndex:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testIterateAttributeEqualsPropertyDelimiter:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testCommonKey:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testCommonKeyNull:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testDifferenceKeySame:org.apache.commons.configuration2.tree.TestDefaultConfigurationKey#testDifferenceKey:org.apache.commons.configuration2.tree.TestNodeTreeWalker#testWalkNoNodeHandler:org.apache.commons.configuration2.tree.TestNodeTreeWalker#testWalkNoVisitor:org.apache.commons.configuration2.tree.TestNodeTreeWalker#testWalkDFSNoNode:org.apache.commons.configuration2.tree.TestNodeTreeWalker#testWalkDFS:org.apache.commons.configuration2.tree.TestNodeTreeWalker#testWalkDFSTerminate:org.apache.commons.configuration2.tree.TestNodeTreeWalker#testWalkBFSNoNode:org.apache.commons.configuration2.tree.TestNodeTreeWalker#testWalkBFS:org.apache.commons.configuration2.tree.TestNodeTreeWalker#testWalkBFSTerminate:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testQueryReferences:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testQueryReferenceUnknown:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testQueryReferencesAfterUpdate:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testQueryRemovedReferencesEmpty:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testQueryRemovedReferencesAfterRemove:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testRemovedReferencesModify:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testMergeRootWithValue:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testMergeRootOverrideName:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testMergeRootWithAttributes:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testMergeRootReference:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testReplaceRoot:org.apache.commons.configuration2.tree.TestInMemoryNodeModelReferences#testReplaceRootNull:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testAddNodesOnTrackedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testAddNodesOnDetachedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testSetPropertyOnTrackedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testSetPropertyOnDetachedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackedNodeClearedInOperation:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testGetTrackedNodeHandlerActive:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testGetTrackedNodeHandlerDetached:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testReplaceTrackedNodeForActiveTrackedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testReplaceTrackedNodeForDetachedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testReplaceTrackedNodeNull:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testSelectAndTrackNodes:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testSelectAndTrackNodesNoSelection:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testSelectAndTrackNodesNodeAlreadyTracked:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackChildNodes:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackChildNodesNoResults:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackChildNodesMultipleResults:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackChildNodesNodeWithNoChildren:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackChildNodeWithCreationExisting:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackChildNodeWithCreationNonExisting:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackChildNodeWithCreationNoResults:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackChildNodeWithCreationMultipleResults:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackNodeKeyNoResults:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackNodeKeyMultipleResults:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testGetTrackedNodeExisting:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testGetTrackedNodeNonExisting:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testGetTrackedNodeAfterUpdate:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testGetTrackedNodeAfterUpdateNoLongerExisting:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testGetTrackedNodeAfterClear:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testGetTrackedNodeAfterSetRootNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testUntrackNodeNonExisting:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testUntrackNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testTrackNodeMultipleTimes:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testIsDetachedFalseNoUpdates:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testIsDetachedFalseAfterUpdate:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testIsDetachedTrue:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testIsDetachedAfterClear:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testIsDetachedAfterSetRoot:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testClearPropertyOnTrackedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testClearPropertyOnDetachedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testClearTreeOnTrackedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testClearTreeOnDetachedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testAddPropertyOnTrackedNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModelTrackedNodes#testAddPropertyOnDetachedNode:org.apache.commons.configuration2.tree.TestNodeSelector#testToString:org.apache.commons.configuration2.tree.TestNodeSelector#testSelectSingleKeySuccess:org.apache.commons.configuration2.tree.TestNodeSelector#testSelectSingleAttributeKey:org.apache.commons.configuration2.tree.TestNodeSelector#testSelectIgnoreAttributeResults:org.apache.commons.configuration2.tree.TestNodeSelector#testSelectMultipleTargets:org.apache.commons.configuration2.tree.TestNodeSelector#testSelectSubKey:org.apache.commons.configuration2.tree.TestNodeSelector#testSelectSubKeyUnknown:org.apache.commons.configuration2.tree.TestNodeSelector#testSelectSubKeyMultipleResults:org.apache.commons.configuration2.tree.TestNodeSelector#testSelectSubKeyComplexEvaluation:org.apache.commons.configuration2.tree.TestNodeSelector#testEqualsTrue:org.apache.commons.configuration2.tree.TestNodeSelector#testEqualsFalse:org.apache.commons.configuration2.tree.TestNodeSelector#testEqualsOtherObjects:org.apache.commons.configuration2.tree.TestNodeAddData#testPathNodesNull:org.apache.commons.configuration2.tree.TestNodeAddData#testPathNodesNullModify:org.apache.commons.configuration2.tree.TestNodeAddData#testInitPathNodesDefensiveCopy:org.apache.commons.configuration2.tree.TestNodeAddData#testPathNodesDefinedModify:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testAddProperty:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testClear:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testSetProperty:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testClearProperty:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testClearTree:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testAddNodes:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testInitNoSelector:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testSetRootNode:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testGetNodeHandler:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testClose:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testCloseMultipleTimes:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testGetInMemoryRepresentation:org.apache.commons.configuration2.tree.TestTrackedNodeModel#testInitNoParentModel:org.apache.commons.configuration2.tree.TestUnionCombiner#testSimpleValues:org.apache.commons.configuration2.tree.TestUnionCombiner#testSimpleValuesWithAttributes:org.apache.commons.configuration2.tree.TestUnionCombiner#testAttributes:org.apache.commons.configuration2.tree.TestUnionCombiner#testLists:org.apache.commons.configuration2.tree.TestUnionCombiner#testTableList:org.apache.commons.configuration2.tree.TestUnionCombiner#testInit:org.apache.commons.configuration2.tree.xpath.TestConfigurationIteratorAttributes#testIterateAllAttributes:org.apache.commons.configuration2.tree.xpath.TestConfigurationIteratorAttributes#testIterateSpecificAttribute:org.apache.commons.configuration2.tree.xpath.TestConfigurationIteratorAttributes#testIterateUnknownAttribute:org.apache.commons.configuration2.tree.xpath.TestConfigurationIteratorAttributes#testIterateNamespaceUnknown:org.apache.commons.configuration2.tree.xpath.TestConfigurationIteratorAttributes#testIterateNamespaceAttribute:org.apache.commons.configuration2.tree.xpath.TestConfigurationIteratorAttributes#testIterateNamespaceWildcard:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateAllChildren:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateReverse:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateWithWildcardTest:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateWithPrefixTest:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateWithNameTest:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateWithUnknownTest:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateWithNodeType:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateWithUnknownType:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateStartsWith:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateStartsWithReverse:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateStartsWithInvalid:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateWithWildcardTestPrefix:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodeIteratorChildren#testIterateWithMatchingPrefixTest:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngineInConfig#testSetPropertyExisting:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngineInConfig#testSetPropertyPartlyExisting:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngineInConfig#testSetPropertyNewAttribute:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngineInConfig#testSetPropertyNewKey:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngineInConfig#testAddPropertyComplexStructures:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngineInConfig#testPropertiesWithNamespace:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointerFactory#testText:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointerFactory#testSimpleXPath:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointerFactory#testIndices:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointerFactory#testQueryAttribute:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointerFactory#testQueryRootAttribute:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointerFactory#testParentAxis:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointerFactory#testFollowingSiblingAxis:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointerFactory#testPrecedingSiblingAxis:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testNodeKeyForRootNode:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testNodeKeyNoNodeName:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testNodeKeyForRootChild:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testNodeKeyAttribute:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testAttributeKeyOfRootNode:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddAttribute:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddPath:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddAttributePath:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddRootChild:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddRootAttribute:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddInvalidParent:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddEmptyPath:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddNullKey:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddEmptyKey:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddInvalidPath:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddInvalidAttributePath:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddInvalidAttributePath2:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddInvalidPathWithSlash:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddInvalidPathMultipleAttributes:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddToAttributeResult:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testCanonicalKeyNoDuplicates:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testCanonicalKeyWithDuplicates:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testCanonicalKeyNoParentKey:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testCanonicalKeyRootNoParentKey:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testCanonicalKeyRootWithParentKey:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testDefaultContextFactory:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testQueryNodeExpression:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testQueryAttributeExpression:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testQueryWithoutResult:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testQueryWithEmptyKey:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testQueryWithNullKey:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testNodePointerFactory:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testNodeKeyNormal:org.apache.commons.configuration2.tree.xpath.TestXPathExpressionEngine#testPrepareAddNode:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointer#testIsAttribute:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointer#testCompareChildNodePointersChildren:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointer#testCompareChildNodePointersAttributes:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointer#testIsLeave:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointer#testIsLeafTrue:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointer#testIterators:org.apache.commons.configuration2.tree.xpath.TestConfigurationNodePointer#testSetValue:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testIsAttribute:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testSetValue:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testGetParentPointer:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testGetBaseValue:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testGetImmediateNode:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testGetLength:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testGetName:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testIsCollection:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testIsLeaf:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testGetValue:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testAttributeIterator:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testChildIterator:org.apache.commons.configuration2.tree.xpath.TestConfigurationAttributePointer#testTestNode:org.apache.commons.configuration2.tree.xpath.TestXPathContextFactory#testCreateContext:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testGetParentNode:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testGetParentForRoot:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testGetParentInvalidNode:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerName:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerValue:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetChildren:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetChildrenByName:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetChildrenByNameImmutable:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetChildAtIndex:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerIndexOfChild:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerIndexOfUnknownChild:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetChildrenCountAll:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetChildrenCountSpecific:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetAttributes:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetAttributesImmutable:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerHasAttributesTrue:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerHasAttributesFalse:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetAttributeValue:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerIsDefinedChildren:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerIsDefinedAttributes:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerIsDefinedValue:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerIsDefinedFalse:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetMatchingChildren:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetMatchingChildrenImmutable:org.apache.commons.configuration2.tree.TestNodeHandlerDecorator#testNodeHandlerGetMatchingChildrenCount:org.apache.commons.configuration2.tree.TestMergeCombiner#testMerge:org.apache.commons.configuration2.tree.TestMergeCombiner#testSimpleValues:org.apache.commons.configuration2.tree.TestMergeCombiner#testAttributes:org.apache.commons.configuration2.tree.TestMergeCombiner#testOverrideValues:org.apache.commons.configuration2.tree.TestMergeCombiner#testListFromFirstStructure:org.apache.commons.configuration2.tree.TestMergeCombiner#testListFromSecondStructure:org.apache.commons.configuration2.tree.TestMergeCombiner#testCombinedTable:org.apache.commons.configuration2.tree.TestMergeCombiner#testInit:org.apache.commons.configuration2.tree.TestTreeData#testGetParentNode:org.apache.commons.configuration2.tree.TestTreeData#testGetParentForRoot:org.apache.commons.configuration2.tree.TestTreeData#testGetParentInvalidNode:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerName:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerValue:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetChildren:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetChildrenByName:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetChildrenByNameImmutable:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetChildAtIndex:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerIndexOfChild:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerIndexOfUnknownChild:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetChildrenCountAll:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetChildrenCountSpecific:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetAttributes:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetAttributesImmutable:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerHasAttributesTrue:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerHasAttributesFalse:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetAttributeValue:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerIsDefinedChildren:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerIsDefinedAttributes:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerIsDefinedValue:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerIsDefinedFalse:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetMatchingChildren:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetMatchingChildrenImmutable:org.apache.commons.configuration2.tree.TestTreeData#testNodeHandlerGetMatchingChildrenCount:org.apache.commons.configuration2.tree.TestTrackedNodeHandler#testGetParent:org.apache.commons.configuration2.tree.TestTrackedNodeHandler#testGetRootNode:org.apache.commons.configuration2.tree.TestNodeUpdateData#testGetChangedValuesModify:org.apache.commons.configuration2.tree.TestNodeUpdateData#testGetNewValuesModify:org.apache.commons.configuration2.tree.TestNodeUpdateData#testGetRemovedNodesModify:org.apache.commons.configuration2.tree.TestNodeUpdateData#testInitNoData:org.apache.commons.configuration2.tree.TestNodeUpdateData#testInitChangedValuesDefensiveCopy:org.apache.commons.configuration2.tree.TestNodeUpdateData#testInitNewValuesDefensiveCopy:org.apache.commons.configuration2.tree.TestNodeUpdateData#testInitRemovedNodesDefensiveCopy:org.apache.commons.configuration2.tree.TestOverrideCombiner#testSimpleValues:org.apache.commons.configuration2.tree.TestOverrideCombiner#testAttributes:org.apache.commons.configuration2.tree.TestOverrideCombiner#testOverrideValues:org.apache.commons.configuration2.tree.TestOverrideCombiner#testListFromFirstStructure:org.apache.commons.configuration2.tree.TestOverrideCombiner#testListFromSecondStructure:org.apache.commons.configuration2.tree.TestOverrideCombiner#testCombinedTableNoList:org.apache.commons.configuration2.tree.TestOverrideCombiner#testCombinedTableList:org.apache.commons.configuration2.tree.TestOverrideCombiner#testCombineProperties:org.apache.commons.configuration2.tree.TestOverrideCombiner#testInit:org.apache.commons.configuration2.tree.TestDefaultExpressionEngineSymbols#testToString:org.apache.commons.configuration2.tree.TestDefaultExpressionEngineSymbols#testEqualsTrue:org.apache.commons.configuration2.tree.TestDefaultExpressionEngineSymbols#testEqualsFalse:org.apache.commons.configuration2.tree.TestDefaultExpressionEngineSymbols#testDefaultSymbols:org.apache.commons.configuration2.tree.TestDefaultExpressionEngineSymbols#testEqualsNull:org.apache.commons.configuration2.tree.TestDefaultExpressionEngineSymbols#testEqualsOtherClass:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddAttribute:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddNullKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddEmptyKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testCanonicalKeyNoDuplicates:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testCanonicalKeyWithDuplicates:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testCanonicalKeyNoParentKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testCanonicalKeyRootNoParentKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testCanonicalKeyRootWithParentKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryRootAttribute:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testDefaultSymbols:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddWithAlternativeMatcher:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testInitNoSymbols:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryKeys:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryNodes:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryNonExistingKeys:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryEscapedKeys:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryAttributeEmulation:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryRootNodeNullKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryRootNodeEmptyKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryAlternativeSyntax:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testNodeKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testNodeKeyWithRoot:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testAttributeKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testAttributeKeyRoot:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testAttributeKeyNoParent:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testNodeKeyWithEscapedDelimiters:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testNodeKeyWithAlternativeSyntax:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testAttributeKeyWithAlternativeSyntax:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testNodeKeyWithAlternativeSyntaxAttributePropertyDelimiter:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddDirectly:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddWithIndex:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddAttributeRoot:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddWithPath:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddWithSameAttributeDelimiter:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddWithAlternativeSyntax:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddInvalidKey:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testPrepareAddInvalidKeyAttribute:org.apache.commons.configuration2.tree.TestDefaultExpressionEngine#testQueryKeyWithAlternativeMatcher:org.apache.commons.configuration2.tree.TestNodeNameMatchers#testEqualsMatch:org.apache.commons.configuration2.tree.TestNodeNameMatchers#testEqualsNoMatch:org.apache.commons.configuration2.tree.TestNodeNameMatchers#testEqualsNullCriterion:org.apache.commons.configuration2.tree.TestNodeNameMatchers#testEqualsIgnoreCaseMatch:org.apache.commons.configuration2.tree.TestNodeNameMatchers#testEqualsIgnoreCaseNoMatch:org.apache.commons.configuration2.tree.TestNodeNameMatchers#testEqualsIgnoreCaseNullCriterion:org.apache.commons.configuration2.tree.TestQueryResult#testEqualsTrue:org.apache.commons.configuration2.tree.TestQueryResult#testEqualsFalse:org.apache.commons.configuration2.tree.TestQueryResult#testEqualsOtherObjects:org.apache.commons.configuration2.tree.TestQueryResult#testIsAttributeResultTrue:org.apache.commons.configuration2.tree.TestQueryResult#testIsAttributeResultFalse:org.apache.commons.configuration2.tree.TestQueryResult#testGetAttributeValue:org.apache.commons.configuration2.tree.TestQueryResult#testGetAttributeValueNoAttributeResult:org.apache.commons.configuration2.tree.TestQueryResult#testToStringNodeResult:org.apache.commons.configuration2.tree.TestQueryResult#testToStringAttributeResult:org.apache.commons.configuration2.tree.TestImmutableNode#testSetAttribute:org.apache.commons.configuration2.tree.TestImmutableNode#testSetValue:org.apache.commons.configuration2.tree.TestImmutableNode#testSimpleProperties:org.apache.commons.configuration2.tree.TestImmutableNode#testChildrenImmutable:org.apache.commons.configuration2.tree.TestImmutableNode#testAttributesImmutable:org.apache.commons.configuration2.tree.TestImmutableNode#testNodeWithChildren:org.apache.commons.configuration2.tree.TestImmutableNode#testNodeWithAddMultipleChildren:org.apache.commons.configuration2.tree.TestImmutableNode#testNodeWithNullChild:org.apache.commons.configuration2.tree.TestImmutableNode#testNodeWithChildrenManipulateLater:org.apache.commons.configuration2.tree.TestImmutableNode#testAddChildrenNull:org.apache.commons.configuration2.tree.TestImmutableNode#testAddChildrenNullElement:org.apache.commons.configuration2.tree.TestImmutableNode#testNodeWithAttributes:org.apache.commons.configuration2.tree.TestImmutableNode#testNodeWithAttributesManipulateLater:org.apache.commons.configuration2.tree.TestImmutableNode#testNodeWithMultipleAttributes:org.apache.commons.configuration2.tree.TestImmutableNode#testAddAttributesNull:org.apache.commons.configuration2.tree.TestImmutableNode#testSetName:org.apache.commons.configuration2.tree.TestImmutableNode#testAddChild:org.apache.commons.configuration2.tree.TestImmutableNode#testGetChildrenByName:org.apache.commons.configuration2.tree.TestImmutableNode#testGetChildrenByNullName:org.apache.commons.configuration2.tree.TestImmutableNode#testGetChildrenByMissingName:org.apache.commons.configuration2.tree.TestImmutableNode#testAddChildNull:org.apache.commons.configuration2.tree.TestImmutableNode#testRemoveChildExisting:org.apache.commons.configuration2.tree.TestImmutableNode#testRemoveChildMultiple:org.apache.commons.configuration2.tree.TestImmutableNode#testRemoveChildNodeNotExisting:org.apache.commons.configuration2.tree.TestImmutableNode#testReplaceChildExisting:org.apache.commons.configuration2.tree.TestImmutableNode#testReplaceChildNotExisting:org.apache.commons.configuration2.tree.TestImmutableNode#testReplaceChildNull:org.apache.commons.configuration2.tree.TestImmutableNode#testSetAttributeOverride:org.apache.commons.configuration2.tree.TestImmutableNode#testSetAttributes:org.apache.commons.configuration2.tree.TestImmutableNode#testSetAttributesEmpty:org.apache.commons.configuration2.tree.TestImmutableNode#testSetAttributesNull:org.apache.commons.configuration2.tree.TestImmutableNode#testRemoveAttributeExisting:org.apache.commons.configuration2.tree.TestImmutableNode#testRemoveAttributeNotExisting:org.apache.commons.configuration2.tree.TestImmutableNode#testReplaceChildren:org.apache.commons.configuration2.tree.TestImmutableNode#testReplaceChildrenNullCollection:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClear:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testGetNodeHandler:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testGetInMemoryRepresentation:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testInitDefaultRoot:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testGetRootNodeFromConstructor:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddPropertyWithPathNodes:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddPropertyNoPathNodes:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddPropertyUpdateParentReferences:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddPropertyAttributeWithPathNodes:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddPropertyAttributeWithSinglePathNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddPropertyAttributeNoPathNodes:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddPropertyNoValues:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeNodes:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeNodeRemovedFromParentMapping:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeChildrenRemovedFromParentMapping:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeUpdateParentReferences:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeRemoveUndefinedNodes:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeResultIsEmpty:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeAttribute:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeNodesAndAttributes:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeNonExistingKey:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearTreeRootNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testCompactReplacementMapping:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testConcurrentUpdate:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearPropertyNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearPropertyAttribute:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testClearPropertyNonExisting:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testSetPropertyNewValues:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testSetPropertyClearValues:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testSetPropertyChangedValues:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testSetPropertyNoChanges:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddNodesToExistingNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddNodesToNewNode:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddNodesToAttribute:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddNodesToNewAttributeKey:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddNodesNullCollection:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testAddNodesEmptyCollection:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testSetRoot:org.apache.commons.configuration2.tree.TestInMemoryNodeModel#testSetRootNull:org.apache.commons.configuration2.TestSubnodeConfiguration#testClone:org.apache.commons.configuration2.TestSubnodeConfiguration#testGetKeys:org.apache.commons.configuration2.TestSubnodeConfiguration#testAddProperty:org.apache.commons.configuration2.TestSubnodeConfiguration#testSetProperty:org.apache.commons.configuration2.TestSubnodeConfiguration#testSetExpressionEngine:org.apache.commons.configuration2.TestSubnodeConfiguration#testInterpolation:org.apache.commons.configuration2.TestSubnodeConfiguration#testInterpolator:org.apache.commons.configuration2.TestSubnodeConfiguration#testGetNodeModel:org.apache.commons.configuration2.TestSubnodeConfiguration#testLocalLookupsInInterpolatorAreInherited:org.apache.commons.configuration2.TestSubnodeConfiguration#testSetThrowExceptionOnMissing:org.apache.commons.configuration2.TestSubnodeConfiguration#testClose:org.apache.commons.configuration2.TestSubnodeConfiguration#testInitSubNodeConfig:org.apache.commons.configuration2.TestSubnodeConfiguration#testInitSubNodeConfigWithNullParent:org.apache.commons.configuration2.TestSubnodeConfiguration#testInitSubNodeConfigWithNullNode:org.apache.commons.configuration2.TestSubnodeConfiguration#testGetProperties:org.apache.commons.configuration2.TestSubnodeConfiguration#testSetThrowExceptionOnMissingAffectsParent:org.apache.commons.configuration2.TestSubnodeConfiguration#testSetListDelimiterHandler:org.apache.commons.configuration2.TestSubnodeConfiguration#testConfiguarationAtNoUpdates:org.apache.commons.configuration2.TestSubnodeConfiguration#testConfigurationAtWithUpdateSupport:org.apache.commons.configuration2.TestSubnodeConfiguration#testInterpolationFromConfigurationAtNoUpdateSupport:org.apache.commons.configuration2.TestSubnodeConfiguration#testInterpolationFromConfigurationAtWithUpdateSupport:org.apache.commons.configuration2.TestSubnodeConfiguration#testLocalInterpolationFromConfigurationAt:org.apache.commons.configuration2.TestSubnodeConfiguration#testParentChangeDetach:org.apache.commons.configuration2.TestSubnodeConfiguration#testParentChangeDetatchException:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testThrowExceptionOnMissing:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testContainsKey:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testGetKeys:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testIsEmpty:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testSimpleGet:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testMoreGets:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testGetMissingKey:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testClearProperty:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testGetMissingKeyWithDefault:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testGetKeysWithUnknownPrefix:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testGetKeysWithExistingPrefix:org.apache.commons.configuration2.TestNullJNDIEnvironmentValues#testGetKeysWithKeyAsPrefix:org.apache.commons.configuration2.TestXMLPropertiesConfiguration#testSave:org.apache.commons.configuration2.TestXMLPropertiesConfiguration#testLoad:org.apache.commons.configuration2.TestXMLPropertiesConfiguration#testDOMLoad:org.apache.commons.configuration2.TestXMLPropertiesConfiguration#testDOMSave  --coverage-detail DETAIL_COMPRESSED --nb-failing-load-class 0
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
07:12:14.889 [main] ERROR org.apache.commons.configuration2.reloading.TestVFSFileHandlerReloadingDetector$1 - Unable to get last modified time forsomeURI
org.apache.commons.vfs2.FileSystemException: Unknown message with code "error".
	at org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:46) ~[easymock-4.1.jar:4.1]
	at org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:101) ~[easymock-4.1.jar:4.1]
	at com.sun.proxy.$Proxy30.getContent(Unknown Source) ~[?:?]
	at org.apache.commons.configuration2.reloading.VFSFileHandlerReloadingDetector.getLastModificationDate(VFSFileHandlerReloadingDetector.java:101) ~[classes/:?]
	at org.apache.commons.configuration2.reloading.TestVFSFileHandlerReloadingDetector.testLastModificationDateFileSystemEx(TestVFSFileHandlerReloadingDetector.java:145) ~[test-classes/:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.Suite.runChild(Suite.java:128) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.Suite.runChild(Suite.java:27) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306) ~[junit-4.13.2.jar:4.13.2]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413) ~[junit-4.13.2.jar:4.13.2]
	at eu.stamp_project.testrunner.runner.JUnit4Runner.run(JUnit4Runner.java:73) ~[nopol-0.2-SNAPSHOT-jar-with-dependencies.jar:?]
	at eu.stamp_project.testrunner.runner.coverage.JUnit4OnlineJacocoRunner.executeCoveredTestPerTestMethod(JUnit4OnlineJacocoRunner.java:39) ~[nopol-0.2-SNAPSHOT-jar-with-dependencies.jar:?]
	at eu.stamp_project.testrunner.runner.coverage.JacocoOnlineRunner.runCoveredTestResultPerTestMethod(JacocoOnlineRunner.java:57) ~[nopol-0.2-SNAPSHOT-jar-with-dependencies.jar:?]
	at eu.stamp_project.testrunner.runner.coverage.JUnit4OnlineJacocoRunner.main(JUnit4OnlineJacocoRunner.java:59) ~[nopol-0.2-SNAPSHOT-jar-with-dependencies.jar:?]
[0] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[33] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[54] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[110] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[129] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[152] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[196] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[213] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[229] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[264] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[291] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[305] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[415] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[430] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[615] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[643] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[658] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[672] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[698] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[712] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[726] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[893] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1170] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1184] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1211] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1225] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1239] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1265] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1499] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1888] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1913] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1930] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1943] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1970] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1983] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[1997] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[2022] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[2037] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[2050] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[2080] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[2365] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[2382] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3652] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3672] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3699] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3724] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3738] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3752] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3778] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3792] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3806] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3834] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3848] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3864] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3890] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3906] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3921] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3953] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3970] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[3984] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4008] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4021] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4038] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4064] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4080] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4093] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4116] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4130] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4145] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4168] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4185] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4198] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4219] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4232] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4245] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4269] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4284] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4297] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4325] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4338] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4352] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4384] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4398] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4411] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4435] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4449] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4462] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4487] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4500] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4513] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4536] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4549] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4561] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4583] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4596] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4610] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4637] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4650] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4665] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4690] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4703] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4717] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4747] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4764] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4779] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4806] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4822] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[4843] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9782] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9799] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9814] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9835] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9850] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9864] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9888] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9901] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9913] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9934] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9946] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9962] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9983] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[9996] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10009] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10030] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10043] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10055] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10074] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10089] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10104] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10126] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10138] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
[10151] WARN AbstractTableMetaData - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'HSQL Database Engine' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
File saved to the following path: /apiarty/data/VUL4J-9/apache/commons-configuration/target/CoveredTestResultPerTest.dat
[295733] WARN CoverageRunner - Test [Manual]TestMethod=org.apache.commons.configuration2.convert.TestPropertyConverter#testToBigDecimalStringConstructor result was not reported by test-runner.
[299220] WARN CoverageRunner - Test [Manual]TestMethod=org.apache.commons.configuration2.convert.TestPropertyConverter#testToBigDecimalStringConstructor result was not reported by test-runner.
[300749] INFO CoverageRunner - Tests found: 5658
[300750] INFO CoverageRunner - Tests executed: 5656
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[307072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:212.
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[308349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:210.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[309321] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:210.
146864528
146864528
146864528
146864528
146864528
146864528
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[310818] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.YAMLConfiguration:70.
146864528
146864528
146864528
146864528
2064407578
2064407578
-1269566003
-1269566003
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[312656] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:197.
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[313742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:195.
-1269566003
-1269566003
-1269566003
-1269566003
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[315113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:178.
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[316141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:176.
-1269566003
-1269566003
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[317244] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:172.
-1269566003
-1269566003
-1269566003
[318370] ERROR DynamicClassCompiler - [Compilation errors]
AbstractYAMLBasedConfiguration.java:65: error: missing return statement
    }
    ^
Note: AbstractYAMLBasedConfiguration.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
[318443] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class AbstractYAMLBasedConfiguration extends org.apache.commons.configuration2.BaseHierarchicalConfiguration {
    protected AbstractYAMLBasedConfiguration() {
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected AbstractYAMLBasedConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        super(c);
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected void load(final java.util.Map<java.lang.String, java.lang.Object> map) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> roots = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy("", map);
        getNodeModel().setRootNode(roots.get(0));
    }

    protected java.util.Map<java.lang.String, java.lang.Object> constructMap(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(node.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode cNode : node.getChildren()) {
            final java.lang.Object value = (cNode.getChildren().isEmpty()) ? cNode.getValue() : constructMap(cNode);
            org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.addEntry(map, cNode.getNodeName(), value);
        }
        return map;
    }

    private static void addEntry(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key, final java.lang.Object value) {
        final java.lang.Object oldValue = map.get(key);
        if (oldValue == null) {
            map.put(key, value);
        } else if (oldValue instanceof java.util.Collection) {
            @java.lang.SuppressWarnings("unchecked")
            final java.util.Collection<java.lang.Object> values = ((java.util.Collection<java.lang.Object>) (oldValue));
            values.add(value);
        } else {
            final java.util.Collection<java.lang.Object> values = new java.util.ArrayList<>();
            values.add(oldValue);
            values.add(value);
            map.put(key, values);
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> constructHierarchy(final java.lang.String key, final java.lang.Object elem) {
        if (elem instanceof java.util.Map) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseMap(((java.util.Map<java.lang.String, java.lang.Object>) (elem)), key);
        } else if (elem instanceof java.util.Collection) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseCollection(((java.util.Collection<java.lang.Object>) (elem)), key);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(9).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("elem",elem);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("key",key);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.util.Collections.singletonList(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key).value(elem).create());

        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseMap(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder subtree = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key);
        for (final java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(entry.getKey(), entry.getValue());
            for (final org.apache.commons.configuration2.tree.ImmutableNode child : children) {
                subtree.addChild(child);
            }
        }
        return java.util.Collections.singletonList(subtree.create());
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseCollection(final java.util.Collection<java.lang.Object> col, final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.ArrayList<>(col.size());
        for (final java.lang.Object elem : col) {
            nodes.addAll(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(key, elem));
        }
        return nodes;
    }

    static void rethrowException(final java.lang.Exception e) throws org.apache.commons.configuration2.ex.ConfigurationException {
        if (e instanceof java.lang.ClassCastException) {
            throw new org.apache.commons.configuration2.ex.ConfigurationException("Error parsing", e);
        }
        throw new org.apache.commons.configuration2.ex.ConfigurationException("Unable to load the configuration", e);
    }
}
[318445] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1269566003
[319213] ERROR DynamicClassCompiler - [Compilation errors]
AbstractYAMLBasedConfiguration.java:65: error: missing return statement
    }
    ^
Note: AbstractYAMLBasedConfiguration.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
[319274] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class AbstractYAMLBasedConfiguration extends org.apache.commons.configuration2.BaseHierarchicalConfiguration {
    protected AbstractYAMLBasedConfiguration() {
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected AbstractYAMLBasedConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        super(c);
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected void load(final java.util.Map<java.lang.String, java.lang.Object> map) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> roots = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy("", map);
        getNodeModel().setRootNode(roots.get(0));
    }

    protected java.util.Map<java.lang.String, java.lang.Object> constructMap(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(node.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode cNode : node.getChildren()) {
            final java.lang.Object value = (cNode.getChildren().isEmpty()) ? cNode.getValue() : constructMap(cNode);
            org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.addEntry(map, cNode.getNodeName(), value);
        }
        return map;
    }

    private static void addEntry(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key, final java.lang.Object value) {
        final java.lang.Object oldValue = map.get(key);
        if (oldValue == null) {
            map.put(key, value);
        } else if (oldValue instanceof java.util.Collection) {
            @java.lang.SuppressWarnings("unchecked")
            final java.util.Collection<java.lang.Object> values = ((java.util.Collection<java.lang.Object>) (oldValue));
            values.add(value);
        } else {
            final java.util.Collection<java.lang.Object> values = new java.util.ArrayList<>();
            values.add(oldValue);
            values.add(value);
            map.put(key, values);
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> constructHierarchy(final java.lang.String key, final java.lang.Object elem) {
        if (elem instanceof java.util.Map) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseMap(((java.util.Map<java.lang.String, java.lang.Object>) (elem)), key);
        } else if (elem instanceof java.util.Collection) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(10).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("elem",elem);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("key",key);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionEnds();
            }
            if (runtimeAngelicValue)
                return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseCollection(((java.util.Collection<java.lang.Object>) (elem)), key);

        } else {
            return java.util.Collections.singletonList(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key).value(elem).create());
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseMap(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder subtree = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key);
        for (final java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(entry.getKey(), entry.getValue());
            for (final org.apache.commons.configuration2.tree.ImmutableNode child : children) {
                subtree.addChild(child);
            }
        }
        return java.util.Collections.singletonList(subtree.create());
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseCollection(final java.util.Collection<java.lang.Object> col, final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.ArrayList<>(col.size());
        for (final java.lang.Object elem : col) {
            nodes.addAll(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(key, elem));
        }
        return nodes;
    }

    static void rethrowException(final java.lang.Exception e) throws org.apache.commons.configuration2.ex.ConfigurationException {
        if (e instanceof java.lang.ClassCastException) {
            throw new org.apache.commons.configuration2.ex.ConfigurationException("Error parsing", e);
        }
        throw new org.apache.commons.configuration2.ex.ConfigurationException("Unable to load the configuration", e);
    }
}
[319276] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1269566003
[319932] ERROR DynamicClassCompiler - [Compilation errors]
AbstractYAMLBasedConfiguration.java:66: error: missing return statement
    }
    ^
Note: AbstractYAMLBasedConfiguration.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
[319969] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class AbstractYAMLBasedConfiguration extends org.apache.commons.configuration2.BaseHierarchicalConfiguration {
    protected AbstractYAMLBasedConfiguration() {
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected AbstractYAMLBasedConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        super(c);
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected void load(final java.util.Map<java.lang.String, java.lang.Object> map) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> roots = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy("", map);
        getNodeModel().setRootNode(roots.get(0));
    }

    protected java.util.Map<java.lang.String, java.lang.Object> constructMap(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(node.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode cNode : node.getChildren()) {
            final java.lang.Object value = (cNode.getChildren().isEmpty()) ? cNode.getValue() : constructMap(cNode);
            org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.addEntry(map, cNode.getNodeName(), value);
        }
        return map;
    }

    private static void addEntry(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key, final java.lang.Object value) {
        final java.lang.Object oldValue = map.get(key);
        if (oldValue == null) {
            map.put(key, value);
        } else if (oldValue instanceof java.util.Collection) {
            @java.lang.SuppressWarnings("unchecked")
            final java.util.Collection<java.lang.Object> values = ((java.util.Collection<java.lang.Object>) (oldValue));
            values.add(value);
        } else {
            final java.util.Collection<java.lang.Object> values = new java.util.ArrayList<>();
            values.add(oldValue);
            values.add(value);
            map.put(key, values);
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> constructHierarchy(final java.lang.String key, final java.lang.Object elem) {
        if (elem instanceof java.util.Map) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseMap(((java.util.Map<java.lang.String, java.lang.Object>) (elem)), key);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(11).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("elem",elem);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("key",key);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("elem instanceof java.util.Collection",elem instanceof java.util.Collection);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionEnds();
            }
            if (runtimeAngelicValue) if (elem instanceof java.util.Collection) {
                return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseCollection(((java.util.Collection<java.lang.Object>) (elem)), key);
            } else {
                return java.util.Collections.singletonList(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key).value(elem).create());
            }
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseMap(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder subtree = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key);
        for (final java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(entry.getKey(), entry.getValue());
            for (final org.apache.commons.configuration2.tree.ImmutableNode child : children) {
                subtree.addChild(child);
            }
        }
        return java.util.Collections.singletonList(subtree.create());
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseCollection(final java.util.Collection<java.lang.Object> col, final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.ArrayList<>(col.size());
        for (final java.lang.Object elem : col) {
            nodes.addAll(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(key, elem));
        }
        return nodes;
    }

    static void rethrowException(final java.lang.Exception e) throws org.apache.commons.configuration2.ex.ConfigurationException {
        if (e instanceof java.lang.ClassCastException) {
            throw new org.apache.commons.configuration2.ex.ConfigurationException("Error parsing", e);
        }
        throw new org.apache.commons.configuration2.ex.ConfigurationException("Unable to load the configuration", e);
    }
}
[319971] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[320814] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:150.
-1269566003
[321362] ERROR DynamicClassCompiler - [Compilation errors]
AbstractYAMLBasedConfiguration.java:65: error: missing return statement
    }
    ^
Note: AbstractYAMLBasedConfiguration.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
[321402] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class AbstractYAMLBasedConfiguration extends org.apache.commons.configuration2.BaseHierarchicalConfiguration {
    protected AbstractYAMLBasedConfiguration() {
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected AbstractYAMLBasedConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        super(c);
        initLogger(new org.apache.commons.configuration2.io.ConfigurationLogger(getClass()));
    }

    protected void load(final java.util.Map<java.lang.String, java.lang.Object> map) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> roots = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy("", map);
        getNodeModel().setRootNode(roots.get(0));
    }

    protected java.util.Map<java.lang.String, java.lang.Object> constructMap(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(node.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode cNode : node.getChildren()) {
            final java.lang.Object value = (cNode.getChildren().isEmpty()) ? cNode.getValue() : constructMap(cNode);
            org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.addEntry(map, cNode.getNodeName(), value);
        }
        return map;
    }

    private static void addEntry(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key, final java.lang.Object value) {
        final java.lang.Object oldValue = map.get(key);
        if (oldValue == null) {
            map.put(key, value);
        } else if (oldValue instanceof java.util.Collection) {
            @java.lang.SuppressWarnings("unchecked")
            final java.util.Collection<java.lang.Object> values = ((java.util.Collection<java.lang.Object>) (oldValue));
            values.add(value);
        } else {
            final java.util.Collection<java.lang.Object> values = new java.util.ArrayList<>();
            values.add(oldValue);
            values.add(value);
            map.put(key, values);
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> constructHierarchy(final java.lang.String key, final java.lang.Object elem) {
        if (elem instanceof java.util.Map) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("elem",elem);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("key",key);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
            }
            if (runtimeAngelicValue)
                return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseMap(((java.util.Map<java.lang.String, java.lang.Object>) (elem)), key);

        } else if (elem instanceof java.util.Collection) {
            return org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.parseCollection(((java.util.Collection<java.lang.Object>) (elem)), key);
        } else {
            return java.util.Collections.singletonList(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key).value(elem).create());
        }
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseMap(final java.util.Map<java.lang.String, java.lang.Object> map, final java.lang.String key) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder subtree = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(key);
        for (final java.util.Map.Entry<java.lang.String, java.lang.Object> entry : map.entrySet()) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children = org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(entry.getKey(), entry.getValue());
            for (final org.apache.commons.configuration2.tree.ImmutableNode child : children) {
                subtree.addChild(child);
            }
        }
        return java.util.Collections.singletonList(subtree.create());
    }

    private static java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> parseCollection(final java.util.Collection<java.lang.Object> col, final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.ArrayList<>(col.size());
        for (final java.lang.Object elem : col) {
            nodes.addAll(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.constructHierarchy(key, elem));
        }
        return nodes;
    }

    static void rethrowException(final java.lang.Exception e) throws org.apache.commons.configuration2.ex.ConfigurationException {
        if (e instanceof java.lang.ClassCastException) {
            throw new org.apache.commons.configuration2.ex.ConfigurationException("Error parsing", e);
        }
        throw new org.apache.commons.configuration2.ex.ConfigurationException("Unable to load the configuration", e);
    }
}
[321405] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[322335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:146.
-1269566003
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[323281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:77.
-1269566003
-1269566003
-1269566003
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[324528] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractYAMLBasedConfiguration:51.
-1269566003
1404175031
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[325440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTracker:276.
1261542978
1261542978
1261542978
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[326796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.InMemoryNodeModel:395.
1404175031
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[327696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTracker:273.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[328433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTracker:273.
-1323904515
-1077189172
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[329500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractHierarchicalConfiguration:241.
-1077189172
-1077189172
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[330697] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractHierarchicalConfiguration:234.
-382563395
-71692793
-71692793
-71692793
[331213] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
-71692793
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[331853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.io.ConfigurationLogger:236.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[332467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.io.ConfigurationLogger:236.
-1323904515
-1323904515
[333057] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
-1323904515
-1323904515
-1323904515
-1323904515
-1323904515
[334244] ERROR DynamicClassCompiler - [Compilation errors]
BaseHierarchicalConfiguration.java:29: error: variable changeListener might not have been initialized
    }
    ^
[334332] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class BaseHierarchicalConfiguration extends org.apache.commons.configuration2.AbstractHierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> implements org.apache.commons.configuration2.tree.InMemoryNodeModelSupport {
    private final org.apache.commons.configuration2.event.EventListener<org.apache.commons.configuration2.event.ConfigurationEvent> changeListener;

    public BaseHierarchicalConfiguration() {
        this(((org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>) (null)));
    }

    public BaseHierarchicalConfiguration(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        this(org.apache.commons.configuration2.BaseHierarchicalConfiguration.createNodeModel(c));
    }

    protected BaseHierarchicalConfiguration(final org.apache.commons.configuration2.tree.NodeModel<org.apache.commons.configuration2.tree.ImmutableNode> model) {
        super(model);
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(27).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectionEnds();
        }
        if (runtimeAngelicValue)
            changeListener = createChangeListener();

    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.InMemoryNodeModel getNodeModel() {
        return ((org.apache.commons.configuration2.tree.InMemoryNodeModel) (super.getNodeModel()));
    }

    @java.lang.Override
    public org.apache.commons.configuration2.Configuration subset(final java.lang.String prefix) {
        beginRead(false);
        try {
            final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results = fetchNodeList(prefix);
            if (results.isEmpty()) {
                return new org.apache.commons.configuration2.BaseHierarchicalConfiguration();
            }
            final org.apache.commons.configuration2.BaseHierarchicalConfiguration parent = this;
            final org.apache.commons.configuration2.BaseHierarchicalConfiguration result = new org.apache.commons.configuration2.BaseHierarchicalConfiguration() {
                @java.lang.Override
                protected java.lang.Object interpolate(final java.lang.Object value) {
                    return parent.interpolate(value);
                }

                @java.lang.Override
                public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getInterpolator() {
                    return parent.getInterpolator();
                }
            };
            result.getModel().setRootNode(createSubsetRootNode(results));
            if (result.isEmpty()) {
                return new org.apache.commons.configuration2.BaseHierarchicalConfiguration();
            }
            result.setSynchronizer(getSynchronizer());
            return result;
        } finally {
            endRead();
        }
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createSubsetRootNode(final java.util.Collection<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder();
        java.lang.Object value = null;
        int valueCount = 0;
        for (final org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode> result : results) {
            if (result.isAttributeResult()) {
                builder.addAttribute(result.getAttributeName(), result.getAttributeValue(getModel().getNodeHandler()));
            } else {
                if (result.getNode().getValue() != null) {
                    value = result.getNode().getValue();
                    valueCount++;
                }
                builder.addChildren(result.getNode().getChildren());
                builder.addAttributes(result.getNode().getAttributes());
            }
        }
        if (valueCount == 1) {
            builder.value(value);
        }
        return builder.create();
    }

    @java.lang.Override
    public org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> configurationAt(final java.lang.String key, final boolean supportUpdates) {
        beginRead(false);
        try {
            return supportUpdates ? createConnectedSubConfiguration(key) : createIndependentSubConfiguration(key);
        } finally {
            endRead();
        }
    }

    protected org.apache.commons.configuration2.tree.InMemoryNodeModel getSubConfigurationParentModel() {
        return ((org.apache.commons.configuration2.tree.InMemoryNodeModel) (getModel()));
    }

    protected org.apache.commons.configuration2.tree.NodeSelector getSubConfigurationNodeSelector(final java.lang.String key) {
        return new org.apache.commons.configuration2.tree.NodeSelector(key);
    }

    protected org.apache.commons.configuration2.SubnodeConfiguration createSubConfigurationForTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.InMemoryNodeModelSupport parentModelSupport) {
        final org.apache.commons.configuration2.SubnodeConfiguration subConfig = new org.apache.commons.configuration2.SubnodeConfiguration(this, new org.apache.commons.configuration2.tree.TrackedNodeModel(parentModelSupport, selector, true));
        initSubConfigurationForThisParent(subConfig);
        return subConfig;
    }

    protected void initSubConfigurationForThisParent(final org.apache.commons.configuration2.SubnodeConfiguration subConfig) {
        initSubConfiguration(subConfig);
        subConfig.addEventListener(org.apache.commons.configuration2.event.ConfigurationEvent.ANY, changeListener);
    }

    private org.apache.commons.configuration2.BaseHierarchicalConfiguration createConnectedSubConfiguration(final java.lang.String key) {
        final org.apache.commons.configuration2.tree.NodeSelector selector = getSubConfigurationNodeSelector(key);
        getSubConfigurationParentModel().trackNode(selector, this);
        return createSubConfigurationForTrackedNode(selector, this);
    }

    private java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> createConnectedSubConfigurations(final org.apache.commons.configuration2.tree.InMemoryNodeModelSupport parentModelSupport, final java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> selectors) {
        final java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> configs = new java.util.ArrayList<>(selectors.size());
        for (final org.apache.commons.configuration2.tree.NodeSelector selector : selectors) {
            configs.add(createSubConfigurationForTrackedNode(selector, parentModelSupport));
        }
        return configs;
    }

    private org.apache.commons.configuration2.BaseHierarchicalConfiguration createIndependentSubConfiguration(final java.lang.String key) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> targetNodes = fetchFilteredNodeResults(key);
        final int size = targetNodes.size();
        if (size != 1) {
            throw new org.apache.commons.configuration2.ex.ConfigurationRuntimeException("Passed in key must select exactly one node (found %,d): %s", size, key);
        }
        final org.apache.commons.configuration2.BaseHierarchicalConfiguration sub = new org.apache.commons.configuration2.BaseHierarchicalConfiguration(new org.apache.commons.configuration2.tree.InMemoryNodeModel(targetNodes.get(0)));
        initSubConfiguration(sub);
        return sub;
    }

    private org.apache.commons.configuration2.BaseHierarchicalConfiguration createIndependentSubConfigurationForNode(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        final org.apache.commons.configuration2.BaseHierarchicalConfiguration sub = new org.apache.commons.configuration2.BaseHierarchicalConfiguration(new org.apache.commons.configuration2.tree.InMemoryNodeModel(node));
        initSubConfiguration(sub);
        return sub;
    }

    private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> fetchFilteredNodeResults(final java.lang.String key) {
        final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler = getModel().getNodeHandler();
        return resolveNodeKey(handler.getRootNode(), key, handler);
    }

    @java.lang.Override
    public org.apache.commons.configuration2.ImmutableHierarchicalConfiguration immutableConfigurationAt(final java.lang.String key, final boolean supportUpdates) {
        return org.apache.commons.configuration2.ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }

    @java.lang.Override
    public org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> configurationAt(final java.lang.String key) {
        return configurationAt(key, false);
    }

    @java.lang.Override
    public org.apache.commons.configuration2.ImmutableHierarchicalConfiguration immutableConfigurationAt(final java.lang.String key) {
        return org.apache.commons.configuration2.ConfigurationUtils.unmodifiableConfiguration(configurationAt(key));
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> configurationsAt(final java.lang.String key) {
        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }
        final java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> results = new java.util.ArrayList<>(nodes.size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : nodes) {
            final org.apache.commons.configuration2.BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }
        return results;
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> configurationsAt(final java.lang.String key, final boolean supportUpdates) {
        if (!supportUpdates) {
            return configurationsAt(key);
        }
        org.apache.commons.configuration2.tree.InMemoryNodeModel parentModel;
        beginRead(false);
        try {
            parentModel = getSubConfigurationParentModel();
        } finally {
            endRead();
        }
        final java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> selectors = parentModel.selectAndTrackNodes(key, this);
        return createConnectedSubConfigurations(this, selectors);
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.ImmutableHierarchicalConfiguration> immutableConfigurationsAt(final java.lang.String key) {
        return org.apache.commons.configuration2.BaseHierarchicalConfiguration.toImmutable(configurationsAt(key));
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> childConfigurationsAt(final java.lang.String key) {
        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }
        if (nodes.size() != 1) {
            return java.util.Collections.emptyList();
        }
        final org.apache.commons.configuration2.tree.ImmutableNode parent = nodes.get(0);
        final java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> subs = new java.util.ArrayList<>(parent.getChildren().size());
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : parent.getChildren()) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }
        return subs;
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode>> childConfigurationsAt(final java.lang.String key, final boolean supportUpdates) {
        if (!supportUpdates) {
            return childConfigurationsAt(key);
        }
        final org.apache.commons.configuration2.tree.InMemoryNodeModel parentModel = getSubConfigurationParentModel();
        return createConnectedSubConfigurations(this, parentModel.trackChildNodes(key, this));
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.ImmutableHierarchicalConfiguration> immutableChildConfigurationsAt(final java.lang.String key) {
        return org.apache.commons.configuration2.BaseHierarchicalConfiguration.toImmutable(childConfigurationsAt(key));
    }

    protected void subnodeConfigurationChanged(final org.apache.commons.configuration2.event.ConfigurationEvent event) {
        fireEvent(org.apache.commons.configuration2.event.ConfigurationEvent.SUBNODE_CHANGED, null, event, event.isBeforeUpdate());
    }

    private void initSubConfiguration(final org.apache.commons.configuration2.BaseHierarchicalConfiguration sub) {
        sub.setSynchronizer(getSynchronizer());
        sub.setExpressionEngine(getExpressionEngine());
        sub.setListDelimiterHandler(getListDelimiterHandler());
        sub.setThrowExceptionOnMissing(isThrowExceptionOnMissing());
        sub.getInterpolator().setParentInterpolator(getInterpolator());
    }

    private org.apache.commons.configuration2.event.EventListener<org.apache.commons.configuration2.event.ConfigurationEvent> createChangeListener() {
        return ( event) -> subnodeConfigurationChanged(event);
    }

    @java.lang.Override
    public org.apache.commons.configuration2.Configuration interpolatedConfiguration() {
        final org.apache.commons.configuration2.BaseHierarchicalConfiguration.InterpolatedVisitor visitor = new org.apache.commons.configuration2.BaseHierarchicalConfiguration.InterpolatedVisitor();
        final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler = getModel().getNodeHandler();
        org.apache.commons.configuration2.tree.NodeTreeWalker.INSTANCE.walkDFS(handler.getRootNode(), visitor, handler);
        final org.apache.commons.configuration2.BaseHierarchicalConfiguration c = ((org.apache.commons.configuration2.BaseHierarchicalConfiguration) (clone()));
        c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
        return c;
    }

    @java.lang.Override
    protected org.apache.commons.configuration2.tree.NodeModel<org.apache.commons.configuration2.tree.ImmutableNode> cloneNodeModel() {
        return new org.apache.commons.configuration2.tree.InMemoryNodeModel(getModel().getNodeHandler().getRootNode());
    }

    private static java.util.List<org.apache.commons.configuration2.ImmutableHierarchicalConfiguration> toImmutable(final java.util.List<? extends org.apache.commons.configuration2.HierarchicalConfiguration<?>> subs) {
        final java.util.List<org.apache.commons.configuration2.ImmutableHierarchicalConfiguration> res = new java.util.ArrayList<>(subs.size());
        for (final org.apache.commons.configuration2.HierarchicalConfiguration<?> sub : subs) {
            res.add(org.apache.commons.configuration2.ConfigurationUtils.unmodifiableConfiguration(sub));
        }
        return res;
    }

    private static org.apache.commons.configuration2.tree.NodeModel<org.apache.commons.configuration2.tree.ImmutableNode> createNodeModel(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        final org.apache.commons.configuration2.tree.ImmutableNode root = (c != null) ? org.apache.commons.configuration2.BaseHierarchicalConfiguration.obtainRootNode(c) : null;
        return new org.apache.commons.configuration2.tree.InMemoryNodeModel(root);
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode obtainRootNode(final org.apache.commons.configuration2.HierarchicalConfiguration<org.apache.commons.configuration2.tree.ImmutableNode> c) {
        return c.getNodeModel().getNodeHandler().getRootNode();
    }

    protected abstract static class BuilderVisitor extends org.apache.commons.configuration2.tree.ConfigurationNodeVisitorAdapter<org.apache.commons.configuration2.tree.ImmutableNode> {
        @java.lang.Override
        public void visitBeforeChildren(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            final org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler = ((org.apache.commons.configuration2.tree.ReferenceNodeHandler) (handler));
            updateNode(node, refHandler);
            insertNewChildNodes(node, refHandler);
        }

        protected abstract void insert(org.apache.commons.configuration2.tree.ImmutableNode newNode, org.apache.commons.configuration2.tree.ImmutableNode parent, org.apache.commons.configuration2.tree.ImmutableNode sibling1, org.apache.commons.configuration2.tree.ImmutableNode sibling2, org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler);

        protected abstract void update(org.apache.commons.configuration2.tree.ImmutableNode node, java.lang.Object reference, org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler);

        private void updateNode(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler) {
            final java.lang.Object reference = refHandler.getReference(node);
            if (reference != null) {
                update(node, reference, refHandler);
            }
        }

        private void insertNewChildNodes(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.ReferenceNodeHandler refHandler) {
            final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> subNodes = new java.util.LinkedList<>(refHandler.getChildren(node));
            final java.util.Iterator<org.apache.commons.configuration2.tree.ImmutableNode> children = subNodes.iterator();
            org.apache.commons.configuration2.tree.ImmutableNode sibling1;
            org.apache.commons.configuration2.tree.ImmutableNode nd = null;
            while (children.hasNext()) {
                do {
                    sibling1 = nd;
                    nd = children.next();
                } while ((refHandler.getReference(nd) != null) && children.hasNext() );
                if (refHandler.getReference(nd) == null) {
                    final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> newNodes = new java.util.LinkedList<>();
                    newNodes.add(nd);
                    while (children.hasNext()) {
                        nd = children.next();
                        if (refHandler.getReference(nd) == null) {
                            newNodes.add(nd);
                        } else {
                            break;
                        }
                    } 
                    final org.apache.commons.configuration2.tree.ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;
                    for (final org.apache.commons.configuration2.tree.ImmutableNode insertNode : newNodes) {
                        if (refHandler.getReference(insertNode) == null) {
                            insert(insertNode, node, sibling1, sibling2, refHandler);
                            sibling1 = insertNode;
                        }
                    }
                }
            } 
        }
    }

    private class InterpolatedVisitor extends org.apache.commons.configuration2.tree.ConfigurationNodeVisitorAdapter<org.apache.commons.configuration2.tree.ImmutableNode> {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode.Builder> builderStack;

        private org.apache.commons.configuration2.tree.ImmutableNode interpolatedRoot;

        public InterpolatedVisitor() {
            builderStack = new java.util.LinkedList<>();
        }

        public org.apache.commons.configuration2.tree.ImmutableNode getInterpolatedRoot() {
            return interpolatedRoot;
        }

        @java.lang.Override
        public void visitBeforeChildren(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            if (isLeafNode(node, handler)) {
                handleLeafNode(node, handler);
            } else {
                final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(handler.getChildrenCount(node, null)).name(handler.nodeName(node)).value(interpolate(handler.getValue(node))).addAttributes(interpolateAttributes(node, handler));
                push(builder);
            }
        }

        @java.lang.Override
        public void visitAfterChildren(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            if (!isLeafNode(node, handler)) {
                final org.apache.commons.configuration2.tree.ImmutableNode newNode = pop().create();
                storeInterpolatedNode(newNode);
            }
        }

        private void push(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
            builderStack.add(0, builder);
        }

        private org.apache.commons.configuration2.tree.ImmutableNode.Builder pop() {
            return builderStack.remove(0);
        }

        private org.apache.commons.configuration2.tree.ImmutableNode.Builder peek() {
            return builderStack.get(0);
        }

        private boolean isLeafNode(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            return handler.getChildren(node).isEmpty();
        }

        private void handleLeafNode(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            final java.lang.Object value = interpolate(node.getValue());
            final java.util.Map<java.lang.String, java.lang.Object> interpolatedAttributes = new java.util.HashMap<>();
            final boolean attributeChanged = interpolateAttributes(node, handler, interpolatedAttributes);
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = (valueChanged(value, handler.getValue(node)) || attributeChanged) ? new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(handler.nodeName(node)).value(value).addAttributes(interpolatedAttributes).create() : node;
            storeInterpolatedNode(newNode);
        }

        private void storeInterpolatedNode(final org.apache.commons.configuration2.tree.ImmutableNode node) {
            if (builderStack.isEmpty()) {
                interpolatedRoot = node;
            } else {
                peek().addChild(node);
            }
        }

        private boolean interpolateAttributes(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler, final java.util.Map<java.lang.String, java.lang.Object> interpolatedAttributes) {
            boolean attributeChanged = false;
            for (final java.lang.String attr : handler.getAttributes(node)) {
                final java.lang.Object attrValue = interpolate(handler.getAttributeValue(node, attr));
                if (valueChanged(attrValue, handler.getAttributeValue(node, attr))) {
                    attributeChanged = true;
                }
                interpolatedAttributes.put(attr, attrValue);
            }
            return attributeChanged;
        }

        private java.util.Map<java.lang.String, java.lang.Object> interpolateAttributes(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
            final java.util.Map<java.lang.String, java.lang.Object> attributes = new java.util.HashMap<>();
            interpolateAttributes(node, handler, attributes);
            return attributes;
        }

        private boolean valueChanged(final java.lang.Object interpolatedValue, final java.lang.Object value) {
            return org.apache.commons.lang3.ObjectUtils.notEqual(interpolatedValue, value);
        }
    }
}
[334337] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-1323904515
-1323904515
-1323904515
[335092] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
1261542978
-1077189172
-1077189172
-1077189172
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[336417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractHierarchicalConfiguration:192.
-1077189172
1450327177
-1623179977
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[337415] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:153.
-563619195
-563619195
[338042] ERROR DynamicClassCompiler - [Compilation errors]
ImmutableNode.java:29: error: variable value might not have been initialized
    }
    ^
[338099] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class ImmutableNode {
    private final java.lang.String nodeName;

    private final java.lang.Object value;

    private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

    private final java.util.Map<java.lang.String, java.lang.Object> attributes;

    private ImmutableNode(final org.apache.commons.configuration2.tree.ImmutableNode.Builder b) {
        children = b.createChildren();
        attributes = b.createAttributes();
        nodeName = b.name;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(31).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionEnds();
        }
        if (runtimeAngelicValue)
            value = b.value;

    }

    public java.lang.String getNodeName() {
        return nodeName;
    }

    public java.lang.Object getValue() {
        return value;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren() {
        return children;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren(final java.lang.String name) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> list = new java.util.ArrayList<>();
        if (name == null) {
            return list;
        }
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : children) {
            if (name.equals(node.getNodeName())) {
                list.add(node);
            }
        }
        return list;
    }

    public java.util.Map<java.lang.String, java.lang.Object> getAttributes() {
        return attributes;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setName(final java.lang.String name) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(name).value(value).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setValue(final java.lang.Object newValue) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(nodeName).value(newValue).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode addChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(child);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size() + 1, attributes);
        builder.addChildren(children).addChild(child);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == child) {
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChild(final org.apache.commons.configuration2.tree.ImmutableNode oldChild, final org.apache.commons.configuration2.tree.ImmutableNode newChild) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(newChild);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == oldChild) {
                builder.addChild(newChild);
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChildren(final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newChildren) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(null, attributes);
        builder.addChildren(newChildren);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttribute(final java.lang.String name, final java.lang.Object value) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.put(name, value);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttributes(final java.util.Map<java.lang.String, ?> newAttributes) {
        if ((newAttributes == null) || newAttributes.isEmpty()) {
            return this;
        }
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.putAll(newAttributes);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeAttribute(final java.lang.String name) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        if (newAttrs.remove(name) != null) {
            return createWithNewAttributes(newAttrs);
        }
        return this;
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithBasicProperties(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
        return builder.name(nodeName).value(value).create();
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithNewAttributes(final java.util.Map<java.lang.String, java.lang.Object> newAttrs) {
        return createWithBasicProperties(new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, null).addAttributes(newAttrs));
    }

    private static void checkChildNode(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        if (child == null) {
            throw new java.lang.IllegalArgumentException("Child node must not be null!");
        }
    }

    public static final class Builder {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> directChildren;

        private final java.util.Map<java.lang.String, java.lang.Object> directAttributes;

        private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

        private java.util.Map<java.lang.String, java.lang.Object> attributes;

        private java.lang.String name;

        private java.lang.Object value;

        public Builder() {
            this(null, null);
        }

        public Builder(final int childCount) {
            this();
            initChildrenCollection(childCount);
        }

        private Builder(final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> dirChildren, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            directChildren = dirChildren;
            directAttributes = dirAttrs;
        }

        private Builder(final int childCount, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            this(null, dirAttrs);
            initChildrenCollection(childCount);
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder name(final java.lang.String n) {
            name = n;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder value(final java.lang.Object v) {
            value = v;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChild(final org.apache.commons.configuration2.tree.ImmutableNode c) {
            if (c != null) {
                ensureChildrenExist();
                children.add(c);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChildren(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            if (children != null) {
                ensureChildrenExist();
                this.children.addAll(org.apache.commons.configuration2.tree.ImmutableNode.Builder.filterNull(children));
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttribute(final java.lang.String name, final java.lang.Object value) {
            ensureAttributesExist();
            attributes.put(name, value);
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttributes(final java.util.Map<java.lang.String, ?> attrs) {
            if (attrs != null) {
                ensureAttributesExist();
                attributes.putAll(attrs);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode create() {
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode(this);
            children = null;
            attributes = null;
            return newNode;
        }

        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> createChildren() {
            if (directChildren != null) {
                return directChildren;
            }
            if (children != null) {
                return java.util.Collections.unmodifiableList(children);
            }
            return java.util.Collections.emptyList();
        }

        private java.util.Map<java.lang.String, java.lang.Object> createAttributes() {
            if (directAttributes != null) {
                return directAttributes;
            }
            if (attributes != null) {
                return java.util.Collections.unmodifiableMap(attributes);
            }
            return java.util.Collections.emptyMap();
        }

        private void ensureChildrenExist() {
            if (children == null) {
                children = new java.util.LinkedList<>();
            }
        }

        private void ensureAttributesExist() {
            if (attributes == null) {
                attributes = new java.util.HashMap<>();
            }
        }

        private void initChildrenCollection(final int childCount) {
            if (childCount > 0) {
                children = new java.util.ArrayList<>(childCount);
            }
        }

        private static java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> filterNull(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> result = new java.util.ArrayList<>(children.size());
            for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
                if (c != null) {
                    result.add(c);
                }
            }
            return result;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((super.toString() + "(") + nodeName) + ")";
    }
}
[338103] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-563619195
[338641] ERROR DynamicClassCompiler - [Compilation errors]
ImmutableNode.java:29: error: variable nodeName might not have been initialized
    }
    ^
[338693] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class ImmutableNode {
    private final java.lang.String nodeName;

    private final java.lang.Object value;

    private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

    private final java.util.Map<java.lang.String, java.lang.Object> attributes;

    private ImmutableNode(final org.apache.commons.configuration2.tree.ImmutableNode.Builder b) {
        children = b.createChildren();
        attributes = b.createAttributes();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(32).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(32).collectionEnds();
        }
        if (runtimeAngelicValue)
            nodeName = b.name;

        value = b.value;
    }

    public java.lang.String getNodeName() {
        return nodeName;
    }

    public java.lang.Object getValue() {
        return value;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren() {
        return children;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren(final java.lang.String name) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> list = new java.util.ArrayList<>();
        if (name == null) {
            return list;
        }
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : children) {
            if (name.equals(node.getNodeName())) {
                list.add(node);
            }
        }
        return list;
    }

    public java.util.Map<java.lang.String, java.lang.Object> getAttributes() {
        return attributes;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setName(final java.lang.String name) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(name).value(value).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setValue(final java.lang.Object newValue) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(nodeName).value(newValue).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode addChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(child);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size() + 1, attributes);
        builder.addChildren(children).addChild(child);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == child) {
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChild(final org.apache.commons.configuration2.tree.ImmutableNode oldChild, final org.apache.commons.configuration2.tree.ImmutableNode newChild) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(newChild);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == oldChild) {
                builder.addChild(newChild);
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChildren(final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newChildren) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(null, attributes);
        builder.addChildren(newChildren);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttribute(final java.lang.String name, final java.lang.Object value) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.put(name, value);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttributes(final java.util.Map<java.lang.String, ?> newAttributes) {
        if ((newAttributes == null) || newAttributes.isEmpty()) {
            return this;
        }
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.putAll(newAttributes);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeAttribute(final java.lang.String name) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        if (newAttrs.remove(name) != null) {
            return createWithNewAttributes(newAttrs);
        }
        return this;
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithBasicProperties(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
        return builder.name(nodeName).value(value).create();
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithNewAttributes(final java.util.Map<java.lang.String, java.lang.Object> newAttrs) {
        return createWithBasicProperties(new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, null).addAttributes(newAttrs));
    }

    private static void checkChildNode(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        if (child == null) {
            throw new java.lang.IllegalArgumentException("Child node must not be null!");
        }
    }

    public static final class Builder {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> directChildren;

        private final java.util.Map<java.lang.String, java.lang.Object> directAttributes;

        private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

        private java.util.Map<java.lang.String, java.lang.Object> attributes;

        private java.lang.String name;

        private java.lang.Object value;

        public Builder() {
            this(null, null);
        }

        public Builder(final int childCount) {
            this();
            initChildrenCollection(childCount);
        }

        private Builder(final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> dirChildren, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            directChildren = dirChildren;
            directAttributes = dirAttrs;
        }

        private Builder(final int childCount, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            this(null, dirAttrs);
            initChildrenCollection(childCount);
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder name(final java.lang.String n) {
            name = n;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder value(final java.lang.Object v) {
            value = v;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChild(final org.apache.commons.configuration2.tree.ImmutableNode c) {
            if (c != null) {
                ensureChildrenExist();
                children.add(c);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChildren(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            if (children != null) {
                ensureChildrenExist();
                this.children.addAll(org.apache.commons.configuration2.tree.ImmutableNode.Builder.filterNull(children));
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttribute(final java.lang.String name, final java.lang.Object value) {
            ensureAttributesExist();
            attributes.put(name, value);
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttributes(final java.util.Map<java.lang.String, ?> attrs) {
            if (attrs != null) {
                ensureAttributesExist();
                attributes.putAll(attrs);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode create() {
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode(this);
            children = null;
            attributes = null;
            return newNode;
        }

        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> createChildren() {
            if (directChildren != null) {
                return directChildren;
            }
            if (children != null) {
                return java.util.Collections.unmodifiableList(children);
            }
            return java.util.Collections.emptyList();
        }

        private java.util.Map<java.lang.String, java.lang.Object> createAttributes() {
            if (directAttributes != null) {
                return directAttributes;
            }
            if (attributes != null) {
                return java.util.Collections.unmodifiableMap(attributes);
            }
            return java.util.Collections.emptyMap();
        }

        private void ensureChildrenExist() {
            if (children == null) {
                children = new java.util.LinkedList<>();
            }
        }

        private void ensureAttributesExist() {
            if (attributes == null) {
                attributes = new java.util.HashMap<>();
            }
        }

        private void initChildrenCollection(final int childCount) {
            if (childCount > 0) {
                children = new java.util.ArrayList<>(childCount);
            }
        }

        private static java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> filterNull(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> result = new java.util.ArrayList<>(children.size());
            for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
                if (c != null) {
                    result.add(c);
                }
            }
            return result;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((super.toString() + "(") + nodeName) + ")";
    }
}
[338697] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-563619195
[339238] ERROR DynamicClassCompiler - [Compilation errors]
ImmutableNode.java:29: error: variable attributes might not have been initialized
    }
    ^
[339342] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class ImmutableNode {
    private final java.lang.String nodeName;

    private final java.lang.Object value;

    private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

    private final java.util.Map<java.lang.String, java.lang.Object> attributes;

    private ImmutableNode(final org.apache.commons.configuration2.tree.ImmutableNode.Builder b) {
        children = b.createChildren();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(33).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionEnds();
        }
        if (runtimeAngelicValue)
            attributes = b.createAttributes();

        nodeName = b.name;
        value = b.value;
    }

    public java.lang.String getNodeName() {
        return nodeName;
    }

    public java.lang.Object getValue() {
        return value;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren() {
        return children;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren(final java.lang.String name) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> list = new java.util.ArrayList<>();
        if (name == null) {
            return list;
        }
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : children) {
            if (name.equals(node.getNodeName())) {
                list.add(node);
            }
        }
        return list;
    }

    public java.util.Map<java.lang.String, java.lang.Object> getAttributes() {
        return attributes;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setName(final java.lang.String name) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(name).value(value).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setValue(final java.lang.Object newValue) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(nodeName).value(newValue).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode addChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(child);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size() + 1, attributes);
        builder.addChildren(children).addChild(child);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == child) {
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChild(final org.apache.commons.configuration2.tree.ImmutableNode oldChild, final org.apache.commons.configuration2.tree.ImmutableNode newChild) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(newChild);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == oldChild) {
                builder.addChild(newChild);
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChildren(final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newChildren) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(null, attributes);
        builder.addChildren(newChildren);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttribute(final java.lang.String name, final java.lang.Object value) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.put(name, value);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttributes(final java.util.Map<java.lang.String, ?> newAttributes) {
        if ((newAttributes == null) || newAttributes.isEmpty()) {
            return this;
        }
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.putAll(newAttributes);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeAttribute(final java.lang.String name) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        if (newAttrs.remove(name) != null) {
            return createWithNewAttributes(newAttrs);
        }
        return this;
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithBasicProperties(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
        return builder.name(nodeName).value(value).create();
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithNewAttributes(final java.util.Map<java.lang.String, java.lang.Object> newAttrs) {
        return createWithBasicProperties(new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, null).addAttributes(newAttrs));
    }

    private static void checkChildNode(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        if (child == null) {
            throw new java.lang.IllegalArgumentException("Child node must not be null!");
        }
    }

    public static final class Builder {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> directChildren;

        private final java.util.Map<java.lang.String, java.lang.Object> directAttributes;

        private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

        private java.util.Map<java.lang.String, java.lang.Object> attributes;

        private java.lang.String name;

        private java.lang.Object value;

        public Builder() {
            this(null, null);
        }

        public Builder(final int childCount) {
            this();
            initChildrenCollection(childCount);
        }

        private Builder(final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> dirChildren, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            directChildren = dirChildren;
            directAttributes = dirAttrs;
        }

        private Builder(final int childCount, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            this(null, dirAttrs);
            initChildrenCollection(childCount);
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder name(final java.lang.String n) {
            name = n;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder value(final java.lang.Object v) {
            value = v;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChild(final org.apache.commons.configuration2.tree.ImmutableNode c) {
            if (c != null) {
                ensureChildrenExist();
                children.add(c);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChildren(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            if (children != null) {
                ensureChildrenExist();
                this.children.addAll(org.apache.commons.configuration2.tree.ImmutableNode.Builder.filterNull(children));
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttribute(final java.lang.String name, final java.lang.Object value) {
            ensureAttributesExist();
            attributes.put(name, value);
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttributes(final java.util.Map<java.lang.String, ?> attrs) {
            if (attrs != null) {
                ensureAttributesExist();
                attributes.putAll(attrs);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode create() {
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode(this);
            children = null;
            attributes = null;
            return newNode;
        }

        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> createChildren() {
            if (directChildren != null) {
                return directChildren;
            }
            if (children != null) {
                return java.util.Collections.unmodifiableList(children);
            }
            return java.util.Collections.emptyList();
        }

        private java.util.Map<java.lang.String, java.lang.Object> createAttributes() {
            if (directAttributes != null) {
                return directAttributes;
            }
            if (attributes != null) {
                return java.util.Collections.unmodifiableMap(attributes);
            }
            return java.util.Collections.emptyMap();
        }

        private void ensureChildrenExist() {
            if (children == null) {
                children = new java.util.LinkedList<>();
            }
        }

        private void ensureAttributesExist() {
            if (attributes == null) {
                attributes = new java.util.HashMap<>();
            }
        }

        private void initChildrenCollection(final int childCount) {
            if (childCount > 0) {
                children = new java.util.ArrayList<>(childCount);
            }
        }

        private static java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> filterNull(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> result = new java.util.ArrayList<>(children.size());
            for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
                if (c != null) {
                    result.add(c);
                }
            }
            return result;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((super.toString() + "(") + nodeName) + ")";
    }
}
[339346] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-563619195
[340044] ERROR DynamicClassCompiler - [Compilation errors]
ImmutableNode.java:29: error: variable children might not have been initialized
    }
    ^
[340095] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class ImmutableNode {
    private final java.lang.String nodeName;

    private final java.lang.Object value;

    private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

    private final java.util.Map<java.lang.String, java.lang.Object> attributes;

    private ImmutableNode(final org.apache.commons.configuration2.tree.ImmutableNode.Builder b) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(34).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectionEnds();
        }
        if (runtimeAngelicValue)
            children = b.createChildren();

        attributes = b.createAttributes();
        nodeName = b.name;
        value = b.value;
    }

    public java.lang.String getNodeName() {
        return nodeName;
    }

    public java.lang.Object getValue() {
        return value;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren() {
        return children;
    }

    public java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> getChildren(final java.lang.String name) {
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> list = new java.util.ArrayList<>();
        if (name == null) {
            return list;
        }
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : children) {
            if (name.equals(node.getNodeName())) {
                list.add(node);
            }
        }
        return list;
    }

    public java.util.Map<java.lang.String, java.lang.Object> getAttributes() {
        return attributes;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setName(final java.lang.String name) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(name).value(value).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setValue(final java.lang.Object newValue) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, attributes).name(nodeName).value(newValue).create();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode addChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(child);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size() + 1, attributes);
        builder.addChildren(children).addChild(child);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeChild(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == child) {
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChild(final org.apache.commons.configuration2.tree.ImmutableNode oldChild, final org.apache.commons.configuration2.tree.ImmutableNode newChild) {
        org.apache.commons.configuration2.tree.ImmutableNode.checkChildNode(newChild);
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children.size(), attributes);
        boolean foundChild = false;
        for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
            if (c == oldChild) {
                builder.addChild(newChild);
                foundChild = true;
            } else {
                builder.addChild(c);
            }
        }
        return foundChild ? createWithBasicProperties(builder) : this;
    }

    public org.apache.commons.configuration2.tree.ImmutableNode replaceChildren(final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newChildren) {
        final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(null, attributes);
        builder.addChildren(newChildren);
        return createWithBasicProperties(builder);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttribute(final java.lang.String name, final java.lang.Object value) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.put(name, value);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode setAttributes(final java.util.Map<java.lang.String, ?> newAttributes) {
        if ((newAttributes == null) || newAttributes.isEmpty()) {
            return this;
        }
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        newAttrs.putAll(newAttributes);
        return createWithNewAttributes(newAttrs);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode removeAttribute(final java.lang.String name) {
        final java.util.Map<java.lang.String, java.lang.Object> newAttrs = new java.util.HashMap<>(attributes);
        if (newAttrs.remove(name) != null) {
            return createWithNewAttributes(newAttrs);
        }
        return this;
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithBasicProperties(final org.apache.commons.configuration2.tree.ImmutableNode.Builder builder) {
        return builder.name(nodeName).value(value).create();
    }

    private org.apache.commons.configuration2.tree.ImmutableNode createWithNewAttributes(final java.util.Map<java.lang.String, java.lang.Object> newAttrs) {
        return createWithBasicProperties(new org.apache.commons.configuration2.tree.ImmutableNode.Builder(children, null).addAttributes(newAttrs));
    }

    private static void checkChildNode(final org.apache.commons.configuration2.tree.ImmutableNode child) {
        if (child == null) {
            throw new java.lang.IllegalArgumentException("Child node must not be null!");
        }
    }

    public static final class Builder {
        private final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> directChildren;

        private final java.util.Map<java.lang.String, java.lang.Object> directAttributes;

        private java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> children;

        private java.util.Map<java.lang.String, java.lang.Object> attributes;

        private java.lang.String name;

        private java.lang.Object value;

        public Builder() {
            this(null, null);
        }

        public Builder(final int childCount) {
            this();
            initChildrenCollection(childCount);
        }

        private Builder(final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> dirChildren, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            directChildren = dirChildren;
            directAttributes = dirAttrs;
        }

        private Builder(final int childCount, final java.util.Map<java.lang.String, java.lang.Object> dirAttrs) {
            this(null, dirAttrs);
            initChildrenCollection(childCount);
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder name(final java.lang.String n) {
            name = n;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder value(final java.lang.Object v) {
            value = v;
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChild(final org.apache.commons.configuration2.tree.ImmutableNode c) {
            if (c != null) {
                ensureChildrenExist();
                children.add(c);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addChildren(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            if (children != null) {
                ensureChildrenExist();
                this.children.addAll(org.apache.commons.configuration2.tree.ImmutableNode.Builder.filterNull(children));
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttribute(final java.lang.String name, final java.lang.Object value) {
            ensureAttributesExist();
            attributes.put(name, value);
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode.Builder addAttributes(final java.util.Map<java.lang.String, ?> attrs) {
            if (attrs != null) {
                ensureAttributesExist();
                attributes.putAll(attrs);
            }
            return this;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode create() {
            final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode(this);
            children = null;
            attributes = null;
            return newNode;
        }

        java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> createChildren() {
            if (directChildren != null) {
                return directChildren;
            }
            if (children != null) {
                return java.util.Collections.unmodifiableList(children);
            }
            return java.util.Collections.emptyList();
        }

        private java.util.Map<java.lang.String, java.lang.Object> createAttributes() {
            if (directAttributes != null) {
                return directAttributes;
            }
            if (attributes != null) {
                return java.util.Collections.unmodifiableMap(attributes);
            }
            return java.util.Collections.emptyMap();
        }

        private void ensureChildrenExist() {
            if (children == null) {
                children = new java.util.LinkedList<>();
            }
        }

        private void ensureAttributesExist() {
            if (attributes == null) {
                attributes = new java.util.HashMap<>();
            }
        }

        private void initChildrenCollection(final int childCount) {
            if (childCount > 0) {
                children = new java.util.ArrayList<>(childCount);
            }
        }

        private static java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> filterNull(final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> children) {
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> result = new java.util.ArrayList<>(children.size());
            for (final org.apache.commons.configuration2.tree.ImmutableNode c : children) {
                if (c != null) {
                    result.add(c);
                }
            }
            return result;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((super.toString() + "(") + nodeName) + ")";
    }
}
[340098] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-563619195
1261542978
1261542978
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[341628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.InMemoryNodeModel:1112.
1261542978
1261542978
1261542978
1261542978
1261542978
1261542978
1261542978
1261542978
1261542978
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[343646] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.InMemoryNodeModel:784.
1450327177
1450327177
1450327177
[344244] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:42: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:47: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[344255] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(37).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("inverseMapping",inverseMapping);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.configuration2.tree.TreeData.this.parentMapping",org.apache.commons.configuration2.tree.TreeData.this.parentMapping);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.configuration2.tree.TreeData.this.root",org.apache.commons.configuration2.tree.TreeData.this.root);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.configuration2.tree.TreeData.this.replacementMapping",org.apache.commons.configuration2.tree.TreeData.this.replacementMapping);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.configuration2.tree.TreeData.this.nodeTracker",org.apache.commons.configuration2.tree.TreeData.this.nodeTracker);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("replacements",replacements);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.configuration2.tree.TreeData.this.referenceTracker",org.apache.commons.configuration2.tree.TreeData.this.referenceTracker);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.configuration2.tree.TreeData.this.inverseReplacementMapping",org.apache.commons.configuration2.tree.TreeData.this.inverseReplacementMapping);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionEnds();
        }
        if (runtimeAngelicValue)
            for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
                inverseMapping.put(e.getValue(), e.getKey());
            }

        return inverseMapping;
    }
}
[344259] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
-1623179977
-1623179977
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[345105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:151.
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[345954] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:150.
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[347098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:149.
-1623179977
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[348575] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:146.
-1623179977
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[349445] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:143.
-1623179977
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[350186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:98.
1261542978
1404175031
1261542978
1404175031
[351083] ERROR DynamicClassCompiler - [Compilation errors]
NodeTracker.java:24: error: variable trackedNodes might not have been initialized
    }
    ^
[351160] ERROR ConstraintModelBuilder - Unable to compile the change: 
class NodeTracker {
    private final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> trackedNodes;

    public NodeTracker() {
        this(java.util.Collections.<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData>emptyMap());
    }

    private NodeTracker(final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> map) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(44).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(44).collectionEnds();
        }
        if (runtimeAngelicValue)
            trackedNodes = map;

    }

    public org.apache.commons.configuration2.tree.NodeTracker trackNode(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>(trackedNodes);
        final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData = newState.get(selector);
        newState.put(selector, org.apache.commons.configuration2.tree.NodeTracker.trackDataForAddedObserver(root, selector, resolver, handler, trackData));
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.NodeTracker trackNodes(final java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> selectors, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> nodes) {
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>(trackedNodes);
        final java.util.Iterator<org.apache.commons.configuration2.tree.ImmutableNode> itNodes = nodes.iterator();
        for (final org.apache.commons.configuration2.tree.NodeSelector selector : selectors) {
            final org.apache.commons.configuration2.tree.ImmutableNode node = itNodes.next();
            org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData = newState.get(selector);
            if (trackData == null) {
                trackData = new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(node);
            } else {
                trackData = trackData.observerAdded();
            }
            newState.put(selector, trackData);
        }
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.NodeTracker untrackNode(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData = getTrackedNodeData(selector);
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>(trackedNodes);
        final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData newTrackData = trackData.observerRemoved();
        if (newTrackData == null) {
            newState.remove(selector);
        } else {
            newState.put(selector, newTrackData);
        }
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.ImmutableNode getTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return getTrackedNodeData(selector).getNode();
    }

    public boolean isTrackedNodeDetached(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return getTrackedNodeData(selector).isDetached();
    }

    public org.apache.commons.configuration2.tree.InMemoryNodeModel getDetachedNodeModel(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return getTrackedNodeData(selector).getDetachedModel();
    }

    public org.apache.commons.configuration2.tree.NodeTracker update(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeSelector txTarget, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
        if (trackedNodes.isEmpty()) {
            return this;
        }
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> e : trackedNodes.entrySet()) {
            newState.put(e.getKey(), org.apache.commons.configuration2.tree.NodeTracker.determineUpdatedTrackedNodeData(root, txTarget, resolver, handler, e));
        }
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.NodeTracker detachAllTrackedNodes() {
        if (trackedNodes.isEmpty()) {
            return this;
        }
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> e : trackedNodes.entrySet()) {
            final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData newData = (e.getValue().isDetached()) ? e.getValue() : e.getValue().detach(null);
            newState.put(e.getKey(), newData);
        }
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    public org.apache.commons.configuration2.tree.NodeTracker replaceAndDetachTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
        final java.util.Map<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> newState = new java.util.HashMap<>(trackedNodes);
        newState.put(selector, getTrackedNodeData(selector).detach(newNode));
        return new org.apache.commons.configuration2.tree.NodeTracker(newState);
    }

    private org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData getTrackedNodeData(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData = trackedNodes.get(selector);
        if (trackData == null) {
            throw new org.apache.commons.configuration2.ex.ConfigurationRuntimeException("No tracked node found: " + selector);
        }
        return trackData;
    }

    private static org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData determineUpdatedTrackedNodeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeSelector txTarget, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler, final java.util.Map.Entry<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> e) {
        if (e.getValue().isDetached()) {
            return e.getValue();
        }
        org.apache.commons.configuration2.tree.ImmutableNode newTarget;
        try {
            newTarget = e.getKey().select(root, resolver, handler);
        } catch (final java.lang.Exception ex) {
            newTarget = null;
        }
        if (newTarget == null) {
            return org.apache.commons.configuration2.tree.NodeTracker.detachedTrackedNodeData(txTarget, e);
        }
        return e.getValue().updateNode(newTarget);
    }

    private static org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData detachedTrackedNodeData(final org.apache.commons.configuration2.tree.NodeSelector txTarget, final java.util.Map.Entry<org.apache.commons.configuration2.tree.NodeSelector, org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData> e) {
        final org.apache.commons.configuration2.tree.ImmutableNode newNode = (e.getKey().equals(txTarget)) ? org.apache.commons.configuration2.tree.NodeTracker.createEmptyTrackedNode(e.getValue()) : null;
        return e.getValue().detach(newNode);
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode createEmptyTrackedNode(final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData data) {
        return new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(data.getNode().getNodeName()).create();
    }

    private static org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackDataForAddedObserver(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler, final org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData trackData) {
        if (trackData != null) {
            return trackData.observerAdded();
        }
        final org.apache.commons.configuration2.tree.ImmutableNode target = selector.select(root, resolver, handler);
        if (target == null) {
            throw new org.apache.commons.configuration2.ex.ConfigurationRuntimeException("Selector does not select unique node: " + selector);
        }
        return new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(target);
    }

    private static class TrackedNodeData {
        private final org.apache.commons.configuration2.tree.ImmutableNode node;

        private final int observerCount;

        private final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedModel;

        public TrackedNodeData(final org.apache.commons.configuration2.tree.ImmutableNode nd) {
            this(nd, 1, null);
        }

        private TrackedNodeData(final org.apache.commons.configuration2.tree.ImmutableNode nd, final int obsCount, final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedNodeModel) {
            node = nd;
            observerCount = obsCount;
            detachedModel = detachedNodeModel;
        }

        public org.apache.commons.configuration2.tree.ImmutableNode getNode() {
            return getDetachedModel() != null ? getDetachedModel().getRootNode() : node;
        }

        public org.apache.commons.configuration2.tree.InMemoryNodeModel getDetachedModel() {
            return detachedModel;
        }

        public boolean isDetached() {
            return getDetachedModel() != null;
        }

        public org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData observerAdded() {
            return new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(node, observerCount + 1, getDetachedModel());
        }

        public org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData observerRemoved() {
            return observerCount <= 1 ? null : new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(node, observerCount - 1, getDetachedModel());
        }

        public org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData updateNode(final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
            return new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(newNode, observerCount, getDetachedModel());
        }

        public org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData detach(final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
            final org.apache.commons.configuration2.tree.ImmutableNode newTrackedNode = (newNode != null) ? newNode : getNode();
            return new org.apache.commons.configuration2.tree.NodeTracker.TrackedNodeData(newTrackedNode, observerCount, new org.apache.commons.configuration2.tree.InMemoryNodeModel(newTrackedNode));
        }
    }
}
[351163] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1696971150
1404175031
1696971150
1261542978
[352000] ERROR DynamicClassCompiler - [Compilation errors]
InMemoryNodeModel.java:26: error: variable structure might not have been initialized
    }
    ^
[352061] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class InMemoryNodeModel implements org.apache.commons.configuration2.tree.NodeModel<org.apache.commons.configuration2.tree.ImmutableNode> {
    private static final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> DUMMY_HANDLER = new org.apache.commons.configuration2.tree.TreeData(null, java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode>emptyMap(), java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode>emptyMap(), null, new org.apache.commons.configuration2.tree.ReferenceTracker());

    private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.configuration2.tree.TreeData> structure;

    public InMemoryNodeModel() {
        this(null);
    }

    public InMemoryNodeModel(final org.apache.commons.configuration2.tree.ImmutableNode root) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(45).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectionEnds();
        }
        if (runtimeAngelicValue)
            structure = new java.util.concurrent.atomic.AtomicReference<>(createTreeData(org.apache.commons.configuration2.tree.InMemoryNodeModel.initialRootNode(root), null));

    }

    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return getTreeData().getRootNode();
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> getNodeHandler() {
        return getReferenceNodeHandler();
    }

    @java.lang.Override
    public void addProperty(final java.lang.String key, final java.lang.Iterable<?> values, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        addProperty(key, null, values, resolver);
    }

    public void addProperty(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final java.lang.Iterable<?> values, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        if (org.apache.commons.configuration2.tree.InMemoryNodeModel.valuesNotEmpty(values)) {
            updateModel(( tx) -> {
                initializeAddTransaction(tx, key, values, resolver);
                return true;
            }, selector, resolver);
        }
    }

    @java.lang.Override
    public void addNodes(final java.lang.String key, final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> nodes, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        addNodes(key, null, nodes, resolver);
    }

    public void addNodes(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final java.util.Collection<? extends org.apache.commons.configuration2.tree.ImmutableNode> nodes, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        if ((nodes != null) && (!nodes.isEmpty())) {
            updateModel(( tx) -> {
                final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results = resolver.resolveKey(tx.getQueryRoot(), key, tx.getCurrentData());
                if (results.size() == 1) {
                    if (results.get(0).isAttributeResult()) {
                        throw org.apache.commons.configuration2.tree.InMemoryNodeModel.attributeKeyException(key);
                    }
                    tx.addAddNodesOperation(results.get(0).getNode(), nodes);
                } else {
                    final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData = resolver.resolveAddKey(tx.getQueryRoot(), key, tx.getCurrentData());
                    if (addData.isAttribute()) {
                        throw org.apache.commons.configuration2.tree.InMemoryNodeModel.attributeKeyException(key);
                    }
                    final org.apache.commons.configuration2.tree.ImmutableNode newNode = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(nodes.size()).name(addData.getNewNodeName()).addChildren(nodes).create();
                    org.apache.commons.configuration2.tree.InMemoryNodeModel.addNodesByAddData(tx, addData, java.util.Collections.singleton(newNode));
                }
                return true;
            }, selector, resolver);
        }
    }

    @java.lang.Override
    public void setProperty(final java.lang.String key, final java.lang.Object value, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        setProperty(key, null, value, resolver);
    }

    public void setProperty(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final java.lang.Object value, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        updateModel(( tx) -> {
            boolean added = false;
            final org.apache.commons.configuration2.tree.NodeUpdateData<org.apache.commons.configuration2.tree.ImmutableNode> updateData = resolver.resolveUpdateKey(tx.getQueryRoot(), key, value, tx.getCurrentData());
            if (!updateData.getNewValues().isEmpty()) {
                initializeAddTransaction(tx, key, updateData.getNewValues(), resolver);
                added = true;
            }
            final boolean cleared = org.apache.commons.configuration2.tree.InMemoryNodeModel.initializeClearTransaction(tx, updateData.getRemovedNodes());
            final boolean updated = org.apache.commons.configuration2.tree.InMemoryNodeModel.initializeUpdateTransaction(tx, updateData.getChangedValues());
            return (added || cleared) || updated;
        }, selector, resolver);
    }

    @java.lang.Override
    public java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> clearTree(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        return clearTree(key, null, resolver);
    }

    public java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> clearTree(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> removedElements = new java.util.LinkedList<>();
        updateModel(( tx) -> {
            boolean changes = false;
            final org.apache.commons.configuration2.tree.TreeData currentStructure = tx.getCurrentData();
            final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results = resolver.resolveKey(tx.getQueryRoot(), key, currentStructure);
            removedElements.clear();
            removedElements.addAll(results);
            for (final org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode> result : results) {
                if (result.isAttributeResult()) {
                    tx.addRemoveAttributeOperation(result.getNode(), result.getAttributeName());
                } else {
                    if (result.getNode() == currentStructure.getRootNode()) {
                        clear(resolver);
                        return false;
                    }
                    tx.addRemoveNodeOperation(currentStructure.getParent(result.getNode()), result.getNode());
                }
                changes = true;
            }
            return changes;
        }, selector, resolver);
        return removedElements;
    }

    @java.lang.Override
    public void clearProperty(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        clearProperty(key, null, resolver);
    }

    public void clearProperty(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        updateModel(( tx) -> {
            final java.util.List<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results = resolver.resolveKey(tx.getQueryRoot(), key, tx.getCurrentData());
            return org.apache.commons.configuration2.tree.InMemoryNodeModel.initializeClearTransaction(tx, results);
        }, selector, resolver);
    }

    @java.lang.Override
    public void clear(final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.configuration2.tree.ImmutableNode newRoot = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(getRootNode().getNodeName()).create();
        setRootNode(newRoot);
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getInMemoryRepresentation() {
        return getTreeData().getRootNode();
    }

    @java.lang.Override
    public void setRootNode(final org.apache.commons.configuration2.tree.ImmutableNode newRoot) {
        structure.set(createTreeData(org.apache.commons.configuration2.tree.InMemoryNodeModel.initialRootNode(newRoot), structure.get()));
    }

    public void replaceRoot(final org.apache.commons.configuration2.tree.ImmutableNode newRoot, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        if (newRoot == null) {
            throw new java.lang.IllegalArgumentException("Replaced root node must not be null!");
        }
        final org.apache.commons.configuration2.tree.TreeData current = structure.get();
        final org.apache.commons.configuration2.tree.TreeData temp = createTreeDataForRootAndTracker(newRoot, current.getNodeTracker());
        structure.set(temp.updateNodeTracker(temp.getNodeTracker().update(newRoot, null, resolver, temp)));
    }

    public void mergeRoot(final org.apache.commons.configuration2.tree.ImmutableNode node, final java.lang.String rootName, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, ?> references, final java.lang.Object rootRef, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        updateModel(( tx) -> {
            final org.apache.commons.configuration2.tree.TreeData current = tx.getCurrentData();
            final java.lang.String newRootName = org.apache.commons.configuration2.tree.InMemoryNodeModel.determineRootName(current.getRootNode(), node, rootName);
            if (newRootName != null) {
                tx.addChangeNodeNameOperation(current.getRootNode(), newRootName);
            }
            tx.addAddNodesOperation(current.getRootNode(), node.getChildren());
            tx.addAttributesOperation(current.getRootNode(), node.getAttributes());
            if (node.getValue() != null) {
                tx.addChangeNodeValueOperation(current.getRootNode(), node.getValue());
            }
            if (references != null) {
                tx.addNewReferences(references);
            }
            if (rootRef != null) {
                tx.addNewReference(current.getRootNode(), rootRef);
            }
            return true;
        }, null, resolver);
    }

    public void trackNode(final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final org.apache.commons.configuration2.tree.NodeTracker newTracker = current.getNodeTracker().trackNode(current.getRootNode(), selector, resolver, current);
            done = structure.compareAndSet(current, current.updateNodeTracker(newTracker));
        } while (!done );
    }

    public java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> selectAndTrackNodes(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.lang3.mutable.Mutable<java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector>> refSelectors = new org.apache.commons.lang3.mutable.MutableObject<>();
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = resolver.resolveNodeKey(current.getRootNode(), key, current);
            if (nodes.isEmpty()) {
                return java.util.Collections.emptyList();
            }
            done = structure.compareAndSet(current, org.apache.commons.configuration2.tree.InMemoryNodeModel.createSelectorsForTrackedNodes(refSelectors, nodes, current, resolver));
        } while (!done );
        return refSelectors.getValue();
    }

    public java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector> trackChildNodes(final java.lang.String key, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.lang3.mutable.Mutable<java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector>> refSelectors = new org.apache.commons.lang3.mutable.MutableObject<>();
        boolean done;
        do {
            refSelectors.setValue(java.util.Collections.<org.apache.commons.configuration2.tree.NodeSelector>emptyList());
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = resolver.resolveNodeKey(current.getRootNode(), key, current);
            if (nodes.size() == 1) {
                final org.apache.commons.configuration2.tree.ImmutableNode node = nodes.get(0);
                done = node.getChildren().isEmpty() || structure.compareAndSet(current, org.apache.commons.configuration2.tree.InMemoryNodeModel.createSelectorsForTrackedNodes(refSelectors, node.getChildren(), current, resolver));
            } else {
                done = true;
            }
        } while (!done );
        return refSelectors.getValue();
    }

    public org.apache.commons.configuration2.tree.NodeSelector trackChildNodeWithCreation(final java.lang.String key, final java.lang.String childName, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.lang3.mutable.MutableObject<org.apache.commons.configuration2.tree.NodeSelector> refSelector = new org.apache.commons.lang3.mutable.MutableObject<>();
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes = resolver.resolveNodeKey(current.getRootNode(), key, current);
            if (nodes.size() != 1) {
                throw new org.apache.commons.configuration2.ex.ConfigurationRuntimeException("Key does not select a single node: " + key);
            }
            final org.apache.commons.configuration2.tree.ImmutableNode parent = nodes.get(0);
            final org.apache.commons.configuration2.tree.TreeData newData = org.apache.commons.configuration2.tree.InMemoryNodeModel.createDataWithTrackedChildNode(current, parent, childName, resolver, refSelector);
            done = structure.compareAndSet(current, newData);
        } while (!done );
        return refSelector.getValue();
    }

    public org.apache.commons.configuration2.tree.ImmutableNode getTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return structure.get().getNodeTracker().getTrackedNode(selector);
    }

    public void replaceTrackedNode(final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
        if (newNode == null) {
            throw new java.lang.IllegalArgumentException("Replacement node must not be null!");
        }
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData currentData = structure.get();
            done = replaceDetachedTrackedNode(currentData, selector, newNode) || replaceActiveTrackedNode(currentData, selector, newNode);
        } while (!done );
    }

    public org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> getTrackedNodeHandler(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        final org.apache.commons.configuration2.tree.TreeData currentData = structure.get();
        final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedNodeModel = currentData.getNodeTracker().getDetachedNodeModel(selector);
        return detachedNodeModel != null ? detachedNodeModel.getNodeHandler() : new org.apache.commons.configuration2.tree.TrackedNodeHandler(currentData.getNodeTracker().getTrackedNode(selector), currentData);
    }

    public boolean isTrackedNodeDetached(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        return structure.get().getNodeTracker().isTrackedNodeDetached(selector);
    }

    public void untrackNode(final org.apache.commons.configuration2.tree.NodeSelector selector) {
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData current = structure.get();
            final org.apache.commons.configuration2.tree.NodeTracker newTracker = current.getNodeTracker().untrackNode(selector);
            done = structure.compareAndSet(current, current.updateNodeTracker(newTracker));
        } while (!done );
    }

    public org.apache.commons.configuration2.tree.ReferenceNodeHandler getReferenceNodeHandler() {
        return getTreeData();
    }

    org.apache.commons.configuration2.tree.TreeData getTreeData() {
        return structure.get();
    }

    static void updateParentMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parents, final org.apache.commons.configuration2.tree.ImmutableNode root) {
        org.apache.commons.configuration2.tree.NodeTreeWalker.INSTANCE.walkBFS(root, new org.apache.commons.configuration2.tree.ConfigurationNodeVisitorAdapter<org.apache.commons.configuration2.tree.ImmutableNode>() {
            @java.lang.Override
            public void visitBeforeChildren(final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeHandler<org.apache.commons.configuration2.tree.ImmutableNode> handler) {
                for (final org.apache.commons.configuration2.tree.ImmutableNode c : node.getChildren()) {
                    parents.put(c, node);
                }
            }
        }, org.apache.commons.configuration2.tree.InMemoryNodeModel.DUMMY_HANDLER);
    }

    static boolean checkIfNodeDefined(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return ((node.getValue() != null) || (!node.getChildren().isEmpty())) || (!node.getAttributes().isEmpty());
    }

    private void initializeAddTransaction(final org.apache.commons.configuration2.tree.ModelTransaction tx, final java.lang.String key, final java.lang.Iterable<?> values, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData = resolver.resolveAddKey(tx.getQueryRoot(), key, tx.getCurrentData());
        if (addData.isAttribute()) {
            org.apache.commons.configuration2.tree.InMemoryNodeModel.addAttributeProperty(tx, addData, values);
        } else {
            org.apache.commons.configuration2.tree.InMemoryNodeModel.addNodeProperty(tx, addData, values);
        }
    }

    private org.apache.commons.configuration2.tree.TreeData createTreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.TreeData current) {
        final org.apache.commons.configuration2.tree.NodeTracker newTracker = (current != null) ? current.getNodeTracker().detachAllTrackedNodes() : new org.apache.commons.configuration2.tree.NodeTracker();
        return createTreeDataForRootAndTracker(root, newTracker);
    }

    private org.apache.commons.configuration2.tree.TreeData createTreeDataForRootAndTracker(final org.apache.commons.configuration2.tree.ImmutableNode root, final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, createParentMapping(root), java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode>emptyMap(), newTracker, new org.apache.commons.configuration2.tree.ReferenceTracker());
    }

    private static void addNodeProperty(final org.apache.commons.configuration2.tree.ModelTransaction tx, final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData, final java.lang.Iterable<?> values) {
        final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newNodes = org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodesToAdd(addData.getNewNodeName(), values);
        org.apache.commons.configuration2.tree.InMemoryNodeModel.addNodesByAddData(tx, addData, newNodes);
    }

    private static void addNodesByAddData(final org.apache.commons.configuration2.tree.ModelTransaction tx, final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newNodes) {
        if (addData.getPathNodes().isEmpty()) {
            tx.addAddNodesOperation(addData.getParent(), newNodes);
        } else {
            final org.apache.commons.configuration2.tree.ImmutableNode newChild = org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodeToAddWithPath(addData, newNodes);
            tx.addAddNodeOperation(addData.getParent(), newChild);
        }
    }

    private static void addAttributeProperty(final org.apache.commons.configuration2.tree.ModelTransaction tx, final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData, final java.lang.Iterable<?> values) {
        if (addData.getPathNodes().isEmpty()) {
            tx.addAttributeOperation(addData.getParent(), addData.getNewNodeName(), values.iterator().next());
        } else {
            final int pathNodeCount = addData.getPathNodes().size();
            final org.apache.commons.configuration2.tree.ImmutableNode childWithAttribute = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(addData.getPathNodes().get(pathNodeCount - 1)).addAttribute(addData.getNewNodeName(), values.iterator().next()).create();
            final org.apache.commons.configuration2.tree.ImmutableNode newChild = (pathNodeCount > 1) ? org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodeOnPath(addData.getPathNodes().subList(0, pathNodeCount - 1).iterator(), java.util.Collections.singleton(childWithAttribute)) : childWithAttribute;
            tx.addAddNodeOperation(addData.getParent(), newChild);
        }
    }

    private static java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> createNodesToAdd(final java.lang.String newNodeName, final java.lang.Iterable<?> values) {
        final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> nodes = new java.util.LinkedList<>();
        for (final java.lang.Object value : values) {
            nodes.add(new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(newNodeName).value(value).create());
        }
        return nodes;
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode createNodeToAddWithPath(final org.apache.commons.configuration2.tree.NodeAddData<org.apache.commons.configuration2.tree.ImmutableNode> addData, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newNodes) {
        return org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodeOnPath(addData.getPathNodes().iterator(), newNodes);
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode createNodeOnPath(final java.util.Iterator<java.lang.String> it, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> newNodes) {
        final java.lang.String nodeName = it.next();
        org.apache.commons.configuration2.tree.ImmutableNode.Builder builder;
        if (it.hasNext()) {
            builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(1);
            builder.addChild(org.apache.commons.configuration2.tree.InMemoryNodeModel.createNodeOnPath(it, newNodes));
        } else {
            builder = new org.apache.commons.configuration2.tree.ImmutableNode.Builder(newNodes.size());
            builder.addChildren(newNodes);
        }
        return builder.name(nodeName).create();
    }

    private static boolean initializeClearTransaction(final org.apache.commons.configuration2.tree.ModelTransaction tx, final java.util.Collection<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>> results) {
        for (final org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode> result : results) {
            if (result.isAttributeResult()) {
                tx.addRemoveAttributeOperation(result.getNode(), result.getAttributeName());
            } else {
                tx.addClearNodeValueOperation(result.getNode());
            }
        }
        return !results.isEmpty();
    }

    private static boolean initializeUpdateTransaction(final org.apache.commons.configuration2.tree.ModelTransaction tx, final java.util.Map<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>, java.lang.Object> changedValues) {
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.QueryResult<org.apache.commons.configuration2.tree.ImmutableNode>, java.lang.Object> e : changedValues.entrySet()) {
            if (e.getKey().isAttributeResult()) {
                tx.addAttributeOperation(e.getKey().getNode(), e.getKey().getAttributeName(), e.getValue());
            } else {
                tx.addChangeNodeValueOperation(e.getKey().getNode(), e.getValue());
            }
        }
        return !changedValues.isEmpty();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode initialRootNode(final org.apache.commons.configuration2.tree.ImmutableNode providedRoot) {
        return providedRoot != null ? providedRoot : new org.apache.commons.configuration2.tree.ImmutableNode.Builder().create();
    }

    private static java.lang.String determineRootName(final org.apache.commons.configuration2.tree.ImmutableNode rootNode, final org.apache.commons.configuration2.tree.ImmutableNode node, final java.lang.String rootName) {
        if (rootName != null) {
            return rootName;
        }
        if (rootNode.getNodeName() == null) {
            return node.getNodeName();
        }
        return null;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createParentMapping(final org.apache.commons.configuration2.tree.ImmutableNode root) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parents = new java.util.HashMap<>();
        org.apache.commons.configuration2.tree.InMemoryNodeModel.updateParentMapping(parents, root);
        return parents;
    }

    private void updateModel(final org.apache.commons.configuration2.tree.InMemoryNodeModel.TransactionInitializer txInit, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        boolean done;
        do {
            final org.apache.commons.configuration2.tree.TreeData currentData = getTreeData();
            done = executeTransactionOnDetachedTrackedNode(txInit, selector, currentData, resolver) || executeTransactionOnCurrentStructure(txInit, selector, currentData, resolver);
        } while (!done );
    }

    private boolean executeTransactionOnCurrentStructure(final org.apache.commons.configuration2.tree.InMemoryNodeModel.TransactionInitializer txInit, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.TreeData currentData, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        boolean done;
        final org.apache.commons.configuration2.tree.ModelTransaction tx = new org.apache.commons.configuration2.tree.ModelTransaction(currentData, selector, resolver);
        if (!txInit.initTransaction(tx)) {
            done = true;
        } else {
            final org.apache.commons.configuration2.tree.TreeData newData = tx.execute();
            done = structure.compareAndSet(tx.getCurrentData(), newData);
        }
        return done;
    }

    private boolean executeTransactionOnDetachedTrackedNode(final org.apache.commons.configuration2.tree.InMemoryNodeModel.TransactionInitializer txInit, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.TreeData currentData, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        if (selector != null) {
            final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedNodeModel = currentData.getNodeTracker().getDetachedNodeModel(selector);
            if (detachedNodeModel != null) {
                detachedNodeModel.updateModel(txInit, null, resolver);
                return true;
            }
        }
        return false;
    }

    private boolean replaceDetachedTrackedNode(final org.apache.commons.configuration2.tree.TreeData currentData, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
        final org.apache.commons.configuration2.tree.InMemoryNodeModel detachedNodeModel = currentData.getNodeTracker().getDetachedNodeModel(selector);
        if (detachedNodeModel != null) {
            detachedNodeModel.setRootNode(newNode);
            return true;
        }
        return false;
    }

    private boolean replaceActiveTrackedNode(final org.apache.commons.configuration2.tree.TreeData currentData, final org.apache.commons.configuration2.tree.NodeSelector selector, final org.apache.commons.configuration2.tree.ImmutableNode newNode) {
        final org.apache.commons.configuration2.tree.NodeTracker newTracker = currentData.getNodeTracker().replaceAndDetachTrackedNode(selector, newNode);
        return structure.compareAndSet(currentData, currentData.updateNodeTracker(newTracker));
    }

    private static org.apache.commons.configuration2.tree.TreeData createSelectorsForTrackedNodes(final org.apache.commons.lang3.mutable.Mutable<java.util.Collection<org.apache.commons.configuration2.tree.NodeSelector>> refSelectors, final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> nodes, final org.apache.commons.configuration2.tree.TreeData current, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver) {
        final java.util.List<org.apache.commons.configuration2.tree.NodeSelector> selectors = new java.util.ArrayList<>(nodes.size());
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.String> cache = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.tree.ImmutableNode node : nodes) {
            selectors.add(new org.apache.commons.configuration2.tree.NodeSelector(resolver.nodeKey(node, cache, current)));
        }
        refSelectors.setValue(selectors);
        final org.apache.commons.configuration2.tree.NodeTracker newTracker = current.getNodeTracker().trackNodes(selectors, nodes);
        return current.updateNodeTracker(newTracker);
    }

    private static org.apache.commons.configuration2.tree.TreeData updateDataWithNewTrackedNode(final org.apache.commons.configuration2.tree.TreeData current, final org.apache.commons.configuration2.tree.ImmutableNode node, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.lang3.mutable.MutableObject<org.apache.commons.configuration2.tree.NodeSelector> refSelector) {
        final org.apache.commons.configuration2.tree.NodeSelector selector = new org.apache.commons.configuration2.tree.NodeSelector(resolver.nodeKey(node, new java.util.HashMap<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.String>(), current));
        refSelector.setValue(selector);
        final org.apache.commons.configuration2.tree.NodeTracker newTracker = current.getNodeTracker().trackNodes(java.util.Collections.singleton(selector), java.util.Collections.singleton(node));
        return current.updateNodeTracker(newTracker);
    }

    private static org.apache.commons.configuration2.tree.TreeData createDataWithTrackedChildNode(final org.apache.commons.configuration2.tree.TreeData current, final org.apache.commons.configuration2.tree.ImmutableNode parent, final java.lang.String childName, final org.apache.commons.configuration2.tree.NodeKeyResolver<org.apache.commons.configuration2.tree.ImmutableNode> resolver, final org.apache.commons.lang3.mutable.MutableObject<org.apache.commons.configuration2.tree.NodeSelector> refSelector) {
        org.apache.commons.configuration2.tree.TreeData newData;
        final java.util.List<org.apache.commons.configuration2.tree.ImmutableNode> namedChildren = current.getChildren(parent, childName);
        if (!namedChildren.isEmpty()) {
            newData = org.apache.commons.configuration2.tree.InMemoryNodeModel.updateDataWithNewTrackedNode(current, namedChildren.get(0), resolver, refSelector);
        } else {
            final org.apache.commons.configuration2.tree.ImmutableNode child = new org.apache.commons.configuration2.tree.ImmutableNode.Builder().name(childName).create();
            final org.apache.commons.configuration2.tree.ModelTransaction tx = new org.apache.commons.configuration2.tree.ModelTransaction(current, null, resolver);
            tx.addAddNodeOperation(parent, child);
            newData = org.apache.commons.configuration2.tree.InMemoryNodeModel.updateDataWithNewTrackedNode(tx.execute(), child, resolver, refSelector);
        }
        return newData;
    }

    private static boolean valuesNotEmpty(final java.lang.Iterable<?> values) {
        return values.iterator().hasNext();
    }

    private static java.lang.RuntimeException attributeKeyException(final java.lang.String key) {
        return new java.lang.IllegalArgumentException("New nodes cannot be added to an attribute key: " + key);
    }

    private interface TransactionInitializer {
        public abstract boolean initTransaction(org.apache.commons.configuration2.tree.ModelTransaction tx);
    }
}
[352070] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1696971150
[352493] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
1261542978
1696971150
1450327177
1404175031
1696971150
[353378] ERROR DynamicClassCompiler - [Compilation errors]
ReferenceTracker.java:23: error: variable removedReferences might not have been initialized
    }
    ^
[353398] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceTracker {
    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> references;

    private final java.util.List<java.lang.Object> removedReferences;

    private ReferenceTracker(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> refs, final java.util.List<java.lang.Object> removedRefs) {
        references = refs;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(47).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(47).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(47).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(47).collectionEnds();
        }
        if (runtimeAngelicValue)
            removedReferences = removedRefs;

    }

    public ReferenceTracker() {
        this(java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object>emptyMap(), java.util.Collections.emptyList());
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker addReferences(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, ?> refs) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> newRefs = new java.util.HashMap<>(references);
        newRefs.putAll(refs);
        return new org.apache.commons.configuration2.tree.ReferenceTracker(newRefs, removedReferences);
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker updateReferences(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacedNodes, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> removedNodes) {
        if (!references.isEmpty()) {
            java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> newRefs = null;
            for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacedNodes.entrySet()) {
                final java.lang.Object ref = references.get(e.getKey());
                if (ref != null) {
                    if (newRefs == null) {
                        newRefs = new java.util.HashMap<>(references);
                    }
                    newRefs.put(e.getValue(), ref);
                    newRefs.remove(e.getKey());
                }
            }
            java.util.List<java.lang.Object> newRemovedRefs = (newRefs != null) ? new java.util.LinkedList<>(removedReferences) : null;
            for (final org.apache.commons.configuration2.tree.ImmutableNode node : removedNodes) {
                final java.lang.Object ref = references.get(node);
                if (ref != null) {
                    if (newRefs == null) {
                        newRefs = new java.util.HashMap<>(references);
                    }
                    newRefs.remove(node);
                    if (newRemovedRefs == null) {
                        newRemovedRefs = new java.util.LinkedList<>(removedReferences);
                    }
                    newRemovedRefs.add(ref);
                }
            }
            if (newRefs != null) {
                return new org.apache.commons.configuration2.tree.ReferenceTracker(newRefs, newRemovedRefs);
            }
        }
        return this;
    }

    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return references.get(node);
    }

    public java.util.List<java.lang.Object> getRemovedReferences() {
        return java.util.Collections.unmodifiableList(removedReferences);
    }
}
[353400] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
[354002] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[354013] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(48).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectionEnds();
        }
        if (runtimeAngelicValue)
            referenceTracker = refTracker;

    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[354015] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1404175031
[354575] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: spoon.SpoonException: cannot insert a statement before a super or this invocation.
1696971150
[355175] ERROR DynamicClassCompiler - [Compilation errors]
ReferenceTracker.java:23: error: variable references might not have been initialized
    }
    ^
[355184] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceTracker {
    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> references;

    private final java.util.List<java.lang.Object> removedReferences;

    private ReferenceTracker(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> refs, final java.util.List<java.lang.Object> removedRefs) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(50).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(50).collectionEnds();
        }
        if (runtimeAngelicValue)
            references = refs;

        removedReferences = removedRefs;
    }

    public ReferenceTracker() {
        this(java.util.Collections.<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object>emptyMap(), java.util.Collections.emptyList());
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker addReferences(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, ?> refs) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> newRefs = new java.util.HashMap<>(references);
        newRefs.putAll(refs);
        return new org.apache.commons.configuration2.tree.ReferenceTracker(newRefs, removedReferences);
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker updateReferences(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacedNodes, final java.util.Collection<org.apache.commons.configuration2.tree.ImmutableNode> removedNodes) {
        if (!references.isEmpty()) {
            java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, java.lang.Object> newRefs = null;
            for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacedNodes.entrySet()) {
                final java.lang.Object ref = references.get(e.getKey());
                if (ref != null) {
                    if (newRefs == null) {
                        newRefs = new java.util.HashMap<>(references);
                    }
                    newRefs.put(e.getValue(), ref);
                    newRefs.remove(e.getKey());
                }
            }
            java.util.List<java.lang.Object> newRemovedRefs = (newRefs != null) ? new java.util.LinkedList<>(removedReferences) : null;
            for (final org.apache.commons.configuration2.tree.ImmutableNode node : removedNodes) {
                final java.lang.Object ref = references.get(node);
                if (ref != null) {
                    if (newRefs == null) {
                        newRefs = new java.util.HashMap<>(references);
                    }
                    newRefs.remove(node);
                    if (newRemovedRefs == null) {
                        newRemovedRefs = new java.util.LinkedList<>(removedReferences);
                    }
                    newRemovedRefs.add(ref);
                }
            }
            if (newRefs != null) {
                return new org.apache.commons.configuration2.tree.ReferenceTracker(newRefs, newRemovedRefs);
            }
        }
        return this;
    }

    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return references.get(node);
    }

    public java.util.List<java.lang.Object> getRemovedReferences() {
        return java.util.Collections.unmodifiableList(removedReferences);
    }
}
[355186] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
[355754] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[355775] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(51).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectionEnds();
        }
        if (runtimeAngelicValue)
            nodeTracker = tracker;

        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[355776] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1696971150
1450327177
[356282] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[356292] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(52).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(52).collectionEnds();
        }
        if (runtimeAngelicValue)
            inverseReplacementMapping = createInverseMapping(replacements);

        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[356293] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
[356748] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[356772] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        this.parentMapping = parentMapping;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(53).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(53).collectionEnds();
        }
        if (runtimeAngelicValue)
            replacementMapping = replacements;

        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[356774] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
[357194] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[357203] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        this.root = root;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(54).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectionEnds();
        }
        if (runtimeAngelicValue)
            this.parentMapping = parentMapping;

        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[357205] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
[357686] ERROR DynamicClassCompiler - [Compilation errors]
TreeData.java:55: error: cannot find symbol
        final org.apache.commons.configuration2.tree.ImmutableNode org = org.apache.commons.configuration2.tree.TreeData.handleReplacements(node, inverseReplacementMapping);
                                                                            ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
TreeData.java:60: error: cannot find symbol
        return org.apache.commons.configuration2.tree.TreeData.handleReplacements(parent, replacementMapping);
                  ^
  symbol:   variable apache
  location: variable org of type org.apache.commons.configuration2.tree.ImmutableNode
[357699] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TreeData extends org.apache.commons.configuration2.tree.AbstractImmutableNodeHandler implements org.apache.commons.configuration2.tree.ReferenceNodeHandler {
    private final org.apache.commons.configuration2.tree.ImmutableNode root;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacementMapping;

    private final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseReplacementMapping;

    private final org.apache.commons.configuration2.tree.NodeTracker nodeTracker;

    private final org.apache.commons.configuration2.tree.ReferenceTracker referenceTracker;

    public TreeData(final org.apache.commons.configuration2.tree.ImmutableNode root, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> parentMapping, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements, final org.apache.commons.configuration2.tree.NodeTracker tracker, final org.apache.commons.configuration2.tree.ReferenceTracker refTracker) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(55).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectionEnds();
        }
        if (runtimeAngelicValue)
            this.root = root;

        this.parentMapping = parentMapping;
        replacementMapping = replacements;
        inverseReplacementMapping = createInverseMapping(replacements);
        nodeTracker = tracker;
        referenceTracker = refTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getRootNode() {
        return root;
    }

    public org.apache.commons.configuration2.tree.NodeTracker getNodeTracker() {
        return nodeTracker;
    }

    public org.apache.commons.configuration2.tree.ReferenceTracker getReferenceTracker() {
        return referenceTracker;
    }

    @java.lang.Override
    public org.apache.commons.configuration2.tree.ImmutableNode getParent(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        if (node == getRootNode()) {
            return null;
        }
        final ImmutableNode org = TreeData.handleReplacements(node, inverseReplacementMapping);
        final ImmutableNode parent = parentMapping.get(org);
        if (parent == null) {
            throw new java.lang.IllegalArgumentException(("Cannot determine parent! " + node) + " is not part of this model.");
        }
        return TreeData.handleReplacements(parent, replacementMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyParentMapping() {
        return new java.util.HashMap<>(parentMapping);
    }

    public java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> copyReplacementMapping() {
        return new java.util.HashMap<>(replacementMapping);
    }

    public org.apache.commons.configuration2.tree.TreeData updateNodeTracker(final org.apache.commons.configuration2.tree.NodeTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, newTracker, referenceTracker);
    }

    public org.apache.commons.configuration2.tree.TreeData updateReferenceTracker(final org.apache.commons.configuration2.tree.ReferenceTracker newTracker) {
        return new org.apache.commons.configuration2.tree.TreeData(root, parentMapping, replacementMapping, nodeTracker, newTracker);
    }

    @java.lang.Override
    public java.lang.Object getReference(final org.apache.commons.configuration2.tree.ImmutableNode node) {
        return getReferenceTracker().getReference(node);
    }

    @java.lang.Override
    public java.util.List<java.lang.Object> removedReferences() {
        return getReferenceTracker().getRemovedReferences();
    }

    private static org.apache.commons.configuration2.tree.ImmutableNode handleReplacements(final org.apache.commons.configuration2.tree.ImmutableNode replace, final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> mapping) {
        org.apache.commons.configuration2.tree.ImmutableNode node = replace;
        ImmutableNode org;
        do {
            org = mapping.get(node);
            if (org != null) {
                node = org;
            }
        } while (org != null );
        return node;
    }

    private java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> createInverseMapping(final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> replacements) {
        final java.util.Map<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> inverseMapping = new java.util.HashMap<>();
        for (final java.util.Map.Entry<org.apache.commons.configuration2.tree.ImmutableNode, org.apache.commons.configuration2.tree.ImmutableNode> e : replacements.entrySet()) {
            inverseMapping.put(e.getValue(), e.getKey());
        }
        return inverseMapping;
    }
}
[357702] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1450327177
1790817562
766482281
1790817562
-1623179977
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[358977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:96.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[359938] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:96.
-1623179977
766482281
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[361065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:178.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[362365] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:178.
-1623179977
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[363428] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:174.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[364153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.tree.NodeTreeWalker:174.
-563619195
1874433509
1874433509
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[366138] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:656.
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[367565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:641.
1938082773
1938082773
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[369668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:1697.
1938082773
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[371296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:454.
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[372855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:292.
1938082773
1938082773
1938082773
1938082773
1938082773
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[375922] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:270.
1938082773
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[377162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:134.
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[378542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:133.
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[379771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:132.
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[381321] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:131.
1938082773
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[382802] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.AbstractConfiguration:130.
1938082773
-71450127
-71450127
[384032] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationLookup.java:23: error: variable configuration might not have been initialized
    }
    ^
[384040] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationLookup implements org.apache.commons.configuration2.interpol.Lookup {
    private final org.apache.commons.configuration2.ImmutableConfiguration configuration;

    public ConfigurationLookup(final org.apache.commons.configuration2.ImmutableConfiguration config) {
        if (config == null) {
            throw new java.lang.IllegalArgumentException("Configuration must not be null!");
        }
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(73).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectionEnds();
        }
        if (runtimeAngelicValue)
            configuration = config;

    }

    public org.apache.commons.configuration2.ImmutableConfiguration getConfiguration() {
        return configuration;
    }

    @java.lang.Override
    public java.lang.Object lookup(final java.lang.String variable) {
        return getConfiguration().getProperty(variable);
    }
}
[384041] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-71692793
-71450127
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[384901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.ConfigurationLookup:50.
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[385516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.configuration2.ConfigurationLookup:50.
-71450127
-801001282
-801001282
-801001282
-801001282
[386873] ERROR DynamicClassCompiler - [Compilation errors]
ConfigurationInterpolator.java:23: error: cannot assign a value to final variable DEFAULT_PREFIX_LOOKUPS
        org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
                                                                            ^
[386895] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class ConfigurationInterpolator {
    private static final char PREFIX_SEPARATOR = ':';

    private static final java.lang.String VAR_START = "${";

    private static final int VAR_START_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START.length();

    private static final java.lang.String VAR_END = "}";

    private static final int VAR_END_LENGTH = org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END.length();

    private static final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> DEFAULT_PREFIX_LOOKUPS;

    static {
        final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> lookups = new java.util.HashMap<>();
        for (final org.apache.commons.configuration2.interpol.DefaultLookups lookup : org.apache.commons.configuration2.interpol.DefaultLookups.values()) {
            lookups.put(lookup.getPrefix(), lookup.getLookup());
        }
        for (final org.apache.commons.text.lookup.DefaultStringLookup lookup : org.apache.commons.text.lookup.DefaultStringLookup.values()) {
            lookups.putIfAbsent(lookup.getKey(), new org.apache.commons.configuration2.interpol.StringLookupAdapter(lookup.getStringLookup()));
        }
        DEFAULT_PREFIX_LOOKUPS = java.util.Collections.unmodifiableMap(lookups);
    }

    private final java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> prefixLookups;

    private final java.util.List<org.apache.commons.configuration2.interpol.Lookup> defaultLookups;

    private final org.apache.commons.text.StringSubstitutor substitutor;

    private volatile org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator;

    public ConfigurationInterpolator() {
        prefixLookups = new java.util.concurrent.ConcurrentHashMap<>();
        defaultLookups = new java.util.concurrent.CopyOnWriteArrayList<>();
        substitutor = initSubstitutor();
    }

    private static org.apache.commons.configuration2.interpol.ConfigurationInterpolator createInterpolator(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator ci = new org.apache.commons.configuration2.interpol.ConfigurationInterpolator();
        ci.addDefaultLookups(spec.getDefaultLookups());
        ci.registerLookups(spec.getPrefixLookups());
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(76).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("ci",ci);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START",org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("spec",spec);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionEnds();
        }
        if (runtimeAngelicValue)
            ci.setParentInterpolator(spec.getParentInterpolator());

        return ci;
    }

    private static java.lang.String extractVariableName(final java.lang.String strValue) {
        return strValue.substring(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END_LENGTH);
    }

    public static org.apache.commons.configuration2.interpol.ConfigurationInterpolator fromSpecification(final org.apache.commons.configuration2.interpol.InterpolatorSpecification spec) {
        if (spec == null) {
            throw new java.lang.IllegalArgumentException("InterpolatorSpecification must not be null!");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : org.apache.commons.configuration2.interpol.ConfigurationInterpolator.createInterpolator(spec);
    }

    public static java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getDefaultPrefixLookups() {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;
    }

    public static org.apache.commons.configuration2.interpol.Lookup nullSafeLookup(org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (lookup == null) {
            lookup = org.apache.commons.configuration2.interpol.DummyLookup.INSTANCE;
        }
        return lookup;
    }

    public void addDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup defaultLookup) {
        defaultLookups.add(defaultLookup);
    }

    public void addDefaultLookups(final java.util.Collection<? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            defaultLookups.addAll(lookups);
        }
    }

    public boolean deregisterLookup(final java.lang.String prefix) {
        return prefixLookups.remove(prefix) != null;
    }

    protected org.apache.commons.configuration2.interpol.Lookup fetchLookupForPrefix(final java.lang.String prefix) {
        return org.apache.commons.configuration2.interpol.ConfigurationInterpolator.nullSafeLookup(prefixLookups.get(prefix));
    }

    public java.util.List<org.apache.commons.configuration2.interpol.Lookup> getDefaultLookups() {
        return new java.util.ArrayList<>(defaultLookups);
    }

    public java.util.Map<java.lang.String, org.apache.commons.configuration2.interpol.Lookup> getLookups() {
        return new java.util.HashMap<>(prefixLookups);
    }

    public org.apache.commons.configuration2.interpol.ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }

    private org.apache.commons.text.StringSubstitutor initSubstitutor() {
        return new org.apache.commons.text.StringSubstitutor(( key) -> java.util.Objects.toString(resolve(key), null));
    }

    public java.lang.Object interpolate(final java.lang.Object value) {
        if (value instanceof java.lang.String) {
            final java.lang.String strValue = ((java.lang.String) (value));
            if (looksLikeSingleVariable(strValue)) {
                final java.lang.Object resolvedValue = resolveSingleVariable(strValue);
                if ((resolvedValue != null) && (!(resolvedValue instanceof java.lang.String))) {
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }

    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }

    private boolean looksLikeSingleVariable(final java.lang.String strValue) {
        return strValue.startsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_START) && strValue.endsWith(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.VAR_END);
    }

    public java.util.Set<java.lang.String> prefixSet() {
        return java.util.Collections.unmodifiableSet(prefixLookups.keySet());
    }

    public void registerLookup(final java.lang.String prefix, final org.apache.commons.configuration2.interpol.Lookup lookup) {
        if (prefix == null) {
            throw new java.lang.IllegalArgumentException("Prefix for lookup object must not be null!");
        }
        if (lookup == null) {
            throw new java.lang.IllegalArgumentException("Lookup object must not be null!");
        }
        prefixLookups.put(prefix, lookup);
    }

    public void registerLookups(final java.util.Map<java.lang.String, ? extends org.apache.commons.configuration2.interpol.Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }

    public boolean removeDefaultLookup(final org.apache.commons.configuration2.interpol.Lookup lookup) {
        return defaultLookups.remove(lookup);
    }

    public java.lang.Object resolve(final java.lang.String var) {
        if (var == null) {
            return null;
        }
        final int prefixPos = var.indexOf(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final java.lang.String prefix = var.substring(0, prefixPos);
            final java.lang.String name = var.substring(prefixPos + 1);
            final java.lang.Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }
        for (final org.apache.commons.configuration2.interpol.Lookup lookup : defaultLookups) {
            final java.lang.Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }
        final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }

    private java.lang.Object resolveSingleVariable(final java.lang.String strValue) {
        return resolve(org.apache.commons.configuration2.interpol.ConfigurationInterpolator.extractVariableName(strValue));
    }

    public void setEnableSubstitutionInVariables(final boolean f) {
        substitutor.setEnableSubstitutionInVariables(f);
    }

    public void setParentInterpolator(final org.apache.commons.configuration2.interpol.ConfigurationInterpolator parentInterpolator) {
        this.parentInterpolator = parentInterpolator;
    }
}
[386899] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
-801001282

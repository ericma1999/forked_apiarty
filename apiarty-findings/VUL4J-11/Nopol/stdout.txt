[0] INFO NoPol - Source files: [/apiarty/data/VUL4J-11/apache/commons-fileupload/src/main/java, /apiarty/data/VUL4J-11/apache/commons-fileupload/src/test/java]
[1] INFO NoPol - Classpath: [file:/apiarty/data/VUL4J-11/apache/commons-fileupload/target/classes/, file:/apiarty/data/VUL4J-11/apache/commons-fileupload/target/test-classes/, file:/root/.m2/repository/junit/junit/4.11/junit-4.11.jar, file:/root/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/root/.m2/repository/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar, file:/root/.m2/repository/portlet-api/portlet-api/1.0/portlet-api-1.0.jar, file:/root/.m2/repository/commons-io/commons-io/2.2/commons-io-2.2.jar]
[2] INFO NoPol - Statement type: PRE_THEN_COND
[3] INFO NoPol - Args: [org.apache.commons.fileupload.MultipartStreamTest]
[5] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/nopol/nopol/lib/z3/z3_for_linux', projectSources=[/apiarty/data/VUL4J-11/apache/commons-fileupload/src/main/java, /apiarty/data/VUL4J-11/apache/commons-fileupload/src/test/java], projectClasspath='[Ljava.net.URL;@2b80d80f', projectTests=[org.apache.commons.fileupload.MultipartStreamTest], complianceLevel=8, outputFolder=., json=false}
[6] INFO NoPol - Available processors (cores): 8
[12] INFO NoPol - Free memory: 69 MB
[13] INFO NoPol - Maximum memory: 3 GB
[14] INFO NoPol - Total memory available to JVM: 80 MB
[16] INFO NoPol - Java version: null
[17] INFO NoPol - JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
[18] INFO NoPol - PATH: /apiarty/apiarty.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/nopol/nopol/lib/z3/z3_for_linux', projectSources=[/apiarty/data/VUL4J-11/apache/commons-fileupload/src/main/java, /apiarty/data/VUL4J-11/apache/commons-fileupload/src/test/java], projectClasspath='[Ljava.net.URL;@2b80d80f', projectTests=[org.apache.commons.fileupload.MultipartStreamTest], complianceLevel=8, outputFolder=., json=false}
Parsing --path-options-file /tmp/test_runner8404691829239008476.options
Parsing --sourceBinaries /apiarty/data/VUL4J-11/apache/commons-fileupload/./target/classes --testBinaries /apiarty/data/VUL4J-11/apache/commons-fileupload/./target/test-classes --class org.apache.commons.fileupload.MultipartStreamTest --tests org.apache.commons.fileupload.MultipartStreamTest#testTwoParamConstructor:org.apache.commons.fileupload.MultipartStreamTest#testSmallBuffer:org.apache.commons.fileupload.MultipartStreamTest#testThreeParamConstructor  --coverage-detail DETAIL_COMPRESSED --nb-failing-load-class 0
File saved to the following path: /apiarty/data/VUL4J-11/apache/commons-fileupload/target/CoveredTestResultPerTest.dat
[4637] INFO CoverageRunner - Tests found: 3
[4641] INFO CoverageRunner - Tests executed: 3
1272035117
1272035117
[6276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.fileupload.MultipartStream:343.
1272035117
[6732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.fileupload.MultipartStream:342.
1272035117
[7131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.fileupload.MultipartStream:339.
1272035117
[7454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.fileupload.MultipartStream:337.
1272035117
[7809] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.fileupload.MultipartStream:336.
1272035117
[8144] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.fileupload.MultipartStream:335.
1272035117
[8526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.fileupload.MultipartStream:334.
1272035117
[8820] ERROR DynamicClassCompiler - [Compilation errors]
MultipartStream.java:107: error: variable notifier might not have been initialized
    }
    ^
[8999] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class MultipartStream {
    public static class ProgressNotifier {
        private final org.apache.commons.fileupload.ProgressListener listener;

        private final long contentLength;

        private long bytesRead;

        private int items;

        ProgressNotifier(org.apache.commons.fileupload.ProgressListener pListener, long pContentLength) {
            listener = pListener;
            contentLength = pContentLength;
        }

        void noteBytesRead(int pBytes) {
            bytesRead += pBytes;
            notifyListener();
        }

        void noteItem() {
            ++items;
            notifyListener();
        }

        private void notifyListener() {
            if (listener != null) {
                listener.update(bytesRead, contentLength, items);
            }
        }
    }

    public static final byte CR = 0xd;

    public static final byte LF = 0xa;

    public static final byte DASH = 0x2d;

    public static final int HEADER_PART_SIZE_MAX = 10240;

    protected static final int DEFAULT_BUFSIZE = 4096;

    protected static final byte[] HEADER_SEPARATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF, org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF };

    protected static final byte[] FIELD_SEPARATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF };

    protected static final byte[] STREAM_TERMINATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.DASH, org.apache.commons.fileupload.MultipartStream.DASH };

    protected static final byte[] BOUNDARY_PREFIX = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF, org.apache.commons.fileupload.MultipartStream.DASH, org.apache.commons.fileupload.MultipartStream.DASH };

    private final java.io.InputStream input;

    private int boundaryLength;

    private int keepRegion;

    private byte[] boundary;

    private final int bufSize;

    private final byte[] buffer;

    private int head;

    private int tail;

    private java.lang.String headerEncoding;

    private final org.apache.commons.fileupload.MultipartStream.ProgressNotifier notifier;

    @java.lang.Deprecated
    public MultipartStream() {
        this(null, null, null);
    }

    @java.lang.Deprecated
    public MultipartStream(java.io.InputStream input, byte[] boundary, int bufSize) {
        this(input, boundary, bufSize, null);
    }

    public MultipartStream(java.io.InputStream input, byte[] boundary, int bufSize, org.apache.commons.fileupload.MultipartStream.ProgressNotifier pNotifier) {
        this.input = input;
        this.bufSize = bufSize;
        this.buffer = new byte[bufSize];
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(7).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionEnds();
        }
        if (runtimeAngelicValue)
            this.notifier = pNotifier;

        this.boundary = new byte[boundary.length + org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length];
        this.boundaryLength = boundary.length + org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length;
        this.keepRegion = this.boundary.length;
        java.lang.System.arraycopy(org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX, 0, this.boundary, 0, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length);
        java.lang.System.arraycopy(boundary, 0, this.boundary, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length, boundary.length);
        head = 0;
        tail = 0;
    }

    MultipartStream(java.io.InputStream input, byte[] boundary, org.apache.commons.fileupload.MultipartStream.ProgressNotifier pNotifier) {
        this(input, boundary, org.apache.commons.fileupload.MultipartStream.DEFAULT_BUFSIZE, pNotifier);
    }

    @java.lang.Deprecated
    public MultipartStream(java.io.InputStream input, byte[] boundary) {
        this(input, boundary, org.apache.commons.fileupload.MultipartStream.DEFAULT_BUFSIZE, null);
    }

    public java.lang.String getHeaderEncoding() {
        return headerEncoding;
    }

    public void setHeaderEncoding(java.lang.String encoding) {
        headerEncoding = encoding;
    }

    public byte readByte() throws java.io.IOException {
        if (head == tail) {
            head = 0;
            tail = input.read(buffer, head, bufSize);
            if (tail == (-1)) {
                throw new java.io.IOException("No more data is available");
            }
            if (notifier != null) {
                notifier.noteBytesRead(tail);
            }
        }
        return buffer[head++];
    }

    public boolean readBoundary() throws org.apache.commons.fileupload.FileUploadBase.FileUploadIOException, org.apache.commons.fileupload.MultipartStream.MalformedStreamException {
        byte[] marker = new byte[2];
        boolean nextChunk = false;
        head += boundaryLength;
        try {
            marker[0] = readByte();
            if (marker[0] == org.apache.commons.fileupload.MultipartStream.LF) {
                return true;
            }
            marker[1] = readByte();
            if (org.apache.commons.fileupload.MultipartStream.arrayequals(marker, org.apache.commons.fileupload.MultipartStream.STREAM_TERMINATOR, 2)) {
                nextChunk = false;
            } else if (org.apache.commons.fileupload.MultipartStream.arrayequals(marker, org.apache.commons.fileupload.MultipartStream.FIELD_SEPARATOR, 2)) {
                nextChunk = true;
            } else {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Unexpected characters follow a boundary");
            }
        } catch (org.apache.commons.fileupload.FileUploadBase.FileUploadIOException e) {
            throw e;
        } catch (java.io.IOException e) {
            throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Stream ended unexpectedly");
        }
        return nextChunk;
    }

    public void setBoundary(byte[] boundary) throws org.apache.commons.fileupload.MultipartStream.IllegalBoundaryException {
        if (boundary.length != (boundaryLength - org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length)) {
            throw new org.apache.commons.fileupload.MultipartStream.IllegalBoundaryException("The length of a boundary token can not be changed");
        }
        java.lang.System.arraycopy(boundary, 0, this.boundary, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length, boundary.length);
    }

    public java.lang.String readHeaders() throws org.apache.commons.fileupload.FileUploadBase.FileUploadIOException, org.apache.commons.fileupload.MultipartStream.MalformedStreamException {
        int i = 0;
        byte b;
        java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
        int size = 0;
        while (i < org.apache.commons.fileupload.MultipartStream.HEADER_SEPARATOR.length) {
            try {
                b = readByte();
            } catch (org.apache.commons.fileupload.FileUploadBase.FileUploadIOException e) {
                throw e;
            } catch (java.io.IOException e) {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Stream ended unexpectedly");
            }
            if ((++size) > org.apache.commons.fileupload.MultipartStream.HEADER_PART_SIZE_MAX) {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException(java.lang.String.format("Header section has more than %s bytes (maybe it is not properly terminated)", java.lang.Integer.valueOf(org.apache.commons.fileupload.MultipartStream.HEADER_PART_SIZE_MAX)));
            }
            if (b == org.apache.commons.fileupload.MultipartStream.HEADER_SEPARATOR[i]) {
                i++;
            } else {
                i = 0;
            }
            baos.write(b);
        } 
        java.lang.String headers = null;
        if (headerEncoding != null) {
            try {
                headers = baos.toString(headerEncoding);
            } catch (java.io.UnsupportedEncodingException e) {
                headers = baos.toString();
            }
        } else {
            headers = baos.toString();
        }
        return headers;
    }

    public int readBodyData(java.io.OutputStream output) throws org.apache.commons.fileupload.MultipartStream.MalformedStreamException, java.io.IOException {
        final java.io.InputStream istream = newInputStream();
        return ((int) (org.apache.commons.fileupload.util.Streams.copy(istream, output, false)));
    }

    org.apache.commons.fileupload.MultipartStream.ItemInputStream newInputStream() {
        return new org.apache.commons.fileupload.MultipartStream.ItemInputStream();
    }

    public int discardBodyData() throws org.apache.commons.fileupload.MultipartStream.MalformedStreamException, java.io.IOException {
        return readBodyData(null);
    }

    public boolean skipPreamble() throws java.io.IOException {
        java.lang.System.arraycopy(boundary, 2, boundary, 0, boundary.length - 2);
        boundaryLength = boundary.length - 2;
        try {
            discardBodyData();
            return readBoundary();
        } catch (org.apache.commons.fileupload.MultipartStream.MalformedStreamException e) {
            return false;
        } finally {
            java.lang.System.arraycopy(boundary, 0, boundary, 2, boundary.length - 2);
            boundaryLength = boundary.length;
            boundary[0] = org.apache.commons.fileupload.MultipartStream.CR;
            boundary[1] = org.apache.commons.fileupload.MultipartStream.LF;
        }
    }

    public static boolean arrayequals(byte[] a, byte[] b, int count) {
        for (int i = 0; i < count; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }

    protected int findByte(byte value, int pos) {
        for (int i = pos; i < tail; i++) {
            if (buffer[i] == value) {
                return i;
            }
        }
        return -1;
    }

    protected int findSeparator() {
        int first;
        int match = 0;
        int maxpos = tail - boundaryLength;
        for (first = head; (first <= maxpos) && (match != boundaryLength); first++) {
            first = findByte(boundary[0], first);
            if ((first == (-1)) || (first > maxpos)) {
                return -1;
            }
            for (match = 1; match < boundaryLength; match++) {
                if (buffer[first + match] != boundary[match]) {
                    break;
                }
            }
        }
        if (match == boundaryLength) {
            return first - 1;
        }
        return -1;
    }

    public static class MalformedStreamException extends java.io.IOException {
        private static final long serialVersionUID = 6466926458059796677L;

        public MalformedStreamException() {
            super();
        }

        public MalformedStreamException(java.lang.String message) {
            super(message);
        }
    }

    public static class IllegalBoundaryException extends java.io.IOException {
        private static final long serialVersionUID = -161533165102632918L;

        public IllegalBoundaryException() {
            super();
        }

        public IllegalBoundaryException(java.lang.String message) {
            super(message);
        }
    }

    public class ItemInputStream extends java.io.InputStream implements org.apache.commons.fileupload.util.Closeable {
        private long total;

        private int pad;

        private int pos;

        private boolean closed;

        ItemInputStream() {
            findSeparator();
        }

        private void findSeparator() {
            pos = MultipartStream.this.findSeparator();
            if (pos == (-1)) {
                if ((tail - head) > keepRegion) {
                    pad = keepRegion;
                } else {
                    pad = tail - head;
                }
            }
        }

        public long getBytesRead() {
            return total;
        }

        @java.lang.Override
        public int available() throws java.io.IOException {
            if (pos == (-1)) {
                return (tail - head) - pad;
            }
            return pos - head;
        }

        private static final int BYTE_POSITIVE_OFFSET = 256;

        @java.lang.Override
        public int read() throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            if ((available() == 0) && (makeAvailable() == 0)) {
                return -1;
            }
            ++total;
            int b = buffer[head++];
            if (b >= 0) {
                return b;
            }
            return b + org.apache.commons.fileupload.MultipartStream.ItemInputStream.BYTE_POSITIVE_OFFSET;
        }

        @java.lang.Override
        public int read(byte[] b, int off, int len) throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            if (len == 0) {
                return 0;
            }
            int res = available();
            if (res == 0) {
                res = makeAvailable();
                if (res == 0) {
                    return -1;
                }
            }
            res = java.lang.Math.min(res, len);
            java.lang.System.arraycopy(buffer, head, b, off, res);
            head += res;
            total += res;
            return res;
        }

        @java.lang.Override
        public void close() throws java.io.IOException {
            close(false);
        }

        public void close(boolean pCloseUnderlying) throws java.io.IOException {
            if (closed) {
                return;
            }
            if (pCloseUnderlying) {
                closed = true;
                input.close();
            } else {
                for (; ;) {
                    int av = available();
                    if (av == 0) {
                        av = makeAvailable();
                        if (av == 0) {
                            break;
                        }
                    }
                    skip(av);
                }
            }
            closed = true;
        }

        @java.lang.Override
        public long skip(long bytes) throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            int av = available();
            if (av == 0) {
                av = makeAvailable();
                if (av == 0) {
                    return 0;
                }
            }
            long res = java.lang.Math.min(av, bytes);
            head += res;
            return res;
        }

        private int makeAvailable() throws java.io.IOException {
            if (pos != (-1)) {
                return 0;
            }
            total += (tail - head) - pad;
            java.lang.System.arraycopy(buffer, tail - pad, buffer, 0, pad);
            head = 0;
            tail = pad;
            for (; ;) {
                int bytesRead = input.read(buffer, tail, bufSize - tail);
                if (bytesRead == (-1)) {
                    final java.lang.String msg = "Stream ended unexpectedly";
                    throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException(msg);
                }
                if (notifier != null) {
                    notifier.noteBytesRead(bytesRead);
                }
                tail += bytesRead;
                findSeparator();
                int av = available();
                if ((av > 0) || (pos != (-1))) {
                    return av;
                }
            }
        }

        public boolean isClosed() {
            return closed;
        }
    }
}
[9005] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1272035117
[9275] ERROR DynamicClassCompiler - [Compilation errors]
MultipartStream.java:107: error: variable buffer might not have been initialized
    }
    ^
[9425] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class MultipartStream {
    public static class ProgressNotifier {
        private final org.apache.commons.fileupload.ProgressListener listener;

        private final long contentLength;

        private long bytesRead;

        private int items;

        ProgressNotifier(org.apache.commons.fileupload.ProgressListener pListener, long pContentLength) {
            listener = pListener;
            contentLength = pContentLength;
        }

        void noteBytesRead(int pBytes) {
            bytesRead += pBytes;
            notifyListener();
        }

        void noteItem() {
            ++items;
            notifyListener();
        }

        private void notifyListener() {
            if (listener != null) {
                listener.update(bytesRead, contentLength, items);
            }
        }
    }

    public static final byte CR = 0xd;

    public static final byte LF = 0xa;

    public static final byte DASH = 0x2d;

    public static final int HEADER_PART_SIZE_MAX = 10240;

    protected static final int DEFAULT_BUFSIZE = 4096;

    protected static final byte[] HEADER_SEPARATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF, org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF };

    protected static final byte[] FIELD_SEPARATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF };

    protected static final byte[] STREAM_TERMINATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.DASH, org.apache.commons.fileupload.MultipartStream.DASH };

    protected static final byte[] BOUNDARY_PREFIX = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF, org.apache.commons.fileupload.MultipartStream.DASH, org.apache.commons.fileupload.MultipartStream.DASH };

    private final java.io.InputStream input;

    private int boundaryLength;

    private int keepRegion;

    private byte[] boundary;

    private final int bufSize;

    private final byte[] buffer;

    private int head;

    private int tail;

    private java.lang.String headerEncoding;

    private final org.apache.commons.fileupload.MultipartStream.ProgressNotifier notifier;

    @java.lang.Deprecated
    public MultipartStream() {
        this(null, null, null);
    }

    @java.lang.Deprecated
    public MultipartStream(java.io.InputStream input, byte[] boundary, int bufSize) {
        this(input, boundary, bufSize, null);
    }

    public MultipartStream(java.io.InputStream input, byte[] boundary, int bufSize, org.apache.commons.fileupload.MultipartStream.ProgressNotifier pNotifier) {
        this.input = input;
        this.bufSize = bufSize;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(8).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionEnds();
        }
        if (runtimeAngelicValue)
            this.buffer = new byte[bufSize];

        this.notifier = pNotifier;
        this.boundary = new byte[boundary.length + org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length];
        this.boundaryLength = boundary.length + org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length;
        this.keepRegion = this.boundary.length;
        java.lang.System.arraycopy(org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX, 0, this.boundary, 0, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length);
        java.lang.System.arraycopy(boundary, 0, this.boundary, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length, boundary.length);
        head = 0;
        tail = 0;
    }

    MultipartStream(java.io.InputStream input, byte[] boundary, org.apache.commons.fileupload.MultipartStream.ProgressNotifier pNotifier) {
        this(input, boundary, org.apache.commons.fileupload.MultipartStream.DEFAULT_BUFSIZE, pNotifier);
    }

    @java.lang.Deprecated
    public MultipartStream(java.io.InputStream input, byte[] boundary) {
        this(input, boundary, org.apache.commons.fileupload.MultipartStream.DEFAULT_BUFSIZE, null);
    }

    public java.lang.String getHeaderEncoding() {
        return headerEncoding;
    }

    public void setHeaderEncoding(java.lang.String encoding) {
        headerEncoding = encoding;
    }

    public byte readByte() throws java.io.IOException {
        if (head == tail) {
            head = 0;
            tail = input.read(buffer, head, bufSize);
            if (tail == (-1)) {
                throw new java.io.IOException("No more data is available");
            }
            if (notifier != null) {
                notifier.noteBytesRead(tail);
            }
        }
        return buffer[head++];
    }

    public boolean readBoundary() throws org.apache.commons.fileupload.FileUploadBase.FileUploadIOException, org.apache.commons.fileupload.MultipartStream.MalformedStreamException {
        byte[] marker = new byte[2];
        boolean nextChunk = false;
        head += boundaryLength;
        try {
            marker[0] = readByte();
            if (marker[0] == org.apache.commons.fileupload.MultipartStream.LF) {
                return true;
            }
            marker[1] = readByte();
            if (org.apache.commons.fileupload.MultipartStream.arrayequals(marker, org.apache.commons.fileupload.MultipartStream.STREAM_TERMINATOR, 2)) {
                nextChunk = false;
            } else if (org.apache.commons.fileupload.MultipartStream.arrayequals(marker, org.apache.commons.fileupload.MultipartStream.FIELD_SEPARATOR, 2)) {
                nextChunk = true;
            } else {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Unexpected characters follow a boundary");
            }
        } catch (org.apache.commons.fileupload.FileUploadBase.FileUploadIOException e) {
            throw e;
        } catch (java.io.IOException e) {
            throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Stream ended unexpectedly");
        }
        return nextChunk;
    }

    public void setBoundary(byte[] boundary) throws org.apache.commons.fileupload.MultipartStream.IllegalBoundaryException {
        if (boundary.length != (boundaryLength - org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length)) {
            throw new org.apache.commons.fileupload.MultipartStream.IllegalBoundaryException("The length of a boundary token can not be changed");
        }
        java.lang.System.arraycopy(boundary, 0, this.boundary, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length, boundary.length);
    }

    public java.lang.String readHeaders() throws org.apache.commons.fileupload.FileUploadBase.FileUploadIOException, org.apache.commons.fileupload.MultipartStream.MalformedStreamException {
        int i = 0;
        byte b;
        java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
        int size = 0;
        while (i < org.apache.commons.fileupload.MultipartStream.HEADER_SEPARATOR.length) {
            try {
                b = readByte();
            } catch (org.apache.commons.fileupload.FileUploadBase.FileUploadIOException e) {
                throw e;
            } catch (java.io.IOException e) {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Stream ended unexpectedly");
            }
            if ((++size) > org.apache.commons.fileupload.MultipartStream.HEADER_PART_SIZE_MAX) {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException(java.lang.String.format("Header section has more than %s bytes (maybe it is not properly terminated)", java.lang.Integer.valueOf(org.apache.commons.fileupload.MultipartStream.HEADER_PART_SIZE_MAX)));
            }
            if (b == org.apache.commons.fileupload.MultipartStream.HEADER_SEPARATOR[i]) {
                i++;
            } else {
                i = 0;
            }
            baos.write(b);
        } 
        java.lang.String headers = null;
        if (headerEncoding != null) {
            try {
                headers = baos.toString(headerEncoding);
            } catch (java.io.UnsupportedEncodingException e) {
                headers = baos.toString();
            }
        } else {
            headers = baos.toString();
        }
        return headers;
    }

    public int readBodyData(java.io.OutputStream output) throws org.apache.commons.fileupload.MultipartStream.MalformedStreamException, java.io.IOException {
        final java.io.InputStream istream = newInputStream();
        return ((int) (org.apache.commons.fileupload.util.Streams.copy(istream, output, false)));
    }

    org.apache.commons.fileupload.MultipartStream.ItemInputStream newInputStream() {
        return new org.apache.commons.fileupload.MultipartStream.ItemInputStream();
    }

    public int discardBodyData() throws org.apache.commons.fileupload.MultipartStream.MalformedStreamException, java.io.IOException {
        return readBodyData(null);
    }

    public boolean skipPreamble() throws java.io.IOException {
        java.lang.System.arraycopy(boundary, 2, boundary, 0, boundary.length - 2);
        boundaryLength = boundary.length - 2;
        try {
            discardBodyData();
            return readBoundary();
        } catch (org.apache.commons.fileupload.MultipartStream.MalformedStreamException e) {
            return false;
        } finally {
            java.lang.System.arraycopy(boundary, 0, boundary, 2, boundary.length - 2);
            boundaryLength = boundary.length;
            boundary[0] = org.apache.commons.fileupload.MultipartStream.CR;
            boundary[1] = org.apache.commons.fileupload.MultipartStream.LF;
        }
    }

    public static boolean arrayequals(byte[] a, byte[] b, int count) {
        for (int i = 0; i < count; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }

    protected int findByte(byte value, int pos) {
        for (int i = pos; i < tail; i++) {
            if (buffer[i] == value) {
                return i;
            }
        }
        return -1;
    }

    protected int findSeparator() {
        int first;
        int match = 0;
        int maxpos = tail - boundaryLength;
        for (first = head; (first <= maxpos) && (match != boundaryLength); first++) {
            first = findByte(boundary[0], first);
            if ((first == (-1)) || (first > maxpos)) {
                return -1;
            }
            for (match = 1; match < boundaryLength; match++) {
                if (buffer[first + match] != boundary[match]) {
                    break;
                }
            }
        }
        if (match == boundaryLength) {
            return first - 1;
        }
        return -1;
    }

    public static class MalformedStreamException extends java.io.IOException {
        private static final long serialVersionUID = 6466926458059796677L;

        public MalformedStreamException() {
            super();
        }

        public MalformedStreamException(java.lang.String message) {
            super(message);
        }
    }

    public static class IllegalBoundaryException extends java.io.IOException {
        private static final long serialVersionUID = -161533165102632918L;

        public IllegalBoundaryException() {
            super();
        }

        public IllegalBoundaryException(java.lang.String message) {
            super(message);
        }
    }

    public class ItemInputStream extends java.io.InputStream implements org.apache.commons.fileupload.util.Closeable {
        private long total;

        private int pad;

        private int pos;

        private boolean closed;

        ItemInputStream() {
            findSeparator();
        }

        private void findSeparator() {
            pos = MultipartStream.this.findSeparator();
            if (pos == (-1)) {
                if ((tail - head) > keepRegion) {
                    pad = keepRegion;
                } else {
                    pad = tail - head;
                }
            }
        }

        public long getBytesRead() {
            return total;
        }

        @java.lang.Override
        public int available() throws java.io.IOException {
            if (pos == (-1)) {
                return (tail - head) - pad;
            }
            return pos - head;
        }

        private static final int BYTE_POSITIVE_OFFSET = 256;

        @java.lang.Override
        public int read() throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            if ((available() == 0) && (makeAvailable() == 0)) {
                return -1;
            }
            ++total;
            int b = buffer[head++];
            if (b >= 0) {
                return b;
            }
            return b + org.apache.commons.fileupload.MultipartStream.ItemInputStream.BYTE_POSITIVE_OFFSET;
        }

        @java.lang.Override
        public int read(byte[] b, int off, int len) throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            if (len == 0) {
                return 0;
            }
            int res = available();
            if (res == 0) {
                res = makeAvailable();
                if (res == 0) {
                    return -1;
                }
            }
            res = java.lang.Math.min(res, len);
            java.lang.System.arraycopy(buffer, head, b, off, res);
            head += res;
            total += res;
            return res;
        }

        @java.lang.Override
        public void close() throws java.io.IOException {
            close(false);
        }

        public void close(boolean pCloseUnderlying) throws java.io.IOException {
            if (closed) {
                return;
            }
            if (pCloseUnderlying) {
                closed = true;
                input.close();
            } else {
                for (; ;) {
                    int av = available();
                    if (av == 0) {
                        av = makeAvailable();
                        if (av == 0) {
                            break;
                        }
                    }
                    skip(av);
                }
            }
            closed = true;
        }

        @java.lang.Override
        public long skip(long bytes) throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            int av = available();
            if (av == 0) {
                av = makeAvailable();
                if (av == 0) {
                    return 0;
                }
            }
            long res = java.lang.Math.min(av, bytes);
            head += res;
            return res;
        }

        private int makeAvailable() throws java.io.IOException {
            if (pos != (-1)) {
                return 0;
            }
            total += (tail - head) - pad;
            java.lang.System.arraycopy(buffer, tail - pad, buffer, 0, pad);
            head = 0;
            tail = pad;
            for (; ;) {
                int bytesRead = input.read(buffer, tail, bufSize - tail);
                if (bytesRead == (-1)) {
                    final java.lang.String msg = "Stream ended unexpectedly";
                    throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException(msg);
                }
                if (notifier != null) {
                    notifier.noteBytesRead(bytesRead);
                }
                tail += bytesRead;
                findSeparator();
                int av = available();
                if ((av > 0) || (pos != (-1))) {
                    return av;
                }
            }
        }

        public boolean isClosed() {
            return closed;
        }
    }
}
[9430] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1272035117
[9669] ERROR DynamicClassCompiler - [Compilation errors]
MultipartStream.java:107: error: variable bufSize might not have been initialized
    }
    ^
[9779] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class MultipartStream {
    public static class ProgressNotifier {
        private final org.apache.commons.fileupload.ProgressListener listener;

        private final long contentLength;

        private long bytesRead;

        private int items;

        ProgressNotifier(org.apache.commons.fileupload.ProgressListener pListener, long pContentLength) {
            listener = pListener;
            contentLength = pContentLength;
        }

        void noteBytesRead(int pBytes) {
            bytesRead += pBytes;
            notifyListener();
        }

        void noteItem() {
            ++items;
            notifyListener();
        }

        private void notifyListener() {
            if (listener != null) {
                listener.update(bytesRead, contentLength, items);
            }
        }
    }

    public static final byte CR = 0xd;

    public static final byte LF = 0xa;

    public static final byte DASH = 0x2d;

    public static final int HEADER_PART_SIZE_MAX = 10240;

    protected static final int DEFAULT_BUFSIZE = 4096;

    protected static final byte[] HEADER_SEPARATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF, org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF };

    protected static final byte[] FIELD_SEPARATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF };

    protected static final byte[] STREAM_TERMINATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.DASH, org.apache.commons.fileupload.MultipartStream.DASH };

    protected static final byte[] BOUNDARY_PREFIX = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF, org.apache.commons.fileupload.MultipartStream.DASH, org.apache.commons.fileupload.MultipartStream.DASH };

    private final java.io.InputStream input;

    private int boundaryLength;

    private int keepRegion;

    private byte[] boundary;

    private final int bufSize;

    private final byte[] buffer;

    private int head;

    private int tail;

    private java.lang.String headerEncoding;

    private final org.apache.commons.fileupload.MultipartStream.ProgressNotifier notifier;

    @java.lang.Deprecated
    public MultipartStream() {
        this(null, null, null);
    }

    @java.lang.Deprecated
    public MultipartStream(java.io.InputStream input, byte[] boundary, int bufSize) {
        this(input, boundary, bufSize, null);
    }

    public MultipartStream(java.io.InputStream input, byte[] boundary, int bufSize, org.apache.commons.fileupload.MultipartStream.ProgressNotifier pNotifier) {
        this.input = input;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(9).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionEnds();
        }
        if (runtimeAngelicValue)
            this.bufSize = bufSize;

        this.buffer = new byte[bufSize];
        this.notifier = pNotifier;
        this.boundary = new byte[boundary.length + org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length];
        this.boundaryLength = boundary.length + org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length;
        this.keepRegion = this.boundary.length;
        java.lang.System.arraycopy(org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX, 0, this.boundary, 0, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length);
        java.lang.System.arraycopy(boundary, 0, this.boundary, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length, boundary.length);
        head = 0;
        tail = 0;
    }

    MultipartStream(java.io.InputStream input, byte[] boundary, org.apache.commons.fileupload.MultipartStream.ProgressNotifier pNotifier) {
        this(input, boundary, org.apache.commons.fileupload.MultipartStream.DEFAULT_BUFSIZE, pNotifier);
    }

    @java.lang.Deprecated
    public MultipartStream(java.io.InputStream input, byte[] boundary) {
        this(input, boundary, org.apache.commons.fileupload.MultipartStream.DEFAULT_BUFSIZE, null);
    }

    public java.lang.String getHeaderEncoding() {
        return headerEncoding;
    }

    public void setHeaderEncoding(java.lang.String encoding) {
        headerEncoding = encoding;
    }

    public byte readByte() throws java.io.IOException {
        if (head == tail) {
            head = 0;
            tail = input.read(buffer, head, bufSize);
            if (tail == (-1)) {
                throw new java.io.IOException("No more data is available");
            }
            if (notifier != null) {
                notifier.noteBytesRead(tail);
            }
        }
        return buffer[head++];
    }

    public boolean readBoundary() throws org.apache.commons.fileupload.FileUploadBase.FileUploadIOException, org.apache.commons.fileupload.MultipartStream.MalformedStreamException {
        byte[] marker = new byte[2];
        boolean nextChunk = false;
        head += boundaryLength;
        try {
            marker[0] = readByte();
            if (marker[0] == org.apache.commons.fileupload.MultipartStream.LF) {
                return true;
            }
            marker[1] = readByte();
            if (org.apache.commons.fileupload.MultipartStream.arrayequals(marker, org.apache.commons.fileupload.MultipartStream.STREAM_TERMINATOR, 2)) {
                nextChunk = false;
            } else if (org.apache.commons.fileupload.MultipartStream.arrayequals(marker, org.apache.commons.fileupload.MultipartStream.FIELD_SEPARATOR, 2)) {
                nextChunk = true;
            } else {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Unexpected characters follow a boundary");
            }
        } catch (org.apache.commons.fileupload.FileUploadBase.FileUploadIOException e) {
            throw e;
        } catch (java.io.IOException e) {
            throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Stream ended unexpectedly");
        }
        return nextChunk;
    }

    public void setBoundary(byte[] boundary) throws org.apache.commons.fileupload.MultipartStream.IllegalBoundaryException {
        if (boundary.length != (boundaryLength - org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length)) {
            throw new org.apache.commons.fileupload.MultipartStream.IllegalBoundaryException("The length of a boundary token can not be changed");
        }
        java.lang.System.arraycopy(boundary, 0, this.boundary, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length, boundary.length);
    }

    public java.lang.String readHeaders() throws org.apache.commons.fileupload.FileUploadBase.FileUploadIOException, org.apache.commons.fileupload.MultipartStream.MalformedStreamException {
        int i = 0;
        byte b;
        java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
        int size = 0;
        while (i < org.apache.commons.fileupload.MultipartStream.HEADER_SEPARATOR.length) {
            try {
                b = readByte();
            } catch (org.apache.commons.fileupload.FileUploadBase.FileUploadIOException e) {
                throw e;
            } catch (java.io.IOException e) {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Stream ended unexpectedly");
            }
            if ((++size) > org.apache.commons.fileupload.MultipartStream.HEADER_PART_SIZE_MAX) {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException(java.lang.String.format("Header section has more than %s bytes (maybe it is not properly terminated)", java.lang.Integer.valueOf(org.apache.commons.fileupload.MultipartStream.HEADER_PART_SIZE_MAX)));
            }
            if (b == org.apache.commons.fileupload.MultipartStream.HEADER_SEPARATOR[i]) {
                i++;
            } else {
                i = 0;
            }
            baos.write(b);
        } 
        java.lang.String headers = null;
        if (headerEncoding != null) {
            try {
                headers = baos.toString(headerEncoding);
            } catch (java.io.UnsupportedEncodingException e) {
                headers = baos.toString();
            }
        } else {
            headers = baos.toString();
        }
        return headers;
    }

    public int readBodyData(java.io.OutputStream output) throws org.apache.commons.fileupload.MultipartStream.MalformedStreamException, java.io.IOException {
        final java.io.InputStream istream = newInputStream();
        return ((int) (org.apache.commons.fileupload.util.Streams.copy(istream, output, false)));
    }

    org.apache.commons.fileupload.MultipartStream.ItemInputStream newInputStream() {
        return new org.apache.commons.fileupload.MultipartStream.ItemInputStream();
    }

    public int discardBodyData() throws org.apache.commons.fileupload.MultipartStream.MalformedStreamException, java.io.IOException {
        return readBodyData(null);
    }

    public boolean skipPreamble() throws java.io.IOException {
        java.lang.System.arraycopy(boundary, 2, boundary, 0, boundary.length - 2);
        boundaryLength = boundary.length - 2;
        try {
            discardBodyData();
            return readBoundary();
        } catch (org.apache.commons.fileupload.MultipartStream.MalformedStreamException e) {
            return false;
        } finally {
            java.lang.System.arraycopy(boundary, 0, boundary, 2, boundary.length - 2);
            boundaryLength = boundary.length;
            boundary[0] = org.apache.commons.fileupload.MultipartStream.CR;
            boundary[1] = org.apache.commons.fileupload.MultipartStream.LF;
        }
    }

    public static boolean arrayequals(byte[] a, byte[] b, int count) {
        for (int i = 0; i < count; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }

    protected int findByte(byte value, int pos) {
        for (int i = pos; i < tail; i++) {
            if (buffer[i] == value) {
                return i;
            }
        }
        return -1;
    }

    protected int findSeparator() {
        int first;
        int match = 0;
        int maxpos = tail - boundaryLength;
        for (first = head; (first <= maxpos) && (match != boundaryLength); first++) {
            first = findByte(boundary[0], first);
            if ((first == (-1)) || (first > maxpos)) {
                return -1;
            }
            for (match = 1; match < boundaryLength; match++) {
                if (buffer[first + match] != boundary[match]) {
                    break;
                }
            }
        }
        if (match == boundaryLength) {
            return first - 1;
        }
        return -1;
    }

    public static class MalformedStreamException extends java.io.IOException {
        private static final long serialVersionUID = 6466926458059796677L;

        public MalformedStreamException() {
            super();
        }

        public MalformedStreamException(java.lang.String message) {
            super(message);
        }
    }

    public static class IllegalBoundaryException extends java.io.IOException {
        private static final long serialVersionUID = -161533165102632918L;

        public IllegalBoundaryException() {
            super();
        }

        public IllegalBoundaryException(java.lang.String message) {
            super(message);
        }
    }

    public class ItemInputStream extends java.io.InputStream implements org.apache.commons.fileupload.util.Closeable {
        private long total;

        private int pad;

        private int pos;

        private boolean closed;

        ItemInputStream() {
            findSeparator();
        }

        private void findSeparator() {
            pos = MultipartStream.this.findSeparator();
            if (pos == (-1)) {
                if ((tail - head) > keepRegion) {
                    pad = keepRegion;
                } else {
                    pad = tail - head;
                }
            }
        }

        public long getBytesRead() {
            return total;
        }

        @java.lang.Override
        public int available() throws java.io.IOException {
            if (pos == (-1)) {
                return (tail - head) - pad;
            }
            return pos - head;
        }

        private static final int BYTE_POSITIVE_OFFSET = 256;

        @java.lang.Override
        public int read() throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            if ((available() == 0) && (makeAvailable() == 0)) {
                return -1;
            }
            ++total;
            int b = buffer[head++];
            if (b >= 0) {
                return b;
            }
            return b + org.apache.commons.fileupload.MultipartStream.ItemInputStream.BYTE_POSITIVE_OFFSET;
        }

        @java.lang.Override
        public int read(byte[] b, int off, int len) throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            if (len == 0) {
                return 0;
            }
            int res = available();
            if (res == 0) {
                res = makeAvailable();
                if (res == 0) {
                    return -1;
                }
            }
            res = java.lang.Math.min(res, len);
            java.lang.System.arraycopy(buffer, head, b, off, res);
            head += res;
            total += res;
            return res;
        }

        @java.lang.Override
        public void close() throws java.io.IOException {
            close(false);
        }

        public void close(boolean pCloseUnderlying) throws java.io.IOException {
            if (closed) {
                return;
            }
            if (pCloseUnderlying) {
                closed = true;
                input.close();
            } else {
                for (; ;) {
                    int av = available();
                    if (av == 0) {
                        av = makeAvailable();
                        if (av == 0) {
                            break;
                        }
                    }
                    skip(av);
                }
            }
            closed = true;
        }

        @java.lang.Override
        public long skip(long bytes) throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            int av = available();
            if (av == 0) {
                av = makeAvailable();
                if (av == 0) {
                    return 0;
                }
            }
            long res = java.lang.Math.min(av, bytes);
            head += res;
            return res;
        }

        private int makeAvailable() throws java.io.IOException {
            if (pos != (-1)) {
                return 0;
            }
            total += (tail - head) - pad;
            java.lang.System.arraycopy(buffer, tail - pad, buffer, 0, pad);
            head = 0;
            tail = pad;
            for (; ;) {
                int bytesRead = input.read(buffer, tail, bufSize - tail);
                if (bytesRead == (-1)) {
                    final java.lang.String msg = "Stream ended unexpectedly";
                    throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException(msg);
                }
                if (notifier != null) {
                    notifier.noteBytesRead(bytesRead);
                }
                tail += bytesRead;
                findSeparator();
                int av = available();
                if ((av > 0) || (pos != (-1))) {
                    return av;
                }
            }
        }

        public boolean isClosed() {
            return closed;
        }
    }
}
[9785] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1272035117
[10137] ERROR DynamicClassCompiler - [Compilation errors]
MultipartStream.java:107: error: variable input might not have been initialized
    }
    ^
[10241] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class MultipartStream {
    public static class ProgressNotifier {
        private final org.apache.commons.fileupload.ProgressListener listener;

        private final long contentLength;

        private long bytesRead;

        private int items;

        ProgressNotifier(org.apache.commons.fileupload.ProgressListener pListener, long pContentLength) {
            listener = pListener;
            contentLength = pContentLength;
        }

        void noteBytesRead(int pBytes) {
            bytesRead += pBytes;
            notifyListener();
        }

        void noteItem() {
            ++items;
            notifyListener();
        }

        private void notifyListener() {
            if (listener != null) {
                listener.update(bytesRead, contentLength, items);
            }
        }
    }

    public static final byte CR = 0xd;

    public static final byte LF = 0xa;

    public static final byte DASH = 0x2d;

    public static final int HEADER_PART_SIZE_MAX = 10240;

    protected static final int DEFAULT_BUFSIZE = 4096;

    protected static final byte[] HEADER_SEPARATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF, org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF };

    protected static final byte[] FIELD_SEPARATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF };

    protected static final byte[] STREAM_TERMINATOR = new byte[]{ org.apache.commons.fileupload.MultipartStream.DASH, org.apache.commons.fileupload.MultipartStream.DASH };

    protected static final byte[] BOUNDARY_PREFIX = new byte[]{ org.apache.commons.fileupload.MultipartStream.CR, org.apache.commons.fileupload.MultipartStream.LF, org.apache.commons.fileupload.MultipartStream.DASH, org.apache.commons.fileupload.MultipartStream.DASH };

    private final java.io.InputStream input;

    private int boundaryLength;

    private int keepRegion;

    private byte[] boundary;

    private final int bufSize;

    private final byte[] buffer;

    private int head;

    private int tail;

    private java.lang.String headerEncoding;

    private final org.apache.commons.fileupload.MultipartStream.ProgressNotifier notifier;

    @java.lang.Deprecated
    public MultipartStream() {
        this(null, null, null);
    }

    @java.lang.Deprecated
    public MultipartStream(java.io.InputStream input, byte[] boundary, int bufSize) {
        this(input, boundary, bufSize, null);
    }

    public MultipartStream(java.io.InputStream input, byte[] boundary, int bufSize, org.apache.commons.fileupload.MultipartStream.ProgressNotifier pNotifier) {
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(10).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionStarts();
            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionEnds();
        }
        if (runtimeAngelicValue)
            this.input = input;

        this.bufSize = bufSize;
        this.buffer = new byte[bufSize];
        this.notifier = pNotifier;
        this.boundary = new byte[boundary.length + org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length];
        this.boundaryLength = boundary.length + org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length;
        this.keepRegion = this.boundary.length;
        java.lang.System.arraycopy(org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX, 0, this.boundary, 0, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length);
        java.lang.System.arraycopy(boundary, 0, this.boundary, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length, boundary.length);
        head = 0;
        tail = 0;
    }

    MultipartStream(java.io.InputStream input, byte[] boundary, org.apache.commons.fileupload.MultipartStream.ProgressNotifier pNotifier) {
        this(input, boundary, org.apache.commons.fileupload.MultipartStream.DEFAULT_BUFSIZE, pNotifier);
    }

    @java.lang.Deprecated
    public MultipartStream(java.io.InputStream input, byte[] boundary) {
        this(input, boundary, org.apache.commons.fileupload.MultipartStream.DEFAULT_BUFSIZE, null);
    }

    public java.lang.String getHeaderEncoding() {
        return headerEncoding;
    }

    public void setHeaderEncoding(java.lang.String encoding) {
        headerEncoding = encoding;
    }

    public byte readByte() throws java.io.IOException {
        if (head == tail) {
            head = 0;
            tail = input.read(buffer, head, bufSize);
            if (tail == (-1)) {
                throw new java.io.IOException("No more data is available");
            }
            if (notifier != null) {
                notifier.noteBytesRead(tail);
            }
        }
        return buffer[head++];
    }

    public boolean readBoundary() throws org.apache.commons.fileupload.FileUploadBase.FileUploadIOException, org.apache.commons.fileupload.MultipartStream.MalformedStreamException {
        byte[] marker = new byte[2];
        boolean nextChunk = false;
        head += boundaryLength;
        try {
            marker[0] = readByte();
            if (marker[0] == org.apache.commons.fileupload.MultipartStream.LF) {
                return true;
            }
            marker[1] = readByte();
            if (org.apache.commons.fileupload.MultipartStream.arrayequals(marker, org.apache.commons.fileupload.MultipartStream.STREAM_TERMINATOR, 2)) {
                nextChunk = false;
            } else if (org.apache.commons.fileupload.MultipartStream.arrayequals(marker, org.apache.commons.fileupload.MultipartStream.FIELD_SEPARATOR, 2)) {
                nextChunk = true;
            } else {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Unexpected characters follow a boundary");
            }
        } catch (org.apache.commons.fileupload.FileUploadBase.FileUploadIOException e) {
            throw e;
        } catch (java.io.IOException e) {
            throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Stream ended unexpectedly");
        }
        return nextChunk;
    }

    public void setBoundary(byte[] boundary) throws org.apache.commons.fileupload.MultipartStream.IllegalBoundaryException {
        if (boundary.length != (boundaryLength - org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length)) {
            throw new org.apache.commons.fileupload.MultipartStream.IllegalBoundaryException("The length of a boundary token can not be changed");
        }
        java.lang.System.arraycopy(boundary, 0, this.boundary, org.apache.commons.fileupload.MultipartStream.BOUNDARY_PREFIX.length, boundary.length);
    }

    public java.lang.String readHeaders() throws org.apache.commons.fileupload.FileUploadBase.FileUploadIOException, org.apache.commons.fileupload.MultipartStream.MalformedStreamException {
        int i = 0;
        byte b;
        java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
        int size = 0;
        while (i < org.apache.commons.fileupload.MultipartStream.HEADER_SEPARATOR.length) {
            try {
                b = readByte();
            } catch (org.apache.commons.fileupload.FileUploadBase.FileUploadIOException e) {
                throw e;
            } catch (java.io.IOException e) {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException("Stream ended unexpectedly");
            }
            if ((++size) > org.apache.commons.fileupload.MultipartStream.HEADER_PART_SIZE_MAX) {
                throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException(java.lang.String.format("Header section has more than %s bytes (maybe it is not properly terminated)", java.lang.Integer.valueOf(org.apache.commons.fileupload.MultipartStream.HEADER_PART_SIZE_MAX)));
            }
            if (b == org.apache.commons.fileupload.MultipartStream.HEADER_SEPARATOR[i]) {
                i++;
            } else {
                i = 0;
            }
            baos.write(b);
        } 
        java.lang.String headers = null;
        if (headerEncoding != null) {
            try {
                headers = baos.toString(headerEncoding);
            } catch (java.io.UnsupportedEncodingException e) {
                headers = baos.toString();
            }
        } else {
            headers = baos.toString();
        }
        return headers;
    }

    public int readBodyData(java.io.OutputStream output) throws org.apache.commons.fileupload.MultipartStream.MalformedStreamException, java.io.IOException {
        final java.io.InputStream istream = newInputStream();
        return ((int) (org.apache.commons.fileupload.util.Streams.copy(istream, output, false)));
    }

    org.apache.commons.fileupload.MultipartStream.ItemInputStream newInputStream() {
        return new org.apache.commons.fileupload.MultipartStream.ItemInputStream();
    }

    public int discardBodyData() throws org.apache.commons.fileupload.MultipartStream.MalformedStreamException, java.io.IOException {
        return readBodyData(null);
    }

    public boolean skipPreamble() throws java.io.IOException {
        java.lang.System.arraycopy(boundary, 2, boundary, 0, boundary.length - 2);
        boundaryLength = boundary.length - 2;
        try {
            discardBodyData();
            return readBoundary();
        } catch (org.apache.commons.fileupload.MultipartStream.MalformedStreamException e) {
            return false;
        } finally {
            java.lang.System.arraycopy(boundary, 0, boundary, 2, boundary.length - 2);
            boundaryLength = boundary.length;
            boundary[0] = org.apache.commons.fileupload.MultipartStream.CR;
            boundary[1] = org.apache.commons.fileupload.MultipartStream.LF;
        }
    }

    public static boolean arrayequals(byte[] a, byte[] b, int count) {
        for (int i = 0; i < count; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }

    protected int findByte(byte value, int pos) {
        for (int i = pos; i < tail; i++) {
            if (buffer[i] == value) {
                return i;
            }
        }
        return -1;
    }

    protected int findSeparator() {
        int first;
        int match = 0;
        int maxpos = tail - boundaryLength;
        for (first = head; (first <= maxpos) && (match != boundaryLength); first++) {
            first = findByte(boundary[0], first);
            if ((first == (-1)) || (first > maxpos)) {
                return -1;
            }
            for (match = 1; match < boundaryLength; match++) {
                if (buffer[first + match] != boundary[match]) {
                    break;
                }
            }
        }
        if (match == boundaryLength) {
            return first - 1;
        }
        return -1;
    }

    public static class MalformedStreamException extends java.io.IOException {
        private static final long serialVersionUID = 6466926458059796677L;

        public MalformedStreamException() {
            super();
        }

        public MalformedStreamException(java.lang.String message) {
            super(message);
        }
    }

    public static class IllegalBoundaryException extends java.io.IOException {
        private static final long serialVersionUID = -161533165102632918L;

        public IllegalBoundaryException() {
            super();
        }

        public IllegalBoundaryException(java.lang.String message) {
            super(message);
        }
    }

    public class ItemInputStream extends java.io.InputStream implements org.apache.commons.fileupload.util.Closeable {
        private long total;

        private int pad;

        private int pos;

        private boolean closed;

        ItemInputStream() {
            findSeparator();
        }

        private void findSeparator() {
            pos = MultipartStream.this.findSeparator();
            if (pos == (-1)) {
                if ((tail - head) > keepRegion) {
                    pad = keepRegion;
                } else {
                    pad = tail - head;
                }
            }
        }

        public long getBytesRead() {
            return total;
        }

        @java.lang.Override
        public int available() throws java.io.IOException {
            if (pos == (-1)) {
                return (tail - head) - pad;
            }
            return pos - head;
        }

        private static final int BYTE_POSITIVE_OFFSET = 256;

        @java.lang.Override
        public int read() throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            if ((available() == 0) && (makeAvailable() == 0)) {
                return -1;
            }
            ++total;
            int b = buffer[head++];
            if (b >= 0) {
                return b;
            }
            return b + org.apache.commons.fileupload.MultipartStream.ItemInputStream.BYTE_POSITIVE_OFFSET;
        }

        @java.lang.Override
        public int read(byte[] b, int off, int len) throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            if (len == 0) {
                return 0;
            }
            int res = available();
            if (res == 0) {
                res = makeAvailable();
                if (res == 0) {
                    return -1;
                }
            }
            res = java.lang.Math.min(res, len);
            java.lang.System.arraycopy(buffer, head, b, off, res);
            head += res;
            total += res;
            return res;
        }

        @java.lang.Override
        public void close() throws java.io.IOException {
            close(false);
        }

        public void close(boolean pCloseUnderlying) throws java.io.IOException {
            if (closed) {
                return;
            }
            if (pCloseUnderlying) {
                closed = true;
                input.close();
            } else {
                for (; ;) {
                    int av = available();
                    if (av == 0) {
                        av = makeAvailable();
                        if (av == 0) {
                            break;
                        }
                    }
                    skip(av);
                }
            }
            closed = true;
        }

        @java.lang.Override
        public long skip(long bytes) throws java.io.IOException {
            if (closed) {
                throw new org.apache.commons.fileupload.FileItemStream.ItemSkippedException();
            }
            int av = available();
            if (av == 0) {
                av = makeAvailable();
                if (av == 0) {
                    return 0;
                }
            }
            long res = java.lang.Math.min(av, bytes);
            head += res;
            return res;
        }

        private int makeAvailable() throws java.io.IOException {
            if (pos != (-1)) {
                return 0;
            }
            total += (tail - head) - pad;
            java.lang.System.arraycopy(buffer, tail - pad, buffer, 0, pad);
            head = 0;
            tail = pad;
            for (; ;) {
                int bytesRead = input.read(buffer, tail, bufSize - tail);
                if (bytesRead == (-1)) {
                    final java.lang.String msg = "Stream ended unexpectedly";
                    throw new org.apache.commons.fileupload.MultipartStream.MalformedStreamException(msg);
                }
                if (notifier != null) {
                    notifier.noteBytesRead(bytesRead);
                }
                tail += bytesRead;
                findSeparator();
                int av = available();
                if ((av > 0) || (pos != (-1))) {
                    return av;
                }
            }
        }

        public boolean isClosed() {
            return closed;
        }
    }
}
[10246] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
1272035117
[10296] INFO NoPol - ----INFORMATION----
[10323] INFO NoPol - Nb classes : 48
[10325] INFO NoPol - Nb methods : 306
[10325] INFO NoPol - Nb Statements Analyzed : 11
[10326] INFO NoPol - Nb Statements with Angelic Value Found : 0
[10327] INFO NoPol - Nb inputs in SMT : 0
[10329] INFO NoPol - Nb SMT level: 0
[10330] INFO NoPol - Nb variables in SMT : 0
[10331] INFO NoPol - NoPol Execution time : 10297ms
[10332] INFO NoPol - 
NO_ANGELIC_VALUE
